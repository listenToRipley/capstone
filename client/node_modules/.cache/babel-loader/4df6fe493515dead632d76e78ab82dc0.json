{"ast":null,"code":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.certToPEM = certToPEM;\nexports.rsaPublicKeyToPEM = rsaPublicKeyToPEM;\n\nfunction certToPEM(cert) {\n  cert = cert.match(/.{1,64}/g).join('\\n');\n  cert = '-----BEGIN CERTIFICATE-----\\n' + cert + '\\n-----END CERTIFICATE-----\\n';\n  return cert;\n}\n\nfunction prepadSigned(hexStr) {\n  var msb = hexStr[0];\n\n  if (msb < '0' || msb > '7') {\n    return '00' + hexStr;\n  }\n\n  return hexStr;\n}\n\nfunction toHex(number) {\n  var nstr = number.toString(16);\n\n  if (nstr.length % 2) {\n    return '0' + nstr;\n  }\n\n  return nstr;\n}\n\nfunction encodeLengthHex(n) {\n  if (n <= 127) {\n    return toHex(n);\n  }\n\n  var nHex = toHex(n);\n  var lengthOfLengthByte = 128 + nHex.length / 2;\n  return toHex(lengthOfLengthByte) + nHex;\n}\n/*\n * Source: http://stackoverflow.com/questions/18835132/xml-to-pem-in-node-js\n */\n\n\nfunction rsaPublicKeyToPEM(modulusB64, exponentB64) {\n  var modulus = Buffer.from(modulusB64, 'base64');\n  var exponent = Buffer.from(exponentB64, 'base64');\n  var modulusHex = prepadSigned(modulus.toString('hex'));\n  var exponentHex = prepadSigned(exponent.toString('hex'));\n  var modlen = modulusHex.length / 2;\n  var explen = exponentHex.length / 2;\n  var encodedModlen = encodeLengthHex(modlen);\n  var encodedExplen = encodeLengthHex(explen);\n  var encodedPubkey = '30' + encodeLengthHex(modlen + explen + encodedModlen.length / 2 + encodedExplen.length / 2 + 2) + '02' + encodedModlen + modulusHex + '02' + encodedExplen + exponentHex;\n  var der = Buffer.from(encodedPubkey, 'hex').toString('base64');\n  var pem = '-----BEGIN RSA PUBLIC KEY-----\\n';\n  pem += '' + der.match(/.{1,64}/g).join('\\n');\n  pem += '\\n-----END RSA PUBLIC KEY-----\\n';\n  return pem;\n}","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/jwks-rsa/lib/utils.js"],"names":["Object","defineProperty","exports","value","certToPEM","rsaPublicKeyToPEM","cert","match","join","prepadSigned","hexStr","msb","toHex","number","nstr","toString","length","encodeLengthHex","n","nHex","lengthOfLengthByte","modulusB64","exponentB64","modulus","Buffer","from","exponent","modulusHex","exponentHex","modlen","explen","encodedModlen","encodedExplen","encodedPubkey","der","pem"],"mappings":"AAAA;;AAEAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAC3CC,EAAAA,KAAK,EAAE;AADoC,CAA7C;AAGAD,OAAO,CAACE,SAAR,GAAoBA,SAApB;AACAF,OAAO,CAACG,iBAAR,GAA4BA,iBAA5B;;AACA,SAASD,SAAT,CAAmBE,IAAnB,EAAyB;AACvBA,EAAAA,IAAI,GAAGA,IAAI,CAACC,KAAL,CAAW,UAAX,EAAuBC,IAAvB,CAA4B,IAA5B,CAAP;AACAF,EAAAA,IAAI,GAAG,kCAAkCA,IAAlC,GAAyC,+BAAhD;AACA,SAAOA,IAAP;AACD;;AAED,SAASG,YAAT,CAAsBC,MAAtB,EAA8B;AAC5B,MAAIC,GAAG,GAAGD,MAAM,CAAC,CAAD,CAAhB;;AACA,MAAIC,GAAG,GAAG,GAAN,IAAaA,GAAG,GAAG,GAAvB,EAA4B;AAC1B,WAAO,OAAOD,MAAd;AACD;;AACD,SAAOA,MAAP;AACD;;AAED,SAASE,KAAT,CAAeC,MAAf,EAAuB;AACrB,MAAIC,IAAI,GAAGD,MAAM,CAACE,QAAP,CAAgB,EAAhB,CAAX;;AACA,MAAID,IAAI,CAACE,MAAL,GAAc,CAAlB,EAAqB;AACnB,WAAO,MAAMF,IAAb;AACD;;AACD,SAAOA,IAAP;AACD;;AAED,SAASG,eAAT,CAAyBC,CAAzB,EAA4B;AAC1B,MAAIA,CAAC,IAAI,GAAT,EAAc;AACZ,WAAON,KAAK,CAACM,CAAD,CAAZ;AACD;;AACD,MAAIC,IAAI,GAAGP,KAAK,CAACM,CAAD,CAAhB;AACA,MAAIE,kBAAkB,GAAG,MAAMD,IAAI,CAACH,MAAL,GAAc,CAA7C;AACA,SAAOJ,KAAK,CAACQ,kBAAD,CAAL,GAA4BD,IAAnC;AACD;AAED;AACA;AACA;;;AACA,SAASd,iBAAT,CAA2BgB,UAA3B,EAAuCC,WAAvC,EAAoD;AAClD,MAAIC,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYJ,UAAZ,EAAwB,QAAxB,CAAd;AACA,MAAIK,QAAQ,GAAGF,MAAM,CAACC,IAAP,CAAYH,WAAZ,EAAyB,QAAzB,CAAf;AACA,MAAIK,UAAU,GAAGlB,YAAY,CAACc,OAAO,CAACR,QAAR,CAAiB,KAAjB,CAAD,CAA7B;AACA,MAAIa,WAAW,GAAGnB,YAAY,CAACiB,QAAQ,CAACX,QAAT,CAAkB,KAAlB,CAAD,CAA9B;AACA,MAAIc,MAAM,GAAGF,UAAU,CAACX,MAAX,GAAoB,CAAjC;AACA,MAAIc,MAAM,GAAGF,WAAW,CAACZ,MAAZ,GAAqB,CAAlC;AAEA,MAAIe,aAAa,GAAGd,eAAe,CAACY,MAAD,CAAnC;AACA,MAAIG,aAAa,GAAGf,eAAe,CAACa,MAAD,CAAnC;AACA,MAAIG,aAAa,GAAG,OAAOhB,eAAe,CAACY,MAAM,GAAGC,MAAT,GAAkBC,aAAa,CAACf,MAAd,GAAuB,CAAzC,GAA6CgB,aAAa,CAAChB,MAAd,GAAuB,CAApE,GAAwE,CAAzE,CAAtB,GAAoG,IAApG,GAA2Ge,aAA3G,GAA2HJ,UAA3H,GAAwI,IAAxI,GAA+IK,aAA/I,GAA+JJ,WAAnL;AAEA,MAAIM,GAAG,GAAGV,MAAM,CAACC,IAAP,CAAYQ,aAAZ,EAA2B,KAA3B,EAAkClB,QAAlC,CAA2C,QAA3C,CAAV;AAEA,MAAIoB,GAAG,GAAG,kCAAV;AACAA,EAAAA,GAAG,IAAI,KAAKD,GAAG,CAAC3B,KAAJ,CAAU,UAAV,EAAsBC,IAAtB,CAA2B,IAA3B,CAAZ;AACA2B,EAAAA,GAAG,IAAI,kCAAP;AACA,SAAOA,GAAP;AACD","sourcesContent":["'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.certToPEM = certToPEM;\nexports.rsaPublicKeyToPEM = rsaPublicKeyToPEM;\nfunction certToPEM(cert) {\n  cert = cert.match(/.{1,64}/g).join('\\n');\n  cert = '-----BEGIN CERTIFICATE-----\\n' + cert + '\\n-----END CERTIFICATE-----\\n';\n  return cert;\n}\n\nfunction prepadSigned(hexStr) {\n  var msb = hexStr[0];\n  if (msb < '0' || msb > '7') {\n    return '00' + hexStr;\n  }\n  return hexStr;\n}\n\nfunction toHex(number) {\n  var nstr = number.toString(16);\n  if (nstr.length % 2) {\n    return '0' + nstr;\n  }\n  return nstr;\n}\n\nfunction encodeLengthHex(n) {\n  if (n <= 127) {\n    return toHex(n);\n  }\n  var nHex = toHex(n);\n  var lengthOfLengthByte = 128 + nHex.length / 2;\n  return toHex(lengthOfLengthByte) + nHex;\n}\n\n/*\n * Source: http://stackoverflow.com/questions/18835132/xml-to-pem-in-node-js\n */\nfunction rsaPublicKeyToPEM(modulusB64, exponentB64) {\n  var modulus = Buffer.from(modulusB64, 'base64');\n  var exponent = Buffer.from(exponentB64, 'base64');\n  var modulusHex = prepadSigned(modulus.toString('hex'));\n  var exponentHex = prepadSigned(exponent.toString('hex'));\n  var modlen = modulusHex.length / 2;\n  var explen = exponentHex.length / 2;\n\n  var encodedModlen = encodeLengthHex(modlen);\n  var encodedExplen = encodeLengthHex(explen);\n  var encodedPubkey = '30' + encodeLengthHex(modlen + explen + encodedModlen.length / 2 + encodedExplen.length / 2 + 2) + '02' + encodedModlen + modulusHex + '02' + encodedExplen + exponentHex;\n\n  var der = Buffer.from(encodedPubkey, 'hex').toString('base64');\n\n  var pem = '-----BEGIN RSA PUBLIC KEY-----\\n';\n  pem += '' + der.match(/.{1,64}/g).join('\\n');\n  pem += '\\n-----END RSA PUBLIC KEY-----\\n';\n  return pem;\n}"]},"metadata":{},"sourceType":"script"}