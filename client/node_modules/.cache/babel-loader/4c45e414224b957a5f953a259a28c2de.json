{"ast":null,"code":"var assert = require('assert');\n\nvar toNerfDart = require('./nerf-dart.js');\n\nmodule.exports = getCredentialsByURI;\n\nfunction getCredentialsByURI(uri) {\n  assert(uri && typeof uri === 'string', 'registry URL is required');\n  var nerfed = toNerfDart(uri);\n  var defnerf = toNerfDart(this.get('registry')); // hidden class micro-optimization\n\n  var c = {\n    scope: nerfed,\n    token: undefined,\n    password: undefined,\n    username: undefined,\n    email: undefined,\n    auth: undefined,\n    alwaysAuth: undefined\n  }; // used to override scope matching for tokens as well as legacy auth\n\n  if (this.get(nerfed + ':always-auth') !== undefined) {\n    var val = this.get(nerfed + ':always-auth');\n    c.alwaysAuth = val === 'false' ? false : !!val;\n  } else if (this.get('always-auth') !== undefined) {\n    c.alwaysAuth = this.get('always-auth');\n  }\n\n  if (this.get(nerfed + ':_authToken')) {\n    c.token = this.get(nerfed + ':_authToken'); // the bearer token is enough, don't confuse things\n\n    return c;\n  }\n\n  if (this.get(nerfed + ':-authtoken')) {\n    c.token = this.get(nerfed + ':-authtoken'); // the bearer token is enough, don't confuse things\n\n    return c;\n  } // Handle the old-style _auth=<base64> style for the default\n  // registry, if set.\n\n\n  var authDef = this.get('_auth');\n  var userDef = this.get('username');\n  var passDef = this.get('_password');\n\n  if (authDef && !(userDef && passDef)) {\n    authDef = Buffer.from(authDef, 'base64').toString();\n    authDef = authDef.split(':');\n    userDef = authDef.shift();\n    passDef = authDef.join(':');\n  }\n\n  if (this.get(nerfed + ':_password')) {\n    c.password = Buffer.from(this.get(nerfed + ':_password'), 'base64').toString('utf8');\n  } else if (nerfed === defnerf && passDef) {\n    c.password = passDef;\n  }\n\n  if (this.get(nerfed + ':username')) {\n    c.username = this.get(nerfed + ':username');\n  } else if (nerfed === defnerf && userDef) {\n    c.username = userDef;\n  }\n\n  if (this.get(nerfed + ':email')) {\n    c.email = this.get(nerfed + ':email');\n  } else if (this.get('email')) {\n    c.email = this.get('email');\n  }\n\n  if (c.username && c.password) {\n    c.auth = Buffer.from(c.username + ':' + c.password).toString('base64');\n  }\n\n  return c;\n}","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/npm/lib/config/get-credentials-by-uri.js"],"names":["assert","require","toNerfDart","module","exports","getCredentialsByURI","uri","nerfed","defnerf","get","c","scope","token","undefined","password","username","email","auth","alwaysAuth","val","authDef","userDef","passDef","Buffer","from","toString","split","shift","join"],"mappings":"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","sourcesContent":["var assert = require('assert')\n\nvar toNerfDart = require('./nerf-dart.js')\n\nmodule.exports = getCredentialsByURI\n\nfunction getCredentialsByURI (uri) {\n  assert(uri && typeof uri === 'string', 'registry URL is required')\n  var nerfed = toNerfDart(uri)\n  var defnerf = toNerfDart(this.get('registry'))\n\n  // hidden class micro-optimization\n  var c = {\n    scope: nerfed,\n    token: undefined,\n    password: undefined,\n    username: undefined,\n    email: undefined,\n    auth: undefined,\n    alwaysAuth: undefined\n  }\n\n  // used to override scope matching for tokens as well as legacy auth\n  if (this.get(nerfed + ':always-auth') !== undefined) {\n    var val = this.get(nerfed + ':always-auth')\n    c.alwaysAuth = val === 'false' ? false : !!val\n  } else if (this.get('always-auth') !== undefined) {\n    c.alwaysAuth = this.get('always-auth')\n  }\n\n  if (this.get(nerfed + ':_authToken')) {\n    c.token = this.get(nerfed + ':_authToken')\n    // the bearer token is enough, don't confuse things\n    return c\n  }\n\n  if (this.get(nerfed + ':-authtoken')) {\n    c.token = this.get(nerfed + ':-authtoken')\n    // the bearer token is enough, don't confuse things\n    return c\n  }\n\n  // Handle the old-style _auth=<base64> style for the default\n  // registry, if set.\n  var authDef = this.get('_auth')\n  var userDef = this.get('username')\n  var passDef = this.get('_password')\n  if (authDef && !(userDef && passDef)) {\n    authDef = Buffer.from(authDef, 'base64').toString()\n    authDef = authDef.split(':')\n    userDef = authDef.shift()\n    passDef = authDef.join(':')\n  }\n\n  if (this.get(nerfed + ':_password')) {\n    c.password = Buffer.from(this.get(nerfed + ':_password'), 'base64').toString('utf8')\n  } else if (nerfed === defnerf && passDef) {\n    c.password = passDef\n  }\n\n  if (this.get(nerfed + ':username')) {\n    c.username = this.get(nerfed + ':username')\n  } else if (nerfed === defnerf && userDef) {\n    c.username = userDef\n  }\n\n  if (this.get(nerfed + ':email')) {\n    c.email = this.get(nerfed + ':email')\n  } else if (this.get('email')) {\n    c.email = this.get('email')\n  }\n\n  if (c.username && c.password) {\n    c.auth = Buffer.from(c.username + ':' + c.password).toString('base64')\n  }\n\n  return c\n}\n"]},"metadata":{},"sourceType":"script"}