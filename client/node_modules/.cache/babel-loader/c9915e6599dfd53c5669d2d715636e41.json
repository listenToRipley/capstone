{"ast":null,"code":"import { LOGIN } from './types';\nexport const login = (username, password) => {\n  console.log('the username  is :', username.value, 'the password:', password.setPassword);\n  return {\n    type: LOGIN,\n    payload: {\n      user: {\n        username: username.setUsername,\n        password: password.setPassword,\n        validation: true,\n        token: `${username.setUsername}+${password.setPassword}=true~START_USING!`\n      }\n    }\n  };\n}; // const baseline = `http://localhost:4001/`\n// export const login = (username, password) => async dispatch => {\n//   let path = `postLogin/`\n//   let params = `${username.value}/${password.value}`\n//   let fullPath = `${baseline}${path}${params}`.trim()\n//   console.log('the path : ', fullPath)\n//     try{\n//         let res = await fetch(fullPath,{\n//           method: 'GET',\n//           headers: {\n//             Accept: \"application/json\", \"Content-Type\": \"application/json\"\n//             }\n//         }\n//         )\n//         console.log('can you see res? : ',res)\n//         .then(res)\n//         .then(res => res.json())\n//         .then(\n//         dispatch( {\n//             type: LOGIN,\n//             payload: {\n//               user: {\n//                 username: username.value,\n//                 password: '',\n//                 validation: true,\n//                 token: res.json(token)\n//               }\n//             }\n//         })\n//       )\n//     }\n//     catch(e){\n//         console.log('what is the error? ', {e})\n//     }\n// }","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/client/src/redux/actions/login.js"],"names":["LOGIN","login","username","password","console","log","value","setPassword","type","payload","user","setUsername","validation","token"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,SAApB;AAGA,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB;AAC3CC,EAAAA,OAAO,CAACC,GAAR,CAAY,oBAAZ,EAAkCH,QAAQ,CAACI,KAA3C,EAAiD,eAAjD,EAAiEH,QAAQ,CAACI,WAA1E;AACF,SAAO;AACLC,IAAAA,IAAI,EAAER,KADD;AAELS,IAAAA,OAAO,EAAE;AACPC,MAAAA,IAAI,EAAE;AACJR,QAAAA,QAAQ,EAAEA,QAAQ,CAACS,WADf;AAEJR,QAAAA,QAAQ,EAAEA,QAAQ,CAACI,WAFf;AAGJK,QAAAA,UAAU,EAAE,IAHR;AAIJC,QAAAA,KAAK,EAAG,GAAEX,QAAQ,CAACS,WAAY,IAAGR,QAAQ,CAACI,WAAY;AAJnD;AADC;AAFJ,GAAP;AAWC,CAbM,C,CAcP;AAEA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import {LOGIN} from './types'\n\n\nexport const login = (username, password) => {\n  console.log('the username  is :', username.value,'the password:',password.setPassword)\nreturn {\n  type: LOGIN,\n  payload: {\n    user: {\n      username: username.setUsername,\n      password: password.setPassword,\n      validation: true,\n      token: `${username.setUsername}+${password.setPassword}=true~START_USING!`\n    }\n  }\n }\n}\n// const baseline = `http://localhost:4001/`\n\n// export const login = (username, password) => async dispatch => {\n//   let path = `postLogin/`\n//   let params = `${username.value}/${password.value}`\n//   let fullPath = `${baseline}${path}${params}`.trim()\n\n//   console.log('the path : ', fullPath)\n\n//     try{\n        \n//         let res = await fetch(fullPath,{\n//           method: 'GET',\n//           headers: {\n//             Accept: \"application/json\", \"Content-Type\": \"application/json\"\n//             }\n//         }\n//         )\n//         console.log('can you see res? : ',res)\n//         .then(res)\n//         .then(res => res.json())\n//         .then(\n//         dispatch( {\n//             type: LOGIN,\n//             payload: {\n//               user: {\n//                 username: username.value,\n//                 password: '',\n//                 validation: true,\n//                 token: res.json(token)\n//               }\n//             }\n//         })\n//       )\n//     }\n//     catch(e){\n//         console.log('what is the error? ', {e})\n//     }\n// }"]},"metadata":{},"sourceType":"module"}