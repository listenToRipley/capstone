{"ast":null,"code":"'use strict';\n\nvar _errors = require('../errors');\n\nvar _JwksClient = require('../JwksClient');\n\nmodule.exports.koaJwtSecret = function () {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n  if (!options.jwksUri) {\n    throw new _errors.ArgumentError('No JWKS URI provided');\n  }\n\n  var client = new _JwksClient.JwksClient(options);\n  return function secretProvider() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        alg = _ref.alg,\n        kid = _ref.kid;\n\n    return new Promise(function (resolve, reject) {\n      // Only RS256 is supported.\n      if (alg !== 'RS256') {\n        return reject(new Error('Missing / invalid token algorithm'));\n      }\n\n      client.getSigningKey(kid, function (err, key) {\n        if (err) {\n          if (options.handleSigningKeyError) {\n            return options.handleSigningKeyError(err).then(reject);\n          }\n\n          return reject(err);\n        } // Provide the key.\n\n\n        resolve(key.publicKey || key.rsaPublicKey);\n      });\n    });\n  };\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/jwks-rsa/lib/integrations/koa.js"],"names":["_errors","require","_JwksClient","module","exports","koaJwtSecret","options","arguments","length","undefined","jwksUri","ArgumentError","client","JwksClient","secretProvider","_ref","alg","kid","Promise","resolve","reject","Error","getSigningKey","err","key","handleSigningKeyError","then","publicKey","rsaPublicKey"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEAE,MAAM,CAACC,OAAP,CAAeC,YAAf,GAA8B,YAAY;AACxC,MAAIC,OAAO,GAAGC,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAAlF;;AAGA,MAAI,CAACD,OAAO,CAACI,OAAb,EAAsB;AACpB,UAAM,IAAIV,OAAO,CAACW,aAAZ,CAA0B,sBAA1B,CAAN;AACD;;AAED,MAAIC,MAAM,GAAG,IAAIV,WAAW,CAACW,UAAhB,CAA2BP,OAA3B,CAAb;AAEA,SAAO,SAASQ,cAAT,GAA0B;AAC/B,QAAIC,IAAI,GAAGR,SAAS,CAACC,MAAV,GAAmB,CAAnB,IAAwBD,SAAS,CAAC,CAAD,CAAT,KAAiBE,SAAzC,GAAqDF,SAAS,CAAC,CAAD,CAA9D,GAAoE,EAA/E;AAAA,QACIS,GAAG,GAAGD,IAAI,CAACC,GADf;AAAA,QAEIC,GAAG,GAAGF,IAAI,CAACE,GAFf;;AAIA,WAAO,IAAIC,OAAJ,CAAY,UAAUC,OAAV,EAAmBC,MAAnB,EAA2B;AAE5C;AACA,UAAIJ,GAAG,KAAK,OAAZ,EAAqB;AACnB,eAAOI,MAAM,CAAC,IAAIC,KAAJ,CAAU,mCAAV,CAAD,CAAb;AACD;;AAEDT,MAAAA,MAAM,CAACU,aAAP,CAAqBL,GAArB,EAA0B,UAAUM,GAAV,EAAeC,GAAf,EAAoB;AAC5C,YAAID,GAAJ,EAAS;AAEP,cAAIjB,OAAO,CAACmB,qBAAZ,EAAmC;AACjC,mBAAOnB,OAAO,CAACmB,qBAAR,CAA8BF,GAA9B,EAAmCG,IAAnC,CAAwCN,MAAxC,CAAP;AACD;;AAED,iBAAOA,MAAM,CAACG,GAAD,CAAb;AACD,SAR2C,CAU5C;;;AACAJ,QAAAA,OAAO,CAACK,GAAG,CAACG,SAAJ,IAAiBH,GAAG,CAACI,YAAtB,CAAP;AACD,OAZD;AAaD,KApBM,CAAP;AAqBD,GA1BD;AA2BD,CArCD","sourcesContent":["'use strict';\n\nvar _errors = require('../errors');\n\nvar _JwksClient = require('../JwksClient');\n\nmodule.exports.koaJwtSecret = function () {\n  var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n\n\n  if (!options.jwksUri) {\n    throw new _errors.ArgumentError('No JWKS URI provided');\n  }\n\n  var client = new _JwksClient.JwksClient(options);\n\n  return function secretProvider() {\n    var _ref = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {},\n        alg = _ref.alg,\n        kid = _ref.kid;\n\n    return new Promise(function (resolve, reject) {\n\n      // Only RS256 is supported.\n      if (alg !== 'RS256') {\n        return reject(new Error('Missing / invalid token algorithm'));\n      }\n\n      client.getSigningKey(kid, function (err, key) {\n        if (err) {\n\n          if (options.handleSigningKeyError) {\n            return options.handleSigningKeyError(err).then(reject);\n          }\n\n          return reject(err);\n        }\n\n        // Provide the key.\n        resolve(key.publicKey || key.rsaPublicKey);\n      });\n    });\n  };\n};"]},"metadata":{},"sourceType":"script"}