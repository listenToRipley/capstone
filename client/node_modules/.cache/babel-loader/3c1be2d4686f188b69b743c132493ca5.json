{"ast":null,"code":"'use strict';\n\nvar _errors = require('../errors');\n\nvar _JwksClient = require('../JwksClient');\n\nvar handleSigningKeyError = function handleSigningKeyError(err, cb) {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  } // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n\n\n  if (err) {\n    return cb(err);\n  }\n};\n\nmodule.exports.expressJwtSecret = function (options) {\n  if (options === null || options === undefined) {\n    throw new _errors.ArgumentError('An options object must be provided when initializing expressJwtSecret');\n  }\n\n  var client = new _JwksClient.JwksClient(options);\n  var onError = options.handleSigningKeyError || handleSigningKeyError;\n  return function secretProvider(req, header, payload, cb) {\n    // Only RS256 is supported.\n    if (!header || header.alg !== 'RS256') {\n      return cb(null, null);\n    }\n\n    client.getSigningKey(header.kid, function (err, key) {\n      if (err) {\n        return onError(err, function (newError) {\n          return cb(newError, null);\n        });\n      } // Provide the key.\n\n\n      return cb(null, key.publicKey || key.rsaPublicKey);\n    });\n  };\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/jwks-rsa/lib/integrations/express.js"],"names":["_errors","require","_JwksClient","handleSigningKeyError","err","cb","name","module","exports","expressJwtSecret","options","undefined","ArgumentError","client","JwksClient","onError","secretProvider","req","header","payload","alg","getSigningKey","kid","key","newError","publicKey","rsaPublicKey"],"mappings":"AAAA;;AAEA,IAAIA,OAAO,GAAGC,OAAO,CAAC,WAAD,CAArB;;AAEA,IAAIC,WAAW,GAAGD,OAAO,CAAC,eAAD,CAAzB;;AAEA,IAAIE,qBAAqB,GAAG,SAASA,qBAAT,CAA+BC,GAA/B,EAAoCC,EAApC,EAAwC;AAClE;AACA,MAAID,GAAG,IAAIA,GAAG,CAACE,IAAJ,KAAa,yBAAxB,EAAmD;AACjD,WAAOD,EAAE,CAAC,IAAD,CAAT;AACD,GAJiE,CAMlE;;;AACA,MAAID,GAAJ,EAAS;AACP,WAAOC,EAAE,CAACD,GAAD,CAAT;AACD;AACF,CAVD;;AAYAG,MAAM,CAACC,OAAP,CAAeC,gBAAf,GAAkC,UAAUC,OAAV,EAAmB;AACnD,MAAIA,OAAO,KAAK,IAAZ,IAAoBA,OAAO,KAAKC,SAApC,EAA+C;AAC7C,UAAM,IAAIX,OAAO,CAACY,aAAZ,CAA0B,uEAA1B,CAAN;AACD;;AAED,MAAIC,MAAM,GAAG,IAAIX,WAAW,CAACY,UAAhB,CAA2BJ,OAA3B,CAAb;AACA,MAAIK,OAAO,GAAGL,OAAO,CAACP,qBAAR,IAAiCA,qBAA/C;AAEA,SAAO,SAASa,cAAT,CAAwBC,GAAxB,EAA6BC,MAA7B,EAAqCC,OAArC,EAA8Cd,EAA9C,EAAkD;AACvD;AACA,QAAI,CAACa,MAAD,IAAWA,MAAM,CAACE,GAAP,KAAe,OAA9B,EAAuC;AACrC,aAAOf,EAAE,CAAC,IAAD,EAAO,IAAP,CAAT;AACD;;AAEDQ,IAAAA,MAAM,CAACQ,aAAP,CAAqBH,MAAM,CAACI,GAA5B,EAAiC,UAAUlB,GAAV,EAAemB,GAAf,EAAoB;AACnD,UAAInB,GAAJ,EAAS;AACP,eAAOW,OAAO,CAACX,GAAD,EAAM,UAAUoB,QAAV,EAAoB;AACtC,iBAAOnB,EAAE,CAACmB,QAAD,EAAW,IAAX,CAAT;AACD,SAFa,CAAd;AAGD,OALkD,CAOnD;;;AACA,aAAOnB,EAAE,CAAC,IAAD,EAAOkB,GAAG,CAACE,SAAJ,IAAiBF,GAAG,CAACG,YAA5B,CAAT;AACD,KATD;AAUD,GAhBD;AAiBD,CAzBD","sourcesContent":["'use strict';\n\nvar _errors = require('../errors');\n\nvar _JwksClient = require('../JwksClient');\n\nvar handleSigningKeyError = function handleSigningKeyError(err, cb) {\n  // If we didn't find a match, can't provide a key.\n  if (err && err.name === 'SigningKeyNotFoundError') {\n    return cb(null);\n  }\n\n  // If an error occured like rate limiting or HTTP issue, we'll bubble up the error.\n  if (err) {\n    return cb(err);\n  }\n};\n\nmodule.exports.expressJwtSecret = function (options) {\n  if (options === null || options === undefined) {\n    throw new _errors.ArgumentError('An options object must be provided when initializing expressJwtSecret');\n  }\n\n  var client = new _JwksClient.JwksClient(options);\n  var onError = options.handleSigningKeyError || handleSigningKeyError;\n\n  return function secretProvider(req, header, payload, cb) {\n    // Only RS256 is supported.\n    if (!header || header.alg !== 'RS256') {\n      return cb(null, null);\n    }\n\n    client.getSigningKey(header.kid, function (err, key) {\n      if (err) {\n        return onError(err, function (newError) {\n          return cb(newError, null);\n        });\n      }\n\n      // Provide the key.\n      return cb(null, key.publicKey || key.rsaPublicKey);\n    });\n  };\n};"]},"metadata":{},"sourceType":"script"}