{"ast":null,"code":"// On windows, create a .cmd file.\n// Read the #! in the file to see what it uses.  The vast majority\n// of the time, this will be either:\n// \"#!/usr/bin/env <prog> <args...>\"\n// or:\n// \"#!<prog> <args...>\"\n//\n// Write a binroot/pkg.bin + \".cmd\" file that has this line in it:\n// @<prog> <args...> %dp0%<target> %*\nmodule.exports = cmdShim;\ncmdShim.ifExists = cmdShimIfExists;\n\nvar fs = require(\"graceful-fs\");\n\nvar mkdir = require(\"mkdirp\"),\n    path = require(\"path\"),\n    toBatchSyntax = require(\"./lib/to-batch-syntax\"),\n    shebangExpr = /^#\\!\\s*(?:\\/usr\\/bin\\/env)?\\s*([^ \\t]+=[^ \\t]+\\s+)*\\s*([^ \\t]+)(.*)$/;\n\nfunction cmdShimIfExists(from, to, cb) {\n  fs.stat(from, function (er) {\n    if (er) return cb();\n    cmdShim(from, to, cb);\n  });\n} // Try to unlink, but ignore errors.\n// Any problems will surface later.\n\n\nfunction rm(path, cb) {\n  fs.unlink(path, function (er) {\n    cb();\n  });\n}\n\nfunction cmdShim(from, to, cb) {\n  fs.stat(from, function (er, stat) {\n    if (er) return cb(er);\n    cmdShim_(from, to, cb);\n  });\n}\n\nfunction cmdShim_(from, to, cb) {\n  var then = times(3, next, cb);\n  rm(to, then);\n  rm(to + \".cmd\", then);\n  rm(to + \".ps1\", then);\n\n  function next(er) {\n    writeShim(from, to, cb);\n  }\n}\n\nfunction writeShim(from, to, cb) {\n  // make a cmd file and a sh script\n  // First, check if the bin is a #! of some sort.\n  // If not, then assume it's something that'll be compiled, or some other\n  // sort of script, and just call it directly.\n  mkdir(path.dirname(to), function (er) {\n    if (er) return cb(er);\n    fs.readFile(from, \"utf8\", function (er, data) {\n      if (er) return writeShim_(from, to, null, null, null, cb);\n      var firstLine = data.trim().split(/\\r*\\n/)[0],\n          shebang = firstLine.match(shebangExpr);\n      if (!shebang) return writeShim_(from, to, null, null, null, cb);\n      var vars = shebang[1] || \"\",\n          prog = shebang[2],\n          args = shebang[3] || \"\";\n      return writeShim_(from, to, prog, args, vars, cb);\n    });\n  });\n}\n\nfunction writeShim_(from, to, prog, args, variables, cb) {\n  var shTarget = path.relative(path.dirname(to), from),\n      target = shTarget.split(\"/\").join(\"\\\\\"),\n      longProg,\n      shProg = prog && prog.split(\"\\\\\").join(\"/\"),\n      shLongProg,\n      pwshProg = shProg && \"\\\"\" + shProg + \"$exe\\\"\",\n      pwshLongProg;\n  shTarget = shTarget.split(\"\\\\\").join(\"/\");\n  args = args || \"\";\n  variables = variables || \"\";\n\n  if (!prog) {\n    prog = \"\\\"%dp0%\\\\\" + target + \"\\\"\";\n    shProg = \"\\\"$basedir/\" + shTarget + \"\\\"\";\n    pwshProg = shProg;\n    args = \"\";\n    target = \"\";\n    shTarget = \"\";\n  } else {\n    longProg = \"\\\"%dp0%\\\\\" + prog + \".exe\\\"\";\n    shLongProg = \"\\\"$basedir/\" + prog + \"\\\"\";\n    pwshLongProg = \"\\\"$basedir/\" + prog + \"$exe\\\"\";\n    target = \"\\\"%dp0%\\\\\" + target + \"\\\"\";\n    shTarget = \"\\\"$basedir/\" + shTarget + \"\\\"\";\n  } // @SETLOCAL\n  // @CALL :find_dp0\n  //\n  // @IF EXIST \"%dp0%\\node.exe\" (\n  //   @SET \"_prog=%dp0%\\node.exe\"\n  // ) ELSE (\n  //   @SET \"_prog=node\"\n  //   @SET PATHEXT=%PATHEXT:;.JS;=;%\n  // )\n  //\n  // \"%_prog%\" \"%dp0%\\.\\node_modules\\npm\\bin\\npm-cli.js\" %*\n  // @ENDLOCAL\n  // @EXIT /b %errorlevel%\n  //\n  // :find_dp0\n  // SET dp0=%~dp0\n  // EXIT /b\n  //\n  // Subroutine trick to fix https://github.com/npm/cmd-shim/issues/10\n\n\n  var head = '@ECHO off\\r\\n' + 'SETLOCAL\\r\\n' + 'CALL :find_dp0\\r\\n';\n  var foot = 'ENDLOCAL\\r\\n' + 'EXIT /b %errorlevel%\\r\\n' + ':find_dp0\\r\\n' + 'SET dp0=%~dp0\\r\\n' + 'EXIT /b\\r\\n';\n  var cmd;\n\n  if (longProg) {\n    shLongProg = shLongProg.trim();\n    args = args.trim();\n    var variableDeclarationsAsBatch = toBatchSyntax.convertToSetCommands(variables);\n    cmd = head + variableDeclarationsAsBatch + \"\\r\\n\" + \"IF EXIST \" + longProg + \" (\\r\\n\" + \"  SET \\\"_prog=\" + longProg.replace(/(^\")|(\"$)/g, '') + \"\\\"\\r\\n\" + \") ELSE (\\r\\n\" + \"  SET \\\"_prog=\" + prog.replace(/(^\")|(\"$)/g, '') + \"\\\"\\r\\n\" + \"  SET PATHEXT=%PATHEXT:;.JS;=;%\\r\\n\" + \")\\r\\n\" + \"\\r\\n\" + \"\\\"%_prog%\\\" \" + args + \" \" + target + \" %*\\r\\n\" + foot;\n  } else {\n    cmd = head + prog + \" \" + args + \" \" + target + \" %*\\r\\n\" + foot;\n  } // #!/bin/sh\n  // basedir=`dirname \"$0\"`\n  //\n  // case `uname` in\n  //     *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \"$basedir\"`;;\n  // esac\n  //\n  // if [ -x \"$basedir/node.exe\" ]; then\n  //   \"$basedir/node.exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" \"$@\"\n  //   ret=$?\n  // else\n  //   node \"$basedir/node_modules/npm/bin/npm-cli.js\" \"$@\"\n  //   ret=$?\n  // fi\n  // exit $ret\n\n\n  var sh = \"#!/bin/sh\\n\";\n  sh = sh + \"basedir=$(dirname \\\"$(echo \\\"$0\\\" | sed -e 's,\\\\\\\\,/,g')\\\")\\n\" + \"\\n\" + \"case `uname` in\\n\" + \"    *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \\\"$basedir\\\"`;;\\n\" + \"esac\\n\" + \"\\n\";\n\n  if (shLongProg) {\n    sh = sh + \"if [ -x \" + shLongProg + \" ]; then\\n\" + \"  \" + variables + shLongProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\" + \"  ret=$?\\n\" + \"else \\n\" + \"  \" + variables + shProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\" + \"  ret=$?\\n\" + \"fi\\n\" + \"exit $ret\\n\";\n  } else {\n    sh = sh + shProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\" + \"exit $?\\n\";\n  } // #!/usr/bin/env pwsh\n  // $basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\n  //\n  // $ret=0\n  // $exe = \"\"\n  // if ($PSVersionTable.PSVersion -lt \"6.0\" -or $IsWindows) {\n  //   # Fix case when both the Windows and Linux builds of Node\n  //   # are installed in the same directory\n  //   $exe = \".exe\"\n  // }\n  // if (Test-Path \"$basedir/node\") {\n  //   & \"$basedir/node$exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" $args\n  //   $ret=$LASTEXITCODE\n  // } else {\n  //   & \"node$exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" $args\n  //   $ret=$LASTEXITCODE\n  // }\n  // exit $ret\n\n\n  var pwsh = \"#!/usr/bin/env pwsh\\n\" + \"$basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\\n\" + \"\\n\" + \"$exe=\\\"\\\"\\n\" + \"if ($PSVersionTable.PSVersion -lt \\\"6.0\\\" -or $IsWindows) {\\n\" + \"  # Fix case when both the Windows and Linux builds of Node\\n\" + \"  # are installed in the same directory\\n\" + \"  $exe=\\\".exe\\\"\\n\" + \"}\\n\";\n\n  if (shLongProg) {\n    pwsh = pwsh + \"$ret=0\\n\" + \"if (Test-Path \" + pwshLongProg + \") {\\n\" + \"  & \" + pwshLongProg + \" \" + args + \" \" + shTarget + \" $args\\n\" + \"  $ret=$LASTEXITCODE\\n\" + \"} else {\\n\" + \"  & \" + pwshProg + \" \" + args + \" \" + shTarget + \" $args\\n\" + \"  $ret=$LASTEXITCODE\\n\" + \"}\\n\" + \"exit $ret\\n\";\n  } else {\n    pwsh = pwsh + \"& \" + pwshProg + \" \" + args + \" \" + shTarget + \" $args\\n\" + \"exit $LASTEXITCODE\\n\";\n  }\n\n  var then = times(3, next, cb);\n  fs.writeFile(to + \".ps1\", pwsh, \"utf8\", then);\n  fs.writeFile(to + \".cmd\", cmd, \"utf8\", then);\n  fs.writeFile(to, sh, \"utf8\", then);\n\n  function next() {\n    chmodShim(to, cb);\n  }\n}\n\nfunction chmodShim(to, cb) {\n  var then = times(3, cb, cb);\n  fs.chmod(to, \"0755\", then);\n  fs.chmod(to + \".cmd\", \"0755\", then);\n  fs.chmod(to + \".ps1\", \"0755\", then);\n}\n\nfunction times(n, ok, cb) {\n  var errState = null;\n  return function (er) {\n    if (!errState) {\n      if (er) cb(errState = er);else if (--n === 0) ok();\n    }\n  };\n}","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/npm/node_modules/cmd-shim/index.js"],"names":["module","exports","cmdShim","ifExists","cmdShimIfExists","fs","require","mkdir","path","toBatchSyntax","shebangExpr","from","to","cb","stat","er","rm","unlink","cmdShim_","then","times","next","writeShim","dirname","readFile","data","writeShim_","firstLine","trim","split","shebang","match","vars","prog","args","variables","shTarget","relative","target","join","longProg","shProg","shLongProg","pwshProg","pwshLongProg","head","foot","cmd","variableDeclarationsAsBatch","convertToSetCommands","replace","sh","pwsh","writeFile","chmodShim","chmod","n","ok","errState"],"mappings":"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","sourcesContent":["// On windows, create a .cmd file.\n// Read the #! in the file to see what it uses.  The vast majority\n// of the time, this will be either:\n// \"#!/usr/bin/env <prog> <args...>\"\n// or:\n// \"#!<prog> <args...>\"\n//\n// Write a binroot/pkg.bin + \".cmd\" file that has this line in it:\n// @<prog> <args...> %dp0%<target> %*\n\nmodule.exports = cmdShim\ncmdShim.ifExists = cmdShimIfExists\n\nvar fs = require(\"graceful-fs\")\n\nvar mkdir = require(\"mkdirp\")\n  , path = require(\"path\")\n  , toBatchSyntax = require(\"./lib/to-batch-syntax\")\n  , shebangExpr = /^#\\!\\s*(?:\\/usr\\/bin\\/env)?\\s*([^ \\t]+=[^ \\t]+\\s+)*\\s*([^ \\t]+)(.*)$/\n\nfunction cmdShimIfExists (from, to, cb) {\n  fs.stat(from, function (er) {\n    if (er) return cb()\n    cmdShim(from, to, cb)\n  })\n}\n\n// Try to unlink, but ignore errors.\n// Any problems will surface later.\nfunction rm (path, cb) {\n  fs.unlink(path, function(er) {\n    cb()\n  })\n}\n\nfunction cmdShim (from, to, cb) {\n  fs.stat(from, function (er, stat) {\n    if (er)\n      return cb(er)\n\n    cmdShim_(from, to, cb)\n  })\n}\n\nfunction cmdShim_ (from, to, cb) {\n  var then = times(3, next, cb)\n  rm(to, then)\n  rm(to + \".cmd\", then)\n  rm(to + \".ps1\", then)\n\n  function next(er) {\n    writeShim(from, to, cb)\n  }\n}\n\nfunction writeShim (from, to, cb) {\n  // make a cmd file and a sh script\n  // First, check if the bin is a #! of some sort.\n  // If not, then assume it's something that'll be compiled, or some other\n  // sort of script, and just call it directly.\n  mkdir(path.dirname(to), function (er) {\n    if (er)\n      return cb(er)\n    fs.readFile(from, \"utf8\", function (er, data) {\n      if (er) return writeShim_(from, to, null, null, null, cb)\n      var firstLine = data.trim().split(/\\r*\\n/)[0]\n        , shebang = firstLine.match(shebangExpr)\n      if (!shebang) return writeShim_(from, to, null, null, null, cb)\n      var vars = shebang[1] || \"\"\n        , prog = shebang[2]\n        , args = shebang[3] || \"\"\n      return writeShim_(from, to, prog, args, vars, cb)\n    })\n  })\n}\n\n\nfunction writeShim_ (from, to, prog, args, variables, cb) {\n  var shTarget = path.relative(path.dirname(to), from)\n    , target = shTarget.split(\"/\").join(\"\\\\\")\n    , longProg\n    , shProg = prog && prog.split(\"\\\\\").join(\"/\")\n    , shLongProg\n    , pwshProg = shProg && \"\\\"\" + shProg + \"$exe\\\"\"\n    , pwshLongProg\n  shTarget = shTarget.split(\"\\\\\").join(\"/\")\n  args = args || \"\"\n  variables = variables || \"\"\n  if (!prog) {\n    prog = \"\\\"%dp0%\\\\\" + target + \"\\\"\"\n    shProg = \"\\\"$basedir/\" + shTarget + \"\\\"\"\n    pwshProg = shProg\n    args = \"\"\n    target = \"\"\n    shTarget = \"\"\n  } else {\n    longProg = \"\\\"%dp0%\\\\\" + prog + \".exe\\\"\"\n    shLongProg = \"\\\"$basedir/\" + prog + \"\\\"\"\n    pwshLongProg = \"\\\"$basedir/\" + prog + \"$exe\\\"\"\n    target = \"\\\"%dp0%\\\\\" + target + \"\\\"\"\n    shTarget = \"\\\"$basedir/\" + shTarget + \"\\\"\"\n  }\n\n  // @SETLOCAL\n  // @CALL :find_dp0\n  //\n  // @IF EXIST \"%dp0%\\node.exe\" (\n  //   @SET \"_prog=%dp0%\\node.exe\"\n  // ) ELSE (\n  //   @SET \"_prog=node\"\n  //   @SET PATHEXT=%PATHEXT:;.JS;=;%\n  // )\n  //\n  // \"%_prog%\" \"%dp0%\\.\\node_modules\\npm\\bin\\npm-cli.js\" %*\n  // @ENDLOCAL\n  // @EXIT /b %errorlevel%\n  //\n  // :find_dp0\n  // SET dp0=%~dp0\n  // EXIT /b\n  //\n  // Subroutine trick to fix https://github.com/npm/cmd-shim/issues/10\n  var head = '@ECHO off\\r\\n' +\n    'SETLOCAL\\r\\n' +\n    'CALL :find_dp0\\r\\n'\n  var foot = 'ENDLOCAL\\r\\n' +\n    'EXIT /b %errorlevel%\\r\\n' +\n    ':find_dp0\\r\\n' +\n    'SET dp0=%~dp0\\r\\n' +\n    'EXIT /b\\r\\n'\n\n  var cmd\n  if (longProg) {\n    shLongProg = shLongProg.trim();\n    args = args.trim();\n    var variableDeclarationsAsBatch = toBatchSyntax.convertToSetCommands(variables)\n    cmd = head\n        + variableDeclarationsAsBatch\n        + \"\\r\\n\"\n        + \"IF EXIST \" + longProg + \" (\\r\\n\"\n        + \"  SET \\\"_prog=\" + longProg.replace(/(^\")|(\"$)/g, '') + \"\\\"\\r\\n\"\n        + \") ELSE (\\r\\n\"\n        + \"  SET \\\"_prog=\" + prog.replace(/(^\")|(\"$)/g, '') + \"\\\"\\r\\n\"\n        + \"  SET PATHEXT=%PATHEXT:;.JS;=;%\\r\\n\"\n        + \")\\r\\n\"\n        + \"\\r\\n\"\n        +  \"\\\"%_prog%\\\" \" + args + \" \" + target + \" %*\\r\\n\"\n        + foot\n  } else {\n    cmd = head + prog + \" \" + args + \" \" + target + \" %*\\r\\n\" + foot\n  }\n\n  // #!/bin/sh\n  // basedir=`dirname \"$0\"`\n  //\n  // case `uname` in\n  //     *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \"$basedir\"`;;\n  // esac\n  //\n  // if [ -x \"$basedir/node.exe\" ]; then\n  //   \"$basedir/node.exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" \"$@\"\n  //   ret=$?\n  // else\n  //   node \"$basedir/node_modules/npm/bin/npm-cli.js\" \"$@\"\n  //   ret=$?\n  // fi\n  // exit $ret\n\n  var sh = \"#!/bin/sh\\n\"\n\n  sh = sh\n      + \"basedir=$(dirname \\\"$(echo \\\"$0\\\" | sed -e 's,\\\\\\\\,/,g')\\\")\\n\"\n      + \"\\n\"\n      + \"case `uname` in\\n\"\n      + \"    *CYGWIN*|*MINGW*|*MSYS*) basedir=`cygpath -w \\\"$basedir\\\"`;;\\n\"\n      + \"esac\\n\"\n      + \"\\n\"\n\n  if (shLongProg) {\n    sh = sh\n       + \"if [ -x \"+shLongProg+\" ]; then\\n\"\n       + \"  \" + variables + shLongProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\"\n       + \"  ret=$?\\n\"\n       + \"else \\n\"\n       + \"  \" + variables + shProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\"\n       + \"  ret=$?\\n\"\n       + \"fi\\n\"\n       + \"exit $ret\\n\"\n  } else {\n    sh = sh\n       + shProg + \" \" + args + \" \" + shTarget + \" \\\"$@\\\"\\n\"\n       + \"exit $?\\n\"\n  }\n\n  // #!/usr/bin/env pwsh\n  // $basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\n  //\n  // $ret=0\n  // $exe = \"\"\n  // if ($PSVersionTable.PSVersion -lt \"6.0\" -or $IsWindows) {\n  //   # Fix case when both the Windows and Linux builds of Node\n  //   # are installed in the same directory\n  //   $exe = \".exe\"\n  // }\n  // if (Test-Path \"$basedir/node\") {\n  //   & \"$basedir/node$exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" $args\n  //   $ret=$LASTEXITCODE\n  // } else {\n  //   & \"node$exe\" \"$basedir/node_modules/npm/bin/npm-cli.js\" $args\n  //   $ret=$LASTEXITCODE\n  // }\n  // exit $ret\n  var pwsh = \"#!/usr/bin/env pwsh\\n\"\n           + \"$basedir=Split-Path $MyInvocation.MyCommand.Definition -Parent\\n\"\n           + \"\\n\"\n           + \"$exe=\\\"\\\"\\n\"\n           + \"if ($PSVersionTable.PSVersion -lt \\\"6.0\\\" -or $IsWindows) {\\n\"\n           + \"  # Fix case when both the Windows and Linux builds of Node\\n\"\n           + \"  # are installed in the same directory\\n\"\n           + \"  $exe=\\\".exe\\\"\\n\"\n           + \"}\\n\"\n  if (shLongProg) {\n    pwsh = pwsh\n         + \"$ret=0\\n\"\n         + \"if (Test-Path \" + pwshLongProg + \") {\\n\"\n         + \"  & \" + pwshLongProg + \" \" + args + \" \" + shTarget + \" $args\\n\"\n         + \"  $ret=$LASTEXITCODE\\n\"\n         + \"} else {\\n\"\n         + \"  & \" + pwshProg + \" \" + args + \" \" + shTarget + \" $args\\n\"\n         + \"  $ret=$LASTEXITCODE\\n\"\n         + \"}\\n\"\n         + \"exit $ret\\n\"\n  } else {\n    pwsh = pwsh\n         + \"& \" + pwshProg + \" \" + args + \" \" + shTarget + \" $args\\n\"\n         + \"exit $LASTEXITCODE\\n\"\n  }\n\n  var then = times(3, next, cb)\n  fs.writeFile(to + \".ps1\", pwsh, \"utf8\", then)\n  fs.writeFile(to + \".cmd\", cmd, \"utf8\", then)\n  fs.writeFile(to, sh, \"utf8\", then)\n  function next () {\n    chmodShim(to, cb)\n  }\n}\n\nfunction chmodShim (to, cb) {\n  var then = times(3, cb, cb)\n  fs.chmod(to, \"0755\", then)\n  fs.chmod(to + \".cmd\", \"0755\", then)\n  fs.chmod(to + \".ps1\", \"0755\", then)\n}\n\nfunction times(n, ok, cb) {\n  var errState = null\n  return function(er) {\n    if (!errState) {\n      if (er)\n        cb(errState = er)\n      else if (--n === 0)\n        ok()\n    }\n  }\n}\n"]},"metadata":{},"sourceType":"script"}