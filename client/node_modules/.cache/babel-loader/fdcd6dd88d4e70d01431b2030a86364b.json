{"ast":null,"code":"var assert = require('assert');\n\nvar toNerfDart = require('./nerf-dart.js');\n\nmodule.exports = setCredentialsByURI;\n\nfunction setCredentialsByURI(uri, c) {\n  assert(uri && typeof uri === 'string', 'registry URL is required');\n  assert(c && typeof c === 'object', 'credentials are required');\n  var nerfed = toNerfDart(uri);\n\n  if (c.token) {\n    this.set(nerfed + ':_authToken', c.token, 'user');\n    this.del(nerfed + ':_password', 'user');\n    this.del(nerfed + ':username', 'user');\n    this.del(nerfed + ':email', 'user');\n    this.del(nerfed + ':always-auth', 'user');\n  } else if (c.username || c.password || c.email) {\n    assert(c.username, 'must include username');\n    assert(c.password, 'must include password');\n    assert(c.email, 'must include email address');\n    this.del(nerfed + ':_authToken', 'user');\n    var encoded = Buffer.from(c.password, 'utf8').toString('base64');\n    this.set(nerfed + ':_password', encoded, 'user');\n    this.set(nerfed + ':username', c.username, 'user');\n    this.set(nerfed + ':email', c.email, 'user');\n\n    if (c.alwaysAuth !== undefined) {\n      this.set(nerfed + ':always-auth', c.alwaysAuth, 'user');\n    } else {\n      this.del(nerfed + ':always-auth', 'user');\n    }\n  } else {\n    throw new Error('No credentials to set.');\n  }\n}","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/npm/lib/config/set-credentials-by-uri.js"],"names":["assert","require","toNerfDart","module","exports","setCredentialsByURI","uri","c","nerfed","token","set","del","username","password","email","encoded","Buffer","from","toString","alwaysAuth","undefined","Error"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AAEA,IAAIC,UAAU,GAAGD,OAAO,CAAC,gBAAD,CAAxB;;AAEAE,MAAM,CAACC,OAAP,GAAiBC,mBAAjB;;AAEA,SAASA,mBAAT,CAA8BC,GAA9B,EAAmCC,CAAnC,EAAsC;AACpCP,EAAAA,MAAM,CAACM,GAAG,IAAI,OAAOA,GAAP,KAAe,QAAvB,EAAiC,0BAAjC,CAAN;AACAN,EAAAA,MAAM,CAACO,CAAC,IAAI,OAAOA,CAAP,KAAa,QAAnB,EAA6B,0BAA7B,CAAN;AAEA,MAAIC,MAAM,GAAGN,UAAU,CAACI,GAAD,CAAvB;;AAEA,MAAIC,CAAC,CAACE,KAAN,EAAa;AACX,SAAKC,GAAL,CAASF,MAAM,GAAG,aAAlB,EAAiCD,CAAC,CAACE,KAAnC,EAA0C,MAA1C;AACA,SAAKE,GAAL,CAASH,MAAM,GAAG,YAAlB,EAAgC,MAAhC;AACA,SAAKG,GAAL,CAASH,MAAM,GAAG,WAAlB,EAA+B,MAA/B;AACA,SAAKG,GAAL,CAASH,MAAM,GAAG,QAAlB,EAA4B,MAA5B;AACA,SAAKG,GAAL,CAASH,MAAM,GAAG,cAAlB,EAAkC,MAAlC;AACD,GAND,MAMO,IAAID,CAAC,CAACK,QAAF,IAAcL,CAAC,CAACM,QAAhB,IAA4BN,CAAC,CAACO,KAAlC,EAAyC;AAC9Cd,IAAAA,MAAM,CAACO,CAAC,CAACK,QAAH,EAAa,uBAAb,CAAN;AACAZ,IAAAA,MAAM,CAACO,CAAC,CAACM,QAAH,EAAa,uBAAb,CAAN;AACAb,IAAAA,MAAM,CAACO,CAAC,CAACO,KAAH,EAAU,4BAAV,CAAN;AAEA,SAAKH,GAAL,CAASH,MAAM,GAAG,aAAlB,EAAiC,MAAjC;AAEA,QAAIO,OAAO,GAAGC,MAAM,CAACC,IAAP,CAAYV,CAAC,CAACM,QAAd,EAAwB,MAAxB,EAAgCK,QAAhC,CAAyC,QAAzC,CAAd;AACA,SAAKR,GAAL,CAASF,MAAM,GAAG,YAAlB,EAAgCO,OAAhC,EAAyC,MAAzC;AACA,SAAKL,GAAL,CAASF,MAAM,GAAG,WAAlB,EAA+BD,CAAC,CAACK,QAAjC,EAA2C,MAA3C;AACA,SAAKF,GAAL,CAASF,MAAM,GAAG,QAAlB,EAA4BD,CAAC,CAACO,KAA9B,EAAqC,MAArC;;AAEA,QAAIP,CAAC,CAACY,UAAF,KAAiBC,SAArB,EAAgC;AAC9B,WAAKV,GAAL,CAASF,MAAM,GAAG,cAAlB,EAAkCD,CAAC,CAACY,UAApC,EAAgD,MAAhD;AACD,KAFD,MAEO;AACL,WAAKR,GAAL,CAASH,MAAM,GAAG,cAAlB,EAAkC,MAAlC;AACD;AACF,GAjBM,MAiBA;AACL,UAAM,IAAIa,KAAJ,CAAU,wBAAV,CAAN;AACD;AACF","sourcesContent":["var assert = require('assert')\n\nvar toNerfDart = require('./nerf-dart.js')\n\nmodule.exports = setCredentialsByURI\n\nfunction setCredentialsByURI (uri, c) {\n  assert(uri && typeof uri === 'string', 'registry URL is required')\n  assert(c && typeof c === 'object', 'credentials are required')\n\n  var nerfed = toNerfDart(uri)\n\n  if (c.token) {\n    this.set(nerfed + ':_authToken', c.token, 'user')\n    this.del(nerfed + ':_password', 'user')\n    this.del(nerfed + ':username', 'user')\n    this.del(nerfed + ':email', 'user')\n    this.del(nerfed + ':always-auth', 'user')\n  } else if (c.username || c.password || c.email) {\n    assert(c.username, 'must include username')\n    assert(c.password, 'must include password')\n    assert(c.email, 'must include email address')\n\n    this.del(nerfed + ':_authToken', 'user')\n\n    var encoded = Buffer.from(c.password, 'utf8').toString('base64')\n    this.set(nerfed + ':_password', encoded, 'user')\n    this.set(nerfed + ':username', c.username, 'user')\n    this.set(nerfed + ':email', c.email, 'user')\n\n    if (c.alwaysAuth !== undefined) {\n      this.set(nerfed + ':always-auth', c.alwaysAuth, 'user')\n    } else {\n      this.del(nerfed + ':always-auth', 'user')\n    }\n  } else {\n    throw new Error('No credentials to set.')\n  }\n}\n"]},"metadata":{},"sourceType":"script"}