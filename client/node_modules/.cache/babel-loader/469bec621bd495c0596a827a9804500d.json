{"ast":null,"code":"'use strict';\n\nvar fs = require('graceful-fs');\n\nfunction extractPath(path, cmdshimContents) {\n  if (/[.]cmd$/.test(path)) {\n    return extractPathFromCmd(cmdshimContents);\n  } else if (/[.]ps1$/.test(path)) {\n    return extractPathFromPowershell(cmdshimContents);\n  } else {\n    return extractPathFromCygwin(cmdshimContents);\n  }\n}\n\nfunction extractPathFromPowershell(cmdshimContents) {\n  var matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+[$]args/);\n  return matches && matches[1];\n}\n\nfunction extractPathFromCmd(cmdshimContents) {\n  var matches = cmdshimContents.match(/\"%(?:~dp0|dp0%)\\\\([^\"]+?)\"\\s+%[*]/);\n  return matches && matches[1];\n}\n\nfunction extractPathFromCygwin(cmdshimContents) {\n  var matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+\"[$]@\"/);\n  return matches && matches[1];\n}\n\nfunction wrapError(thrown, newError) {\n  newError.message = thrown.message;\n  newError.code = thrown.code;\n  return newError;\n}\n\nfunction notaShim(path, er) {\n  if (!er) {\n    er = new Error();\n    Error.captureStackTrace(er, notaShim);\n  }\n\n  er.code = 'ENOTASHIM';\n  er.message = \"Can't read shim path from '\" + path + \"', it doesn't appear to be a cmd-shim\";\n  return er;\n}\n\nvar readCmdShim = module.exports = function (path, cb) {\n  var er = new Error();\n  Error.captureStackTrace(er, readCmdShim);\n  fs.readFile(path, function (readFileEr, contents) {\n    if (readFileEr) return cb(wrapError(readFileEr, er));\n    var destination = extractPath(path, contents.toString());\n    if (destination) return cb(null, destination);\n    return cb(notaShim(path, er));\n  });\n};\n\nmodule.exports.sync = function (path) {\n  var contents = fs.readFileSync(path);\n  var destination = extractPath(path, contents.toString());\n  if (!destination) throw notaShim(path);\n  return destination;\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/npm/node_modules/read-cmd-shim/index.js"],"names":["fs","require","extractPath","path","cmdshimContents","test","extractPathFromCmd","extractPathFromPowershell","extractPathFromCygwin","matches","match","wrapError","thrown","newError","message","code","notaShim","er","Error","captureStackTrace","readCmdShim","module","exports","cb","readFile","readFileEr","contents","destination","toString","sync","readFileSync"],"mappings":"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","sourcesContent":["'use strict'\nvar fs = require('graceful-fs')\n\nfunction extractPath (path, cmdshimContents) {\n  if (/[.]cmd$/.test(path)) {\n    return extractPathFromCmd(cmdshimContents)\n  } else if (/[.]ps1$/.test(path)) {\n    return extractPathFromPowershell(cmdshimContents)\n  } else {\n    return extractPathFromCygwin(cmdshimContents)\n  }\n}\n\nfunction extractPathFromPowershell (cmdshimContents) {\n  var matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+[$]args/)\n  return matches && matches[1]\n}\n\nfunction extractPathFromCmd (cmdshimContents) {\n  var matches = cmdshimContents.match(/\"%(?:~dp0|dp0%)\\\\([^\"]+?)\"\\s+%[*]/)\n  return matches && matches[1]\n}\n\nfunction extractPathFromCygwin (cmdshimContents) {\n  var matches = cmdshimContents.match(/\"[$]basedir[/]([^\"]+?)\"\\s+\"[$]@\"/)\n  return matches && matches[1]\n}\n\nfunction wrapError (thrown, newError) {\n  newError.message = thrown.message\n  newError.code = thrown.code\n  return newError\n}\n\nfunction notaShim (path, er) {\n  if (!er) {\n    er = new Error()\n    Error.captureStackTrace(er, notaShim)\n  }\n  er.code = 'ENOTASHIM'\n  er.message = \"Can't read shim path from '\" + path + \"', it doesn't appear to be a cmd-shim\"\n  return er\n}\n\nvar readCmdShim = module.exports = function (path, cb) {\n  var er = new Error()\n  Error.captureStackTrace(er, readCmdShim)\n  fs.readFile(path, function (readFileEr, contents) {\n    if (readFileEr) return cb(wrapError(readFileEr, er))\n    var destination = extractPath(path, contents.toString())\n    if (destination) return cb(null, destination)\n    return cb(notaShim(path, er))\n  })\n}\n\nmodule.exports.sync = function (path) {\n  var contents = fs.readFileSync(path)\n  var destination = extractPath(path, contents.toString())\n  if (!destination) throw notaShim(path)\n  return destination\n}\n"]},"metadata":{},"sourceType":"script"}