{"ast":null,"code":"exports.replaceDollarWithPercentPair = replaceDollarWithPercentPair;\nexports.convertToSetCommand = convertToSetCommand;\nexports.convertToSetCommands = convertToSetCommands;\n\nfunction convertToSetCommand(key, value) {\n  var line = \"\";\n  key = key || \"\";\n  key = key.trim();\n  value = value || \"\";\n  value = value.trim();\n\n  if (key && value && value.length > 0) {\n    line = \"@SET \" + key + \"=\" + replaceDollarWithPercentPair(value) + \"\\r\\n\";\n  }\n\n  return line;\n}\n\nfunction extractVariableValuePairs(declarations) {\n  var pairs = {};\n  declarations.map(function (declaration) {\n    var split = declaration.split(\"=\");\n    pairs[split[0]] = split[1];\n  });\n  return pairs;\n}\n\nfunction convertToSetCommands(variableString) {\n  var variableValuePairs = extractVariableValuePairs(variableString.split(\" \"));\n  var variableDeclarationsAsBatch = \"\";\n  Object.keys(variableValuePairs).forEach(function (key) {\n    variableDeclarationsAsBatch += convertToSetCommand(key, variableValuePairs[key]);\n  });\n  return variableDeclarationsAsBatch;\n}\n\nfunction replaceDollarWithPercentPair(value) {\n  var dollarExpressions = /\\$\\{?([^\\$@#\\?\\- \\t{}:]+)\\}?/g;\n  var result = \"\";\n  var startIndex = 0;\n\n  do {\n    var match = dollarExpressions.exec(value);\n\n    if (match) {\n      var betweenMatches = value.substring(startIndex, match.index) || \"\";\n      result += betweenMatches + \"%\" + match[1] + \"%\";\n      startIndex = dollarExpressions.lastIndex;\n    }\n  } while (dollarExpressions.lastIndex > 0);\n\n  result += value.substr(startIndex);\n  return result;\n}","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/npm/node_modules/cmd-shim/lib/to-batch-syntax.js"],"names":["exports","replaceDollarWithPercentPair","convertToSetCommand","convertToSetCommands","key","value","line","trim","length","extractVariableValuePairs","declarations","pairs","map","declaration","split","variableString","variableValuePairs","variableDeclarationsAsBatch","Object","keys","forEach","dollarExpressions","result","startIndex","match","exec","betweenMatches","substring","index","lastIndex","substr"],"mappings":"AAAAA,OAAO,CAACC,4BAAR,GAAuCA,4BAAvC;AACAD,OAAO,CAACE,mBAAR,GAA8BA,mBAA9B;AACAF,OAAO,CAACG,oBAAR,GAA+BA,oBAA/B;;AAEA,SAASD,mBAAT,CAA6BE,GAA7B,EAAkCC,KAAlC,EAAyC;AACrC,MAAIC,IAAI,GAAG,EAAX;AACAF,EAAAA,GAAG,GAAGA,GAAG,IAAI,EAAb;AACAA,EAAAA,GAAG,GAAGA,GAAG,CAACG,IAAJ,EAAN;AACAF,EAAAA,KAAK,GAAGA,KAAK,IAAI,EAAjB;AACAA,EAAAA,KAAK,GAAGA,KAAK,CAACE,IAAN,EAAR;;AACA,MAAGH,GAAG,IAAIC,KAAP,IAAgBA,KAAK,CAACG,MAAN,GAAe,CAAlC,EAAqC;AACjCF,IAAAA,IAAI,GAAG,UAAUF,GAAV,GAAgB,GAAhB,GAAsBH,4BAA4B,CAACI,KAAD,CAAlD,GAA4D,MAAnE;AACH;;AACD,SAAOC,IAAP;AACH;;AAED,SAASG,yBAAT,CAAmCC,YAAnC,EAAiD;AAC7C,MAAIC,KAAK,GAAG,EAAZ;AACAD,EAAAA,YAAY,CAACE,GAAb,CAAiB,UAASC,WAAT,EAAsB;AACnC,QAAIC,KAAK,GAAGD,WAAW,CAACC,KAAZ,CAAkB,GAAlB,CAAZ;AACAH,IAAAA,KAAK,CAACG,KAAK,CAAC,CAAD,CAAN,CAAL,GAAgBA,KAAK,CAAC,CAAD,CAArB;AACH,GAHD;AAIA,SAAOH,KAAP;AACH;;AAED,SAASR,oBAAT,CAA8BY,cAA9B,EAA8C;AAC1C,MAAIC,kBAAkB,GAAGP,yBAAyB,CAACM,cAAc,CAACD,KAAf,CAAqB,GAArB,CAAD,CAAlD;AACA,MAAIG,2BAA2B,GAAG,EAAlC;AACAC,EAAAA,MAAM,CAACC,IAAP,CAAYH,kBAAZ,EAAgCI,OAAhC,CAAwC,UAAUhB,GAAV,EAAe;AACnDa,IAAAA,2BAA2B,IAAIf,mBAAmB,CAACE,GAAD,EAAMY,kBAAkB,CAACZ,GAAD,CAAxB,CAAlD;AACH,GAFD;AAGA,SAAOa,2BAAP;AACH;;AAED,SAAShB,4BAAT,CAAsCI,KAAtC,EAA6C;AACzC,MAAIgB,iBAAiB,GAAG,+BAAxB;AACA,MAAIC,MAAM,GAAG,EAAb;AACA,MAAIC,UAAU,GAAG,CAAjB;;AACA,KAAG;AACC,QAAIC,KAAK,GAAGH,iBAAiB,CAACI,IAAlB,CAAuBpB,KAAvB,CAAZ;;AACA,QAAGmB,KAAH,EAAU;AACN,UAAIE,cAAc,GAAGrB,KAAK,CAACsB,SAAN,CAAgBJ,UAAhB,EAA4BC,KAAK,CAACI,KAAlC,KAA4C,EAAjE;AACAN,MAAAA,MAAM,IAAKI,cAAc,GAAG,GAAjB,GAAuBF,KAAK,CAAC,CAAD,CAA5B,GAAkC,GAA7C;AACAD,MAAAA,UAAU,GAAGF,iBAAiB,CAACQ,SAA/B;AACH;AACJ,GAPD,QAOSR,iBAAiB,CAACQ,SAAlB,GAA8B,CAPvC;;AAQAP,EAAAA,MAAM,IAAIjB,KAAK,CAACyB,MAAN,CAAaP,UAAb,CAAV;AACA,SAAOD,MAAP;AACH","sourcesContent":["exports.replaceDollarWithPercentPair = replaceDollarWithPercentPair\nexports.convertToSetCommand = convertToSetCommand\nexports.convertToSetCommands = convertToSetCommands\n\nfunction convertToSetCommand(key, value) {\n    var line = \"\"\n    key = key || \"\"\n    key = key.trim()\n    value = value || \"\"\n    value = value.trim()\n    if(key && value && value.length > 0) {\n        line = \"@SET \" + key + \"=\" + replaceDollarWithPercentPair(value) + \"\\r\\n\"\n    }\n    return line\n}\n\nfunction extractVariableValuePairs(declarations) {\n    var pairs = {}\n    declarations.map(function(declaration) {\n        var split = declaration.split(\"=\")\n        pairs[split[0]]=split[1]\n    })\n    return pairs\n}\n\nfunction convertToSetCommands(variableString) {\n    var variableValuePairs = extractVariableValuePairs(variableString.split(\" \"))\n    var variableDeclarationsAsBatch = \"\"\n    Object.keys(variableValuePairs).forEach(function (key) {\n        variableDeclarationsAsBatch += convertToSetCommand(key, variableValuePairs[key])\n    })\n    return variableDeclarationsAsBatch\n}\n\nfunction replaceDollarWithPercentPair(value) {\n    var dollarExpressions = /\\$\\{?([^\\$@#\\?\\- \\t{}:]+)\\}?/g\n    var result = \"\"\n    var startIndex = 0\n    do {\n        var match = dollarExpressions.exec(value)\n        if(match) {\n            var betweenMatches = value.substring(startIndex, match.index) || \"\"\n            result +=  betweenMatches + \"%\" + match[1] + \"%\"\n            startIndex = dollarExpressions.lastIndex\n        }\n    } while (dollarExpressions.lastIndex > 0)\n    result += value.substr(startIndex)\n    return result\n}\n\n\n"]},"metadata":{},"sourceType":"script"}