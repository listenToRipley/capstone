{"ast":null,"code":"module.exports = loadPrefix;\n\nvar findPrefix = require('find-npm-prefix');\n\nvar path = require('path');\n\nfunction loadPrefix(cb) {\n  var cli = this.list[0];\n  Object.defineProperty(this, 'prefix', {\n    set: function (prefix) {\n      var g = this.get('global');\n      this[g ? 'globalPrefix' : 'localPrefix'] = prefix;\n    }.bind(this),\n    get: function () {\n      var g = this.get('global');\n      return g ? this.globalPrefix : this.localPrefix;\n    }.bind(this),\n    enumerable: true\n  });\n  Object.defineProperty(this, 'globalPrefix', {\n    set: function (prefix) {\n      this.set('prefix', prefix);\n    }.bind(this),\n    get: function () {\n      return path.resolve(this.get('prefix'));\n    }.bind(this),\n    enumerable: true\n  });\n  var p;\n  Object.defineProperty(this, 'localPrefix', {\n    set: function (prefix) {\n      p = prefix;\n    },\n    get: function () {\n      return p;\n    },\n    enumerable: true\n  }); // try to guess at a good node_modules location.\n  // If we are *explicitly* given a prefix on the cli, then\n  // always use that.  otherwise, infer local prefix from cwd.\n\n  if (Object.prototype.hasOwnProperty.call(cli, 'prefix')) {\n    p = path.resolve(cli.prefix);\n    process.nextTick(cb);\n  } else {\n    findPrefix(process.cwd()).then(found => {\n      p = found;\n      cb();\n    }, cb);\n  }\n}","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/client/node_modules/npm/lib/config/load-prefix.js"],"names":["module","exports","loadPrefix","findPrefix","require","path","cb","cli","list","Object","defineProperty","set","prefix","g","get","bind","globalPrefix","localPrefix","enumerable","resolve","p","prototype","hasOwnProperty","call","process","nextTick","cwd","then","found"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,UAAjB;;AAEA,IAAIC,UAAU,GAAGC,OAAO,CAAC,iBAAD,CAAxB;;AACA,IAAIC,IAAI,GAAGD,OAAO,CAAC,MAAD,CAAlB;;AAEA,SAASF,UAAT,CAAqBI,EAArB,EAAyB;AACvB,MAAIC,GAAG,GAAG,KAAKC,IAAL,CAAU,CAAV,CAAV;AAEAC,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,QAA5B,EACE;AACEC,IAAAA,GAAG,EAAE,UAAUC,MAAV,EAAkB;AACrB,UAAIC,CAAC,GAAG,KAAKC,GAAL,CAAS,QAAT,CAAR;AACA,WAAKD,CAAC,GAAG,cAAH,GAAoB,aAA1B,IAA2CD,MAA3C;AACD,KAHI,CAGHG,IAHG,CAGE,IAHF,CADP;AAKED,IAAAA,GAAG,EAAE,YAAY;AACf,UAAID,CAAC,GAAG,KAAKC,GAAL,CAAS,QAAT,CAAR;AACA,aAAOD,CAAC,GAAG,KAAKG,YAAR,GAAuB,KAAKC,WAApC;AACD,KAHI,CAGHF,IAHG,CAGE,IAHF,CALP;AASEG,IAAAA,UAAU,EAAE;AATd,GADF;AAaAT,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,cAA5B,EACE;AACEC,IAAAA,GAAG,EAAE,UAAUC,MAAV,EAAkB;AACrB,WAAKD,GAAL,CAAS,QAAT,EAAmBC,MAAnB;AACD,KAFI,CAEHG,IAFG,CAEE,IAFF,CADP;AAIED,IAAAA,GAAG,EAAE,YAAY;AACf,aAAOT,IAAI,CAACc,OAAL,CAAa,KAAKL,GAAL,CAAS,QAAT,CAAb,CAAP;AACD,KAFI,CAEHC,IAFG,CAEE,IAFF,CAJP;AAOEG,IAAAA,UAAU,EAAE;AAPd,GADF;AAWA,MAAIE,CAAJ;AACAX,EAAAA,MAAM,CAACC,cAAP,CAAsB,IAAtB,EAA4B,aAA5B,EACE;AAAEC,IAAAA,GAAG,EAAE,UAAUC,MAAV,EAAkB;AAAEQ,MAAAA,CAAC,GAAGR,MAAJ;AAAY,KAAvC;AACEE,IAAAA,GAAG,EAAE,YAAY;AAAE,aAAOM,CAAP;AAAU,KAD/B;AAEEF,IAAAA,UAAU,EAAE;AAFd,GADF,EA5BuB,CAiCvB;AACA;AACA;;AACA,MAAIT,MAAM,CAACY,SAAP,CAAiBC,cAAjB,CAAgCC,IAAhC,CAAqChB,GAArC,EAA0C,QAA1C,CAAJ,EAAyD;AACvDa,IAAAA,CAAC,GAAGf,IAAI,CAACc,OAAL,CAAaZ,GAAG,CAACK,MAAjB,CAAJ;AACAY,IAAAA,OAAO,CAACC,QAAR,CAAiBnB,EAAjB;AACD,GAHD,MAGO;AACLH,IAAAA,UAAU,CAACqB,OAAO,CAACE,GAAR,EAAD,CAAV,CAA0BC,IAA1B,CAAgCC,KAAD,IAAW;AACxCR,MAAAA,CAAC,GAAGQ,KAAJ;AACAtB,MAAAA,EAAE;AACH,KAHD,EAGGA,EAHH;AAID;AACF","sourcesContent":["module.exports = loadPrefix\n\nvar findPrefix = require('find-npm-prefix')\nvar path = require('path')\n\nfunction loadPrefix (cb) {\n  var cli = this.list[0]\n\n  Object.defineProperty(this, 'prefix',\n    {\n      set: function (prefix) {\n        var g = this.get('global')\n        this[g ? 'globalPrefix' : 'localPrefix'] = prefix\n      }.bind(this),\n      get: function () {\n        var g = this.get('global')\n        return g ? this.globalPrefix : this.localPrefix\n      }.bind(this),\n      enumerable: true\n    })\n\n  Object.defineProperty(this, 'globalPrefix',\n    {\n      set: function (prefix) {\n        this.set('prefix', prefix)\n      }.bind(this),\n      get: function () {\n        return path.resolve(this.get('prefix'))\n      }.bind(this),\n      enumerable: true\n    })\n\n  var p\n  Object.defineProperty(this, 'localPrefix',\n    { set: function (prefix) { p = prefix },\n      get: function () { return p },\n      enumerable: true })\n\n  // try to guess at a good node_modules location.\n  // If we are *explicitly* given a prefix on the cli, then\n  // always use that.  otherwise, infer local prefix from cwd.\n  if (Object.prototype.hasOwnProperty.call(cli, 'prefix')) {\n    p = path.resolve(cli.prefix)\n    process.nextTick(cb)\n  } else {\n    findPrefix(process.cwd()).then((found) => {\n      p = found\n      cb()\n    }, cb)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}