{"ast":null,"code":"const mysql = require('mysql');\n\nconst pool = require('../../../sql/connection');\n\nconst {\n  handleSQLError\n} = require('../../../sql/error'); //PUT\n\n\nconst acceptMergeReq = (req, res, next) => {\n  //remember the requesters will the one who whose pantry will now be the primary owner and the person who requests will be come the co-owner. \n  //must update the role if the merge request is approved. will become co-owner \n  const {\n    mergeId\n  } = req.params;\n  let sql = 'UPDATE mergeRequests SET active=0, approved=1 WHERE mergeReqId= ?';\n  sql = mysql.format(sql, [mergeId]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst acceptAccess = (req, res, next) => {\n  const {\n    mergeId\n  } = req.params;\n  let sql = 'UPDATE access SET pantryRole=3, shopListRole=3 WHERE username= ? AND palReq=(SELECT palRequestId FROM palListsRequests WHERE requesterUser= ? AND pal=(SELECT requester FROM mergeRequests WHERE mergeReqId= ? ) OR requesterUser=(SELECT requester FROM mergeRequests WHERE mergeReqId= ? ) AND pal= ? )';\n  sql = mysql.format(sql, [req.user, req.user, mergeId, mergeId, req.user]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst deactivateAccess = (req, res, next) => {\n  let sql = 'UPDATE access SET active=0 WHERE pantryRole=2 AND shopListRole=2 AND username= ? ';\n  sql = mysql.format(sql, [req.user]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst copyPantry = (req, res, next) => {\n  const {\n    mergeId\n  } = req.params;\n  let sql = 'UPDATE pantries SET pantry=(SELECT pantrySettingId FROM pantriesSettings WHERE owner=(SELECT requester FROM mergeRequests WHERE mergeReqId= ? )) WHERE pantry=(SELECT pantrySettingId FROM pantriesSettings WHERE owner= ? )';\n  sql = mysql.format(sql, [mergeId, req.user]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst copyShopList = (req, res, next) => {\n  const {\n    mergeId\n  } = req.params;\n  let sql = 'UPDATE shoppingLists SET shopList=(SELECT shopListSetId FROM shopListsSettings WHERE owner=(SELECT requester FROM mergeRequests WHERE mergeReqId= ? )) WHERE shopList=(SELECT shopListSetId FROM shopListsSettings WHERE owner= ? )';\n  sql = mysql.format(sql, [mergeId, req.user]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n}; //future state, need to verify all people on merge pal's friend's list are currently on requesters list. \n\n\nconst updatePalsListAccess = (req, res, next) => {\n  const {\n    mergeId\n  } = req.params;\n  let sql = 'UPDATE access SET shopList=(SELECT shopListSetId FROM shopListsSettings WHERE owner=(SELECT requester FROM mergeRequests WHERE mergeReqId=?)) , pantry=(SELECT pantrySettingId FROM pantriesSettings WHERE owner=(SELECT requester FROM mergeRequests WHERE mergeReqId=? )) WHERE palReq=(SELECT palRequestId FROM palListsRequests WHERE approved=1 AND pal=? OR requesterUser=?)';\n  sql = mysql.format(sql, [mergeId, mergeId, req.user, req.user]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst deactivatePantry = (req, res, next) => {\n  const {\n    mergeId\n  } = req.params;\n  let sql = 'UPDATE pantriesSettings SET mergeStatus= ? , active=0 WHERE owner= ? ';\n  sql = mysql.format(sql, [mergeId, req.user]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst deactivateShopList = (req, res, next) => {\n  const {\n    mergeId\n  } = req.params;\n  let sql = ' UPDATE shopListsSettings SET mergeStatus= ? , active=0 WHERE owner= ? ';\n  sql = mysql.format(sql, [mergeId, req.user]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst pantryMergeStatus = (req, res, next) => {\n  const {\n    mergeId\n  } = req.params;\n  let sql = 'UPDATE pantriesSettings SET mergeStatus= ? WHERE owner=(SELECT requester FROM mergeRequests WHERE mergeReqId= ? )';\n  sql = mysql.format(sql, [mergeId, mergeId]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst shopListMergeStatus = (req, res, next) => {\n  const {\n    mergeId\n  } = req.params;\n  let sql = 'UPDATE shopListsSettings SET mergeStatus= ? WHERE owner=(SELECT requester FROM mergeRequests WHERE mergeReqId= ? )';\n  sql = mysql.format(sql, [mergeId, mergeId]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.send('CONGRATULATIONS! YOUR LISTS HAVE NOW BEEN MERGED');\n  });\n};\n\nmodule.exports = {\n  acceptMergeReq,\n  acceptAccess,\n  deactivateAccess,\n  copyPantry,\n  copyShopList,\n  updatePalsListAccess,\n  deactivatePantry,\n  deactivateShopList,\n  pantryMergeStatus,\n  shopListMergeStatus\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/controller/appFunc/merge/acceptMergeReq.js"],"names":["mysql","require","pool","handleSQLError","acceptMergeReq","req","res","next","mergeId","params","sql","format","query","err","results","acceptAccess","user","deactivateAccess","copyPantry","copyShopList","updatePalsListAccess","deactivatePantry","deactivateShopList","pantryMergeStatus","shopListMergeStatus","send","module","exports"],"mappings":"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","sourcesContent":["const mysql = require('mysql')\nconst pool = require('../../../sql/connection')\nconst {handleSQLError} = require('../../../sql/error')\n\n//PUT\nconst acceptMergeReq = (req, res, next) => {\n\n//remember the requesters will the one who whose pantry will now be the primary owner and the person who requests will be come the co-owner. \n  //must update the role if the merge request is approved. will become co-owner \n  const {mergeId} = req.params\n\n  let sql='UPDATE mergeRequests SET active=0, approved=1 WHERE mergeReqId= ?'\n\n  sql=mysql.format(sql,[ mergeId ])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    next()\n})  \n\n}\n\nconst acceptAccess = (req, res, next) => {\n\n  const {mergeId} = req.params\n\n  let sql='UPDATE access SET pantryRole=3, shopListRole=3 WHERE username= ? AND palReq=(SELECT palRequestId FROM palListsRequests WHERE requesterUser= ? AND pal=(SELECT requester FROM mergeRequests WHERE mergeReqId= ? ) OR requesterUser=(SELECT requester FROM mergeRequests WHERE mergeReqId= ? ) AND pal= ? )'\n\n  sql = mysql.format(sql, [ req.user, req.user, mergeId, mergeId, req.user])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    next()\n  })\n}\n\nconst deactivateAccess = (req, res, next) => {\n\n  let sql = 'UPDATE access SET active=0 WHERE pantryRole=2 AND shopListRole=2 AND username= ? '\n\n  sql = mysql.format(sql, [req.user])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    next()\n  })\n}\n\nconst copyPantry = (req, res, next) => {\n\n  const {mergeId} = req.params\n  \n  let sql = 'UPDATE pantries SET pantry=(SELECT pantrySettingId FROM pantriesSettings WHERE owner=(SELECT requester FROM mergeRequests WHERE mergeReqId= ? )) WHERE pantry=(SELECT pantrySettingId FROM pantriesSettings WHERE owner= ? )'\n\n  sql = mysql.format(sql, [mergeId, req.user])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    next()\n  })\n}\n\n\nconst copyShopList = (req, res, next) => {\n\n  const {mergeId} = req.params\n\n  let sql = 'UPDATE shoppingLists SET shopList=(SELECT shopListSetId FROM shopListsSettings WHERE owner=(SELECT requester FROM mergeRequests WHERE mergeReqId= ? )) WHERE shopList=(SELECT shopListSetId FROM shopListsSettings WHERE owner= ? )'\n\n  sql = mysql.format(sql, [mergeId, req.user ])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    next()\n  })\n}\n\n//future state, need to verify all people on merge pal's friend's list are currently on requesters list. \nconst updatePalsListAccess = (req, res, next) => {\n\n  const {mergeId} = req.params\n\n  let sql = 'UPDATE access SET shopList=(SELECT shopListSetId FROM shopListsSettings WHERE owner=(SELECT requester FROM mergeRequests WHERE mergeReqId=?)) , pantry=(SELECT pantrySettingId FROM pantriesSettings WHERE owner=(SELECT requester FROM mergeRequests WHERE mergeReqId=? )) WHERE palReq=(SELECT palRequestId FROM palListsRequests WHERE approved=1 AND pal=? OR requesterUser=?)'\n\n  sql = mysql.format(sql, [mergeId, mergeId, req.user, req.user])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    next()\n  })\n}\n\n\nconst deactivatePantry = (req, res, next) => {\n\n  const {mergeId} = req.params\n\n  let sql = 'UPDATE pantriesSettings SET mergeStatus= ? , active=0 WHERE owner= ? '\n\n  sql = mysql.format(sql, [mergeId, req.user])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    next()\n  })\n}\n\nconst deactivateShopList = (req, res, next) => {\n\n  const {mergeId} = req.params\n\n  let sql = ' UPDATE shopListsSettings SET mergeStatus= ? , active=0 WHERE owner= ? '\n\n  sql = mysql.format(sql, [mergeId, req.user])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    next()\n  })\n\n}\n\nconst pantryMergeStatus = (req, res, next) => {\n\n  const {mergeId} = req.params\n\n  let sql = 'UPDATE pantriesSettings SET mergeStatus= ? WHERE owner=(SELECT requester FROM mergeRequests WHERE mergeReqId= ? )'\n\n  sql = mysql.format(sql, [mergeId, mergeId])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    next()\n  })\n}\n\nconst shopListMergeStatus = (req, res, next) => {\n\n  const {mergeId} = req.params\n\n  let sql = 'UPDATE shopListsSettings SET mergeStatus= ? WHERE owner=(SELECT requester FROM mergeRequests WHERE mergeReqId= ? )'\n\n  sql = mysql.format(sql, [mergeId, mergeId])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    return res.send('CONGRATULATIONS! YOUR LISTS HAVE NOW BEEN MERGED')\n  })\n}\n\nmodule.exports = {\n  acceptMergeReq,\n  acceptAccess,\n  deactivateAccess,\n  copyPantry,\n  copyShopList,\n  updatePalsListAccess,\n  deactivatePantry,\n  deactivateShopList,\n  pantryMergeStatus,\n  shopListMergeStatus\n}"]},"metadata":{},"sourceType":"script"}