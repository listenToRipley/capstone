{"ast":null,"code":"'use strict';\n/**\n * headers.js\n *\n * Headers class offers convenient helpers\n */\n\nconst common = require('./common.js');\n\nconst checkInvalidHeaderChar = common.checkInvalidHeaderChar;\nconst checkIsHttpToken = common.checkIsHttpToken;\n\nfunction sanitizeName(name) {\n  name += '';\n\n  if (!checkIsHttpToken(name)) {\n    throw new TypeError(`${name} is not a legal HTTP header name`);\n  }\n\n  return name.toLowerCase();\n}\n\nfunction sanitizeValue(value) {\n  value += '';\n\n  if (checkInvalidHeaderChar(value)) {\n    throw new TypeError(`${value} is not a legal HTTP header value`);\n  }\n\n  return value;\n}\n\nconst MAP = Symbol('map');\n\nclass Headers {\n  /**\n   * Headers class\n   *\n   * @param   Object  headers  Response headers\n   * @return  Void\n   */\n  constructor(init) {\n    this[MAP] = Object.create(null);\n\n    if (init instanceof Headers) {\n      const rawHeaders = init.raw();\n      const headerNames = Object.keys(rawHeaders);\n\n      for (const headerName of headerNames) {\n        for (const value of rawHeaders[headerName]) {\n          this.append(headerName, value);\n        }\n      }\n\n      return;\n    } // We don't worry about converting prop to ByteString here as append()\n    // will handle it.\n\n\n    if (init == null) {// no op\n    } else if (typeof init === 'object') {\n      const method = init[Symbol.iterator];\n\n      if (method != null) {\n        if (typeof method !== 'function') {\n          throw new TypeError('Header pairs must be iterable');\n        } // sequence<sequence<ByteString>>\n        // Note: per spec we have to first exhaust the lists then process them\n\n\n        const pairs = [];\n\n        for (const pair of init) {\n          if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {\n            throw new TypeError('Each header pair must be iterable');\n          }\n\n          pairs.push(Array.from(pair));\n        }\n\n        for (const pair of pairs) {\n          if (pair.length !== 2) {\n            throw new TypeError('Each header pair must be a name/value tuple');\n          }\n\n          this.append(pair[0], pair[1]);\n        }\n      } else {\n        // record<ByteString, ByteString>\n        for (const key of Object.keys(init)) {\n          const value = init[key];\n          this.append(key, value);\n        }\n      }\n    } else {\n      throw new TypeError('Provided initializer must be an object');\n    }\n\n    Object.defineProperty(this, Symbol.toStringTag, {\n      value: 'Headers',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n  }\n  /**\n   * Return first header value given name\n   *\n   * @param   String  name  Header name\n   * @return  Mixed\n   */\n\n\n  get(name) {\n    const list = this[MAP][sanitizeName(name)];\n\n    if (!list) {\n      return null;\n    }\n\n    return list.join(', ');\n  }\n  /**\n   * Iterate over all headers\n   *\n   * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\n   * @param   Boolean   thisArg   `this` context for callback function\n   * @return  Void\n   */\n\n\n  forEach(callback, thisArg) {\n    let pairs = getHeaderPairs(this);\n    let i = 0;\n\n    while (i < pairs.length) {\n      const name = pairs[i][0];\n      const value = pairs[i][1];\n      callback.call(thisArg, value, name, this);\n      pairs = getHeaderPairs(this);\n      i++;\n    }\n  }\n  /**\n   * Overwrite header values given name\n   *\n   * @param   String  name   Header name\n   * @param   String  value  Header value\n   * @return  Void\n   */\n\n\n  set(name, value) {\n    this[MAP][sanitizeName(name)] = [sanitizeValue(value)];\n  }\n  /**\n   * Append a value onto existing header\n   *\n   * @param   String  name   Header name\n   * @param   String  value  Header value\n   * @return  Void\n   */\n\n\n  append(name, value) {\n    if (!this.has(name)) {\n      this.set(name, value);\n      return;\n    }\n\n    this[MAP][sanitizeName(name)].push(sanitizeValue(value));\n  }\n  /**\n   * Check for header name existence\n   *\n   * @param   String   name  Header name\n   * @return  Boolean\n   */\n\n\n  has(name) {\n    return !!this[MAP][sanitizeName(name)];\n  }\n  /**\n   * Delete all header values given name\n   *\n   * @param   String  name  Header name\n   * @return  Void\n   */\n\n\n  delete(name) {\n    delete this[MAP][sanitizeName(name)];\n  }\n\n  /**\n   * Return raw headers (non-spec api)\n   *\n   * @return  Object\n   */\n  raw() {\n    return this[MAP];\n  }\n  /**\n   * Get an iterator on keys.\n   *\n   * @return  Iterator\n   */\n\n\n  keys() {\n    return createHeadersIterator(this, 'key');\n  }\n  /**\n   * Get an iterator on values.\n   *\n   * @return  Iterator\n   */\n\n\n  values() {\n    return createHeadersIterator(this, 'value');\n  }\n  /**\n   * Get an iterator on entries.\n   *\n   * This is the default iterator of the Headers object.\n   *\n   * @return  Iterator\n   */\n\n\n  [Symbol.iterator]() {\n    return createHeadersIterator(this, 'key+value');\n  }\n\n}\n\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator];\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\n  value: 'HeadersPrototype',\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\n\nfunction getHeaderPairs(headers, kind) {\n  const keys = Object.keys(headers[MAP]).sort();\n  return keys.map(kind === 'key' ? k => [k] : k => [k, headers.get(k)]);\n}\n\nconst INTERNAL = Symbol('internal');\n\nfunction createHeadersIterator(target, kind) {\n  const iterator = Object.create(HeadersIteratorPrototype);\n  iterator[INTERNAL] = {\n    target,\n    kind,\n    index: 0\n  };\n  return iterator;\n}\n\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\n  next() {\n    // istanbul ignore if\n    if (!this || Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\n      throw new TypeError('Value of `this` is not a HeadersIterator');\n    }\n\n    const target = this[INTERNAL].target;\n    const kind = this[INTERNAL].kind;\n    const index = this[INTERNAL].index;\n    const values = getHeaderPairs(target, kind);\n    const len = values.length;\n\n    if (index >= len) {\n      return {\n        value: undefined,\n        done: true\n      };\n    }\n\n    const pair = values[index];\n    this[INTERNAL].index = index + 1;\n    let result;\n\n    if (kind === 'key') {\n      result = pair[0];\n    } else if (kind === 'value') {\n      result = pair[1];\n    } else {\n      result = pair;\n    }\n\n    return {\n      value: result,\n      done: false\n    };\n  }\n\n}, Object.getPrototypeOf(Object.getPrototypeOf([][Symbol.iterator]())));\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\n  value: 'HeadersIterator',\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nmodule.exports = Headers;","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/npm/node_modules/node-fetch-npm/src/headers.js"],"names":["common","require","checkInvalidHeaderChar","checkIsHttpToken","sanitizeName","name","TypeError","toLowerCase","sanitizeValue","value","MAP","Symbol","Headers","constructor","init","Object","create","rawHeaders","raw","headerNames","keys","headerName","append","method","iterator","pairs","pair","push","Array","from","length","key","defineProperty","toStringTag","writable","enumerable","configurable","get","list","join","forEach","callback","thisArg","getHeaderPairs","i","call","set","has","delete","createHeadersIterator","values","prototype","entries","headers","kind","sort","map","k","INTERNAL","target","HeadersIteratorPrototype","index","setPrototypeOf","next","getPrototypeOf","len","undefined","done","result","module","exports"],"mappings":"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","sourcesContent":["'use strict'\n\n/**\n * headers.js\n *\n * Headers class offers convenient helpers\n */\n\nconst common = require('./common.js')\nconst checkInvalidHeaderChar = common.checkInvalidHeaderChar\nconst checkIsHttpToken = common.checkIsHttpToken\n\nfunction sanitizeName (name) {\n  name += ''\n  if (!checkIsHttpToken(name)) {\n    throw new TypeError(`${name} is not a legal HTTP header name`)\n  }\n  return name.toLowerCase()\n}\n\nfunction sanitizeValue (value) {\n  value += ''\n  if (checkInvalidHeaderChar(value)) {\n    throw new TypeError(`${value} is not a legal HTTP header value`)\n  }\n  return value\n}\n\nconst MAP = Symbol('map')\nclass Headers {\n  /**\n   * Headers class\n   *\n   * @param   Object  headers  Response headers\n   * @return  Void\n   */\n  constructor (init) {\n    this[MAP] = Object.create(null)\n\n    if (init instanceof Headers) {\n      const rawHeaders = init.raw()\n      const headerNames = Object.keys(rawHeaders)\n\n      for (const headerName of headerNames) {\n        for (const value of rawHeaders[headerName]) {\n          this.append(headerName, value)\n        }\n      }\n\n      return\n    }\n\n    // We don't worry about converting prop to ByteString here as append()\n    // will handle it.\n    if (init == null) {\n      // no op\n    } else if (typeof init === 'object') {\n      const method = init[Symbol.iterator]\n      if (method != null) {\n        if (typeof method !== 'function') {\n          throw new TypeError('Header pairs must be iterable')\n        }\n\n        // sequence<sequence<ByteString>>\n        // Note: per spec we have to first exhaust the lists then process them\n        const pairs = []\n        for (const pair of init) {\n          if (typeof pair !== 'object' || typeof pair[Symbol.iterator] !== 'function') {\n            throw new TypeError('Each header pair must be iterable')\n          }\n          pairs.push(Array.from(pair))\n        }\n\n        for (const pair of pairs) {\n          if (pair.length !== 2) {\n            throw new TypeError('Each header pair must be a name/value tuple')\n          }\n          this.append(pair[0], pair[1])\n        }\n      } else {\n        // record<ByteString, ByteString>\n        for (const key of Object.keys(init)) {\n          const value = init[key]\n          this.append(key, value)\n        }\n      }\n    } else {\n      throw new TypeError('Provided initializer must be an object')\n    }\n\n    Object.defineProperty(this, Symbol.toStringTag, {\n      value: 'Headers',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    })\n  }\n\n  /**\n   * Return first header value given name\n   *\n   * @param   String  name  Header name\n   * @return  Mixed\n   */\n  get (name) {\n    const list = this[MAP][sanitizeName(name)]\n    if (!list) {\n      return null\n    }\n\n    return list.join(', ')\n  }\n\n  /**\n   * Iterate over all headers\n   *\n   * @param   Function  callback  Executed for each item with parameters (value, name, thisArg)\n   * @param   Boolean   thisArg   `this` context for callback function\n   * @return  Void\n   */\n  forEach (callback, thisArg) {\n    let pairs = getHeaderPairs(this)\n    let i = 0\n    while (i < pairs.length) {\n      const name = pairs[i][0]\n      const value = pairs[i][1]\n      callback.call(thisArg, value, name, this)\n      pairs = getHeaderPairs(this)\n      i++\n    }\n  }\n\n  /**\n   * Overwrite header values given name\n   *\n   * @param   String  name   Header name\n   * @param   String  value  Header value\n   * @return  Void\n   */\n  set (name, value) {\n    this[MAP][sanitizeName(name)] = [sanitizeValue(value)]\n  }\n\n  /**\n   * Append a value onto existing header\n   *\n   * @param   String  name   Header name\n   * @param   String  value  Header value\n   * @return  Void\n   */\n  append (name, value) {\n    if (!this.has(name)) {\n      this.set(name, value)\n      return\n    }\n\n    this[MAP][sanitizeName(name)].push(sanitizeValue(value))\n  }\n\n  /**\n   * Check for header name existence\n   *\n   * @param   String   name  Header name\n   * @return  Boolean\n   */\n  has (name) {\n    return !!this[MAP][sanitizeName(name)]\n  }\n\n  /**\n   * Delete all header values given name\n   *\n   * @param   String  name  Header name\n   * @return  Void\n   */\n  delete (name) {\n    delete this[MAP][sanitizeName(name)]\n  };\n\n  /**\n   * Return raw headers (non-spec api)\n   *\n   * @return  Object\n   */\n  raw () {\n    return this[MAP]\n  }\n\n  /**\n   * Get an iterator on keys.\n   *\n   * @return  Iterator\n   */\n  keys () {\n    return createHeadersIterator(this, 'key')\n  }\n\n  /**\n   * Get an iterator on values.\n   *\n   * @return  Iterator\n   */\n  values () {\n    return createHeadersIterator(this, 'value')\n  }\n\n  /**\n   * Get an iterator on entries.\n   *\n   * This is the default iterator of the Headers object.\n   *\n   * @return  Iterator\n   */\n  [Symbol.iterator] () {\n    return createHeadersIterator(this, 'key+value')\n  }\n}\nHeaders.prototype.entries = Headers.prototype[Symbol.iterator]\n\nObject.defineProperty(Headers.prototype, Symbol.toStringTag, {\n  value: 'HeadersPrototype',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nfunction getHeaderPairs (headers, kind) {\n  const keys = Object.keys(headers[MAP]).sort()\n  return keys.map(\n    kind === 'key'\n      ? k => [k]\n      : k => [k, headers.get(k)]\n  )\n}\n\nconst INTERNAL = Symbol('internal')\n\nfunction createHeadersIterator (target, kind) {\n  const iterator = Object.create(HeadersIteratorPrototype)\n  iterator[INTERNAL] = {\n    target,\n    kind,\n    index: 0\n  }\n  return iterator\n}\n\nconst HeadersIteratorPrototype = Object.setPrototypeOf({\n  next () {\n    // istanbul ignore if\n    if (!this ||\n      Object.getPrototypeOf(this) !== HeadersIteratorPrototype) {\n      throw new TypeError('Value of `this` is not a HeadersIterator')\n    }\n\n    const target = this[INTERNAL].target\n    const kind = this[INTERNAL].kind\n    const index = this[INTERNAL].index\n    const values = getHeaderPairs(target, kind)\n    const len = values.length\n    if (index >= len) {\n      return {\n        value: undefined,\n        done: true\n      }\n    }\n\n    const pair = values[index]\n    this[INTERNAL].index = index + 1\n\n    let result\n    if (kind === 'key') {\n      result = pair[0]\n    } else if (kind === 'value') {\n      result = pair[1]\n    } else {\n      result = pair\n    }\n\n    return {\n      value: result,\n      done: false\n    }\n  }\n}, Object.getPrototypeOf(\n  Object.getPrototypeOf([][Symbol.iterator]())\n))\n\nObject.defineProperty(HeadersIteratorPrototype, Symbol.toStringTag, {\n  value: 'HeadersIterator',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nmodule.exports = Headers\n"]},"metadata":{},"sourceType":"script"}