{"ast":null,"code":"const mysql = require('mysql');\n\nconst pool = require('../../sql/connection');\n\nconst {\n  handleSQLError\n} = require('../../sql/error');\n\nconst bcrypt = require('bcrypt');\n\nconst moment = require('moment');\n\nconst jwt = require('jsonwebtoken'); //search database to validate username and password match the provided input\n//validate login\n\n\nconst login = (req, res, next) => {\n  let {\n    user,\n    password\n  } = req.body;\n  sql = 'SELECT password FROM appInfo WHERE username= ?';\n  sql = mysql.format(sql, [user]);\n  pool.query(sql, async (err, row) => {\n    if (err) handleSQLError(res, err);\n    const match = await bcrypt.compare(password, row[0].password);\n\n    if (!match) {\n      res.send(`Sorry, we can't seem to find you with the information`);\n    } else {\n      next();\n    }\n  });\n};\n\nconst createSession = (req, res) => {\n  const {\n    user,\n    password\n  } = req.body;\n  const current = {\n    username: user,\n    pass: password,\n    day: moment()\n  };\n  const token = jwt.sign(current, 'pals'); //second agr needs to be saved in to env\n\n  res.json({\n    token: token\n  }); // this will be a cookie once we get to the front end \n};\n\nmodule.exports = {\n  login,\n  createSession\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/controller/admin/userVerification.js"],"names":["mysql","require","pool","handleSQLError","bcrypt","moment","jwt","login","req","res","next","user","password","body","sql","format","query","err","row","match","compare","send","createSession","current","username","pass","day","token","sign","json","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,sBAAD,CAApB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAqBF,OAAO,CAAC,iBAAD,CAAlC;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMK,GAAG,GAAGL,OAAO,CAAC,cAAD,CAAnB,C,CAEA;AACA;;;AACA,MAAMM,KAAK,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAEhC,MAAI;AAAEC,IAAAA,IAAF;AAAQC,IAAAA;AAAR,MAAqBJ,GAAG,CAACK,IAA7B;AAEEC,EAAAA,GAAG,GAAC,gDAAJ;AAEAA,EAAAA,GAAG,GAAGd,KAAK,CAACe,MAAN,CAAaD,GAAb,EAAkB,CAACH,IAAD,CAAlB,CAAN;AAEAT,EAAAA,IAAI,CAACc,KAAL,CAAWF,GAAX,EAAgB,OAAOG,GAAP,EAAYC,GAAZ,KAAoB;AAClC,QAAGD,GAAH,EAAQd,cAAc,CAACM,GAAD,EAAMQ,GAAN,CAAd;AAEV,UAAME,KAAK,GAAG,MAAMf,MAAM,CAACgB,OAAP,CAAeR,QAAf,EAAyBM,GAAG,CAAC,CAAD,CAAH,CAAON,QAAhC,CAApB;;AAEA,QAAI,CAACO,KAAL,EAAY;AACVV,MAAAA,GAAG,CAACY,IAAJ,CAAU,uDAAV;AACD,KAFD,MAEO;AACLX,MAAAA,IAAI;AACL;AAEF,GAXC;AAYH,CApBD;;AAsBA,MAAMY,aAAa,GAAG,CAACd,GAAD,EAAMC,GAAN,KAAc;AAClC,QAAM;AAACE,IAAAA,IAAD;AAAOC,IAAAA;AAAP,MAAoBJ,GAAG,CAACK,IAA9B;AAEA,QAAMU,OAAO,GAAG;AACdC,IAAAA,QAAQ,EAAEb,IADI;AAEdc,IAAAA,IAAI,EAAEb,QAFQ;AAGdc,IAAAA,GAAG,EAAErB,MAAM;AAHG,GAAhB;AAMA,QAAMsB,KAAK,GAAErB,GAAG,CAACsB,IAAJ,CAASL,OAAT,EAAkB,MAAlB,CAAb,CATkC,CASK;;AAEvCd,EAAAA,GAAG,CAACoB,IAAJ,CAAS;AAACF,IAAAA,KAAK,EAAEA;AAAR,GAAT,EAXkC,CAWR;AAC3B,CAZD;;AAcAG,MAAM,CAACC,OAAP,GAAiB;AACfxB,EAAAA,KADe;AAEfe,EAAAA;AAFe,CAAjB","sourcesContent":["const mysql = require('mysql')\nconst pool = require('../../sql/connection')\nconst { handleSQLError } = require('../../sql/error')\nconst bcrypt = require('bcrypt')\nconst moment = require('moment')\nconst jwt = require('jsonwebtoken')\n\n//search database to validate username and password match the provided input\n//validate login\nconst login = (req, res, next) => {\n\n  let { user, password } = req.body\n\n    sql='SELECT password FROM appInfo WHERE username= ?'\n  \n    sql = mysql.format(sql, [user])\n  \n    pool.query(sql, async (err, row) => {\n      if(err) handleSQLError(res, err)\n    \n    const match = await bcrypt.compare(password, row[0].password)\n\n    if (!match) {\n      res.send(`Sorry, we can't seem to find you with the information`)\n    } else {\n      next() \n    }\n\n  })\n} \n\nconst createSession = (req, res) => {\n  const {user, password } = req.body\n\n  const current = {\n    username: user, \n    pass: password,\n    day: moment()\n  }\n\n  const token =jwt.sign(current, 'pals') //second agr needs to be saved in to env\n\n  res.json({token: token }) // this will be a cookie once we get to the front end \n}\n\nmodule.exports = { \n  login,\n  createSession\n}"]},"metadata":{},"sourceType":"script"}