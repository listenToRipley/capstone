{"ast":null,"code":"'use strict';\n\nconst config = require('./config.js');\n\nconst url = require('url');\n\nmodule.exports = getAuth;\n\nfunction getAuth(registry, opts) {\n  if (!registry) {\n    throw new Error('registry is required');\n  }\n\n  opts = config(opts);\n  let AUTH = {};\n  const regKey = registry && registryKey(registry);\n\n  if (opts.forceAuth) {\n    opts = opts.forceAuth;\n  }\n\n  const doKey = (key, alias) => addKey(opts, AUTH, regKey, key, alias);\n\n  doKey('token');\n  doKey('_authToken', 'token');\n  doKey('username');\n  doKey('password');\n  doKey('_password', 'password');\n  doKey('email');\n  doKey('_auth');\n  doKey('otp');\n  doKey('always-auth', 'alwaysAuth');\n\n  if (AUTH.password) {\n    AUTH.password = Buffer.from(AUTH.password, 'base64').toString('utf8');\n  }\n\n  if (AUTH._auth && !(AUTH.username && AUTH.password)) {\n    let auth = Buffer.from(AUTH._auth, 'base64').toString();\n    auth = auth.split(':');\n    AUTH.username = auth.shift();\n    AUTH.password = auth.join(':');\n  }\n\n  AUTH.alwaysAuth = AUTH.alwaysAuth === 'false' ? false : !!AUTH.alwaysAuth;\n  return AUTH;\n}\n\nfunction addKey(opts, obj, scope, key, objKey) {\n  if (opts[key]) {\n    obj[objKey || key] = opts[key];\n  }\n\n  if (scope && opts[`${scope}:${key}`]) {\n    obj[objKey || key] = opts[`${scope}:${key}`];\n  }\n} // Called a nerf dart in the main codebase. Used as a \"safe\"\n// key when fetching registry info from config.\n\n\nfunction registryKey(registry) {\n  const parsed = url.parse(registry);\n  const formatted = url.format({\n    host: parsed.host,\n    pathname: parsed.pathname,\n    slashes: parsed.slashes\n  });\n  return url.resolve(formatted, '.');\n}","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/npm/node_modules/npm-registry-fetch/auth.js"],"names":["config","require","url","module","exports","getAuth","registry","opts","Error","AUTH","regKey","registryKey","forceAuth","doKey","key","alias","addKey","password","Buffer","from","toString","_auth","username","auth","split","shift","join","alwaysAuth","obj","scope","objKey","parsed","parse","formatted","format","host","pathname","slashes","resolve"],"mappings":"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","sourcesContent":["'use strict'\n\nconst config = require('./config.js')\nconst url = require('url')\n\nmodule.exports = getAuth\nfunction getAuth (registry, opts) {\n  if (!registry) { throw new Error('registry is required') }\n  opts = config(opts)\n  let AUTH = {}\n  const regKey = registry && registryKey(registry)\n  if (opts.forceAuth) {\n    opts = opts.forceAuth\n  }\n  const doKey = (key, alias) => addKey(opts, AUTH, regKey, key, alias)\n  doKey('token')\n  doKey('_authToken', 'token')\n  doKey('username')\n  doKey('password')\n  doKey('_password', 'password')\n  doKey('email')\n  doKey('_auth')\n  doKey('otp')\n  doKey('always-auth', 'alwaysAuth')\n  if (AUTH.password) {\n    AUTH.password = Buffer.from(AUTH.password, 'base64').toString('utf8')\n  }\n  if (AUTH._auth && !(AUTH.username && AUTH.password)) {\n    let auth = Buffer.from(AUTH._auth, 'base64').toString()\n    auth = auth.split(':')\n    AUTH.username = auth.shift()\n    AUTH.password = auth.join(':')\n  }\n  AUTH.alwaysAuth = AUTH.alwaysAuth === 'false' ? false : !!AUTH.alwaysAuth\n  return AUTH\n}\n\nfunction addKey (opts, obj, scope, key, objKey) {\n  if (opts[key]) {\n    obj[objKey || key] = opts[key]\n  }\n  if (scope && opts[`${scope}:${key}`]) {\n    obj[objKey || key] = opts[`${scope}:${key}`]\n  }\n}\n\n// Called a nerf dart in the main codebase. Used as a \"safe\"\n// key when fetching registry info from config.\nfunction registryKey (registry) {\n  const parsed = url.parse(registry)\n  const formatted = url.format({\n    host: parsed.host,\n    pathname: parsed.pathname,\n    slashes: parsed.slashes\n  })\n  return url.resolve(formatted, '.')\n}\n"]},"metadata":{},"sourceType":"script"}