{"ast":null,"code":"const mysql = require('mysql');\n\nconst pool = require('../../sql/connection');\n\nconst {\n  handleSQLError\n} = require('../../sql/error');\n\nconst bcrypt = require('bcrypt');\n\nconst saltRounds = 10; //FIRST TWO ONLY NEED TO BE CALLED ONCE SO CANNOT BE USED AS MIDDLEWARE, \n\nconst verifyUsername = (req, res, next) => {\n  let sql = 'SELECT COUNT(username) FROM appInfo WHERE active=1 AND username= ? ORDER BY username;';\n  sql = mysql.format(sql, [req.params.username]);\n  pool.query(sql, (err, row) => {\n    if (err) return handleSQLError(res, err);\n    let total = row[0]['COUNT(username)'];\n\n    if (total !== 0) {\n      res.send('The username is already taken, please find another');\n    } else {\n      next();\n    }\n  });\n};\n\nconst verifyEmail = (req, res, next) => {\n  let sql = 'SELECT COUNT(email) FROM appInfo WHERE active=1 AND email= ? ORDER BY email; ';\n  sql = mysql.format(sql, [req.params.email]);\n  pool.query(sql, (err, row) => {\n    if (err) return handleSQLError(res, err);\n    let total = row[0]['COUNT(email)'];\n\n    if (total !== 0) {\n      res.send('Sorry, you seem to already have a login.'); //should get reroute to create a login \n    } else {\n      next();\n    }\n  });\n};\n\nconst createUsername = (req, res, next) => {\n  const {\n    username,\n    password,\n    email\n  } = req.body;\n  bcrypt.hash(password, saltRounds, (err, hash) => {\n    let sql = 'INSERT INTO appInfo (username, password, email ) VALUES (? ,?, ?);';\n    sql = mysql.format(sql, [username, hash, email]);\n    pool.query(sql, (err, results) => {\n      if (err) return handleSQLError(res, err);\n      next();\n    });\n  });\n};\n\nconst createUserDetails = (req, res, next) => {\n  const {\n    username,\n    firstName,\n    lastName,\n    dobMonth,\n    dobDate,\n    dobYear\n  } = req.body;\n  let sql = 'INSERT INTO usersDetails (username, firstName,lastName, dobMonth, dobDate, dobYear, signedUp) VALUES (?, ?, ?, ?, ?, ?, NOW())';\n  sql = mysql.format(sql, [username, firstName, lastName, dobMonth, dobDate, dobYear]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst createUserLocation = (req, res, next) => {\n  let sql = 'INSERT INTO usersLocations (username) VALUES (?)';\n  sql = mysql.format(sql, [req.body.username]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst createDefaultDisplay = (req, res, next) => {\n  let sql = 'INSERT INTO usersDisplayPreferences (username) VALUES (?)';\n  sql = mysql.format(sql, [req.body.username]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst createPantry = (req, res, next) => {\n  let sql = 'INSERT INTO pantriesSettings (owner) VALUES (?)';\n  sql = mysql.format(sql, [req.body.username]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst createShoppingList = (req, res, next) => {\n  let sql = 'INSERT INTO shopListsSettings (owner) VALUES (?)';\n  sql = mysql.format(sql, [req.body.username]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst createPalList = (req, res, next) => {\n  let sql = 'INSERT INTO palListsSettings (owner) VALUES (?)';\n  sql = mysql.format(sql, [req.body.username]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst createUserAccess = (req, res, next) => {\n  const {\n    username\n  } = req.body;\n  let sql = 'INSERT INTO access (username, pantry, pantryRole, shopList, shopListRole) VALUES (?,(SELECT DISTINCT last_insert_id() FROM pantriesSettings), 2, (SELECT DISTINCT last_insert_id() FROM shopListsSettings), 2)';\n  sql = mysql.format(sql, [username]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.send('CONGRATULATIONS! YOUR ARE NOW A PANTRY PAL USER!');\n  });\n};\n\nconst newUser = (req, res) => {\n  const {\n    username\n  } = req.params;\n  let sql = 'SELECT aI.username, aI.password, aI.email, uD.firstName, uD.lastName, uD.dobMonth, uD.dobDate, uD.dobYear, uD.signedUp, uL.userLocationId ,uDP.displayPrefId, pS.pantrySettingId, sLS.shopListSetId, pLS.palListSettingsId, a.accessId FROM appInfo AS aI JOIN usersDetails AS uD ON aI.username=uD.username JOIN  usersLocations AS uL ON aI.username=uL.username JOIN usersDisplayPreferences AS uDP ON aI.username=uDP.username JOIN pantriesSettings AS pS ON aI.username=pS.owner JOIN shopListsSettings AS sLS ON aI.username=sLS.owner JOIN palListsSettings AS pLS ON aI.username=pLS.owner JOIN access AS a ON aI.username=a.username WHERE a.pantryRole=2 AND a.shopListRole=2 AND aI.username= ? ';\n  sql = mysql.format(sql, [username]);\n  pool.query(sql, (err, row) => {\n    if (err) return handleSQLError(res, err);\n    return res.json(row);\n  });\n};\n\nmodule.exports = {\n  verifyUsername,\n  verifyEmail,\n  createUsername,\n  createUserDetails,\n  createUserLocation,\n  createDefaultDisplay,\n  createPantry,\n  createShoppingList,\n  createPalList,\n  createUserAccess,\n  newUser\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/controller/admin/createNewUser.js"],"names":["mysql","require","pool","handleSQLError","bcrypt","saltRounds","verifyUsername","req","res","next","sql","format","params","username","query","err","row","total","send","verifyEmail","email","createUsername","password","body","hash","results","createUserDetails","firstName","lastName","dobMonth","dobDate","dobYear","createUserLocation","createDefaultDisplay","createPantry","createShoppingList","createPalList","createUserAccess","newUser","json","module","exports"],"mappings":"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","sourcesContent":["const mysql = require('mysql')\nconst pool = require('../../sql/connection')\nconst { handleSQLError } = require('../../sql/error')\nconst bcrypt = require('bcrypt');\nconst saltRounds = 10;\n\n//FIRST TWO ONLY NEED TO BE CALLED ONCE SO CANNOT BE USED AS MIDDLEWARE, \nconst verifyUsername = (req, res, next) => {\n\n  let sql = 'SELECT COUNT(username) FROM appInfo WHERE active=1 AND username= ? ORDER BY username;'\n\n  sql = mysql.format(sql, [req.params.username])\n    pool.query (sql, (err, row ) => {\n    if (err) return handleSQLError(res, err)\n      let total = row[0]['COUNT(username)']\n    if(total!==0) {\n      res.send('The username is already taken, please find another')\n    } else {\n      next()\n    }\n  })\n}\n\n\nconst verifyEmail = (req, res, next) => {\n\n  let sql = 'SELECT COUNT(email) FROM appInfo WHERE active=1 AND email= ? ORDER BY email; '\n\n  sql = mysql.format(sql, [req.params.email])\n  \n  pool.query(sql, (err, row) => {\n    if (err) return handleSQLError(res, err)\n    let total = row[0]['COUNT(email)']\n    if(total!==0) {\n      res.send('Sorry, you seem to already have a login.') //should get reroute to create a login \n    } else {\n      next()\n    }\n  })\n}\n\nconst createUsername = (req, res, next) => {\n\n  const { username, password, email } = req.body\n  bcrypt.hash(password, saltRounds, (err, hash) => {\n\n    let sql='INSERT INTO appInfo (username, password, email ) VALUES (? ,?, ?);'\n  \n    sql = mysql.format(sql, [username, hash, email])\n  \n    pool.query(sql, (err, results) => {\n      if(err) return handleSQLError(res, err)\n      next()\n    })  \n  })\n  }\n\nconst createUserDetails = (req, res, next) => {\n\n  const { username, firstName, lastName, dobMonth, dobDate, dobYear} = req.body\n\n   let sql=\t'INSERT INTO usersDetails (username, firstName,lastName, dobMonth, dobDate, dobYear, signedUp) VALUES (?, ?, ?, ?, ?, ?, NOW())'\n\n   sql = mysql.format(sql, [ username, firstName, lastName,dobMonth, dobDate, dobYear ])\n\n   pool.query(sql, (err, results) => {\n     if(err) return handleSQLError(res, err)\n     next()\n   })  \n}\n\nconst createUserLocation = (req, res, next) => {\n\n   let sql=\t'INSERT INTO usersLocations (username) VALUES (?)'\n\n   sql = mysql.format(sql, [ req.body.username])\n\n   pool.query(sql, (err, results) => {\n     if(err) return handleSQLError(res, err)\n     next()\n   })  \n}\n\n\nconst createDefaultDisplay = (req, res, next) => {\n\n   let sql=\t'INSERT INTO usersDisplayPreferences (username) VALUES (?)'\n\n   sql = mysql.format(sql, [ req.body.username])\n\n   pool.query(sql, (err, results) => {\n     if(err) return handleSQLError(res, err)\n     next()\n   })  \n\n}\n\nconst createPantry = (req, res, next) => {\n\n   let sql=\t'INSERT INTO pantriesSettings (owner) VALUES (?)'\n\n   sql = mysql.format(sql, [ req.body.username])\n\n   pool.query(sql, (err, results) => {\n     if(err) return handleSQLError(res, err)\n     next()\n   })  \n}\n\n\nconst createShoppingList = (req, res, next) => {\n\n   let sql=\t'INSERT INTO shopListsSettings (owner) VALUES (?)'\n\n   sql = mysql.format(sql, [ req.body.username])\n\n   pool.query(sql, (err, results) => {\n     if(err) return handleSQLError(res, err)\n    next()\n   })  \n  }\n\n\nconst createPalList = (req, res, next) => {\n\n   let sql=\t'INSERT INTO palListsSettings (owner) VALUES (?)'\n\n   sql = mysql.format(sql, [req.body.username])\n\n   pool.query(sql, (err, results) => {\n     if(err) return handleSQLError(res, err)\n     next()\n   })  \n\n}\n\nconst createUserAccess = (req, res, next) => {\n\n  const {username} = req.body\n\n   let sql=\t'INSERT INTO access (username, pantry, pantryRole, shopList, shopListRole) VALUES (?,(SELECT DISTINCT last_insert_id() FROM pantriesSettings), 2, (SELECT DISTINCT last_insert_id() FROM shopListsSettings), 2)'\n\n   sql = mysql.format(sql, [ username])\n\n   pool.query(sql, (err, results) => {\n     if(err) return handleSQLError(res, err)\n     return res.send('CONGRATULATIONS! YOUR ARE NOW A PANTRY PAL USER!')\n   })  \n\n}\n\nconst newUser = (req, res) => {\n  \n  const {username} = req.params\n\n  let sql='SELECT aI.username, aI.password, aI.email, uD.firstName, uD.lastName, uD.dobMonth, uD.dobDate, uD.dobYear, uD.signedUp, uL.userLocationId ,uDP.displayPrefId, pS.pantrySettingId, sLS.shopListSetId, pLS.palListSettingsId, a.accessId FROM appInfo AS aI JOIN usersDetails AS uD ON aI.username=uD.username JOIN  usersLocations AS uL ON aI.username=uL.username JOIN usersDisplayPreferences AS uDP ON aI.username=uDP.username JOIN pantriesSettings AS pS ON aI.username=pS.owner JOIN shopListsSettings AS sLS ON aI.username=sLS.owner JOIN palListsSettings AS pLS ON aI.username=pLS.owner JOIN access AS a ON aI.username=a.username WHERE a.pantryRole=2 AND a.shopListRole=2 AND aI.username= ? '\n\n\n  sql = mysql.format(sql, [ username])\n\n  pool.query(sql, (err, row) => {\n    if(err) return handleSQLError(res, err)\n    return res.json(row)\n\n  })  \n}\n\nmodule.exports = {\n  verifyUsername,\n  verifyEmail, \n  createUsername,\n  createUserDetails,\n  createUserLocation,\n  createDefaultDisplay,\n  createPantry,\n  createShoppingList,\n  createPalList,\n  createUserAccess,\n  newUser\n}"]},"metadata":{},"sourceType":"script"}