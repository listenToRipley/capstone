{"ast":null,"code":"#!/usr/bin/env node\n;\n\n(function () {\n  // wrapper in case we're in module_context mode\n  // windows: running \"npm blah\" in this folder will invoke WSH, not node.\n\n  /* global WScript */\n  if (typeof WScript !== 'undefined') {\n    WScript.echo('npm does not work when run\\n' + 'with the Windows Scripting Host\\n\\n' + \"'cd' to a different directory,\\n\" + \"or type 'npm.cmd <args>',\\n\" + \"or type 'node npm <args>'.\");\n    WScript.quit(1);\n    return;\n  }\n\n  process.title = 'npm';\n\n  var unsupported = require('../lib/utils/unsupported.js');\n\n  unsupported.checkForBrokenNode();\n\n  var log = require('npmlog');\n\n  log.pause(); // will be unpaused when config is loaded.\n\n  log.info('it worked if it ends with', 'ok');\n  unsupported.checkForUnsupportedNode();\n\n  var npm = require('../lib/npm.js');\n\n  var npmconf = require('../lib/config/core.js');\n\n  var errorHandler = require('../lib/utils/error-handler.js');\n\n  var replaceInfo = require('../lib/utils/replace-info.js');\n\n  var configDefs = npmconf.defs;\n  var shorthands = configDefs.shorthands;\n  var types = configDefs.types;\n\n  var nopt = require('nopt'); // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n\n\n  if (process.argv[1][process.argv[1].length - 1] === 'g') {\n    process.argv.splice(1, 1, 'npm', '-g');\n  }\n\n  var args = replaceInfo(process.argv);\n  log.verbose('cli', args);\n  var conf = nopt(types, shorthands);\n  npm.argv = conf.argv.remain;\n  if (npm.deref(npm.argv[0])) npm.command = npm.argv.shift();else conf.usage = true;\n\n  if (conf.version) {\n    console.log(npm.version);\n    return errorHandler.exit(0);\n  }\n\n  if (conf.versions) {\n    npm.command = 'version';\n    conf.usage = false;\n    npm.argv = [];\n  }\n\n  log.info('using', 'npm@%s', npm.version);\n  log.info('using', 'node@%s', process.version);\n  process.on('uncaughtException', errorHandler);\n  process.on('unhandledRejection', errorHandler);\n\n  if (conf.usage && npm.command !== 'help') {\n    npm.argv.unshift(npm.command);\n    npm.command = 'help';\n  }\n\n  var isGlobalNpmUpdate = conf.global && ['install', 'update'].includes(npm.command) && npm.argv.includes('npm'); // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n\n  conf._exit = true;\n  npm.load(conf, function (er) {\n    if (er) return errorHandler(er);\n\n    if (!isGlobalNpmUpdate && npm.config.get('update-notifier') && !unsupported.checkVersion(process.version).unsupported) {\n      const pkg = require('../package.json');\n\n      let notifier = require('update-notifier')({\n        pkg\n      });\n\n      const isCI = require('ci-info').isCI;\n\n      if (notifier.update && notifier.update.latest !== pkg.version && !isCI) {\n        const color = require('ansicolors');\n\n        const useColor = npm.config.get('color');\n        const useUnicode = npm.config.get('unicode');\n        const old = notifier.update.current;\n        const latest = notifier.update.latest;\n        let type = notifier.update.type;\n\n        if (useColor) {\n          switch (type) {\n            case 'major':\n              type = color.red(type);\n              break;\n\n            case 'minor':\n              type = color.yellow(type);\n              break;\n\n            case 'patch':\n              type = color.green(type);\n              break;\n          }\n        }\n\n        const changelog = `https://github.com/npm/cli/releases/tag/v${latest}`;\n        notifier.notify({\n          message: `New ${type} version of ${pkg.name} available! ${useColor ? color.red(old) : old} ${useUnicode ? 'â†’' : '->'} ${useColor ? color.green(latest) : latest}\\n` + `${useColor ? color.yellow('Changelog:') : 'Changelog:'} ${useColor ? color.cyan(changelog) : changelog}\\n` + `Run ${useColor ? color.green(`npm install -g ${pkg.name}`) : `npm i -g ${pkg.name}`} to update!`\n        });\n      }\n    }\n\n    npm.commands[npm.command](npm.argv, function (err) {\n      // https://genius.com/Lin-manuel-miranda-your-obedient-servant-lyrics\n      if (!err && npm.config.get('ham-it-up') && !npm.config.get('json') && !npm.config.get('parseable') && npm.command !== 'completion') {\n        console.error(`\\n ${npm.config.get('unicode') ? 'ðŸŽµ ' : ''} I Have the Honour to Be Your Obedient Servant,${npm.config.get('unicode') ? 'ðŸŽµ ' : ''} ~ npm ${npm.config.get('unicode') ? 'ðŸ“œðŸ–‹ ' : ''}\\n`);\n      }\n\n      errorHandler.apply(this, arguments);\n    });\n  });\n})();","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/npm/bin/npm-cli.js"],"names":["WScript","echo","quit","process","title","unsupported","require","checkForBrokenNode","log","pause","info","checkForUnsupportedNode","npm","npmconf","errorHandler","replaceInfo","configDefs","defs","shorthands","types","nopt","argv","length","splice","args","verbose","conf","remain","deref","command","shift","usage","version","console","exit","versions","on","unshift","isGlobalNpmUpdate","global","includes","_exit","load","er","config","get","checkVersion","pkg","notifier","isCI","update","latest","color","useColor","useUnicode","old","current","type","red","yellow","green","changelog","notify","message","name","cyan","commands","err","error","apply","arguments"],"mappings":"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","sourcesContent":["#!/usr/bin/env node\n;(function () { // wrapper in case we're in module_context mode\n  // windows: running \"npm blah\" in this folder will invoke WSH, not node.\n  /* global WScript */\n  if (typeof WScript !== 'undefined') {\n    WScript.echo(\n      'npm does not work when run\\n' +\n        'with the Windows Scripting Host\\n\\n' +\n        \"'cd' to a different directory,\\n\" +\n        \"or type 'npm.cmd <args>',\\n\" +\n        \"or type 'node npm <args>'.\"\n    )\n    WScript.quit(1)\n    return\n  }\n\n  process.title = 'npm'\n\n  var unsupported = require('../lib/utils/unsupported.js')\n  unsupported.checkForBrokenNode()\n\n  var log = require('npmlog')\n  log.pause() // will be unpaused when config is loaded.\n  log.info('it worked if it ends with', 'ok')\n\n  unsupported.checkForUnsupportedNode()\n\n  var npm = require('../lib/npm.js')\n  var npmconf = require('../lib/config/core.js')\n  var errorHandler = require('../lib/utils/error-handler.js')\n  var replaceInfo = require('../lib/utils/replace-info.js')\n\n  var configDefs = npmconf.defs\n  var shorthands = configDefs.shorthands\n  var types = configDefs.types\n  var nopt = require('nopt')\n\n  // if npm is called as \"npmg\" or \"npm_g\", then\n  // run in global mode.\n  if (process.argv[1][process.argv[1].length - 1] === 'g') {\n    process.argv.splice(1, 1, 'npm', '-g')\n  }\n\n  var args = replaceInfo(process.argv)\n  log.verbose('cli', args)\n\n  var conf = nopt(types, shorthands)\n  npm.argv = conf.argv.remain\n  if (npm.deref(npm.argv[0])) npm.command = npm.argv.shift()\n  else conf.usage = true\n\n  if (conf.version) {\n    console.log(npm.version)\n    return errorHandler.exit(0)\n  }\n\n  if (conf.versions) {\n    npm.command = 'version'\n    conf.usage = false\n    npm.argv = []\n  }\n\n  log.info('using', 'npm@%s', npm.version)\n  log.info('using', 'node@%s', process.version)\n\n  process.on('uncaughtException', errorHandler)\n  process.on('unhandledRejection', errorHandler)\n\n  if (conf.usage && npm.command !== 'help') {\n    npm.argv.unshift(npm.command)\n    npm.command = 'help'\n  }\n\n  var isGlobalNpmUpdate = conf.global && ['install', 'update'].includes(npm.command) && npm.argv.includes('npm')\n\n  // now actually fire up npm and run the command.\n  // this is how to use npm programmatically:\n  conf._exit = true\n  npm.load(conf, function (er) {\n    if (er) return errorHandler(er)\n    if (\n      !isGlobalNpmUpdate &&\n      npm.config.get('update-notifier') &&\n      !unsupported.checkVersion(process.version).unsupported\n    ) {\n      const pkg = require('../package.json')\n      let notifier = require('update-notifier')({pkg})\n      const isCI = require('ci-info').isCI\n      if (\n        notifier.update &&\n        notifier.update.latest !== pkg.version &&\n        !isCI\n      ) {\n        const color = require('ansicolors')\n        const useColor = npm.config.get('color')\n        const useUnicode = npm.config.get('unicode')\n        const old = notifier.update.current\n        const latest = notifier.update.latest\n        let type = notifier.update.type\n        if (useColor) {\n          switch (type) {\n            case 'major':\n              type = color.red(type)\n              break\n            case 'minor':\n              type = color.yellow(type)\n              break\n            case 'patch':\n              type = color.green(type)\n              break\n          }\n        }\n        const changelog = `https://github.com/npm/cli/releases/tag/v${latest}`\n        notifier.notify({\n          message: `New ${type} version of ${pkg.name} available! ${\n            useColor ? color.red(old) : old\n          } ${useUnicode ? 'â†’' : '->'} ${\n            useColor ? color.green(latest) : latest\n          }\\n` +\n          `${\n            useColor ? color.yellow('Changelog:') : 'Changelog:'\n          } ${\n            useColor ? color.cyan(changelog) : changelog\n          }\\n` +\n          `Run ${\n            useColor\n              ? color.green(`npm install -g ${pkg.name}`)\n              : `npm i -g ${pkg.name}`\n          } to update!`\n        })\n      }\n    }\n    npm.commands[npm.command](npm.argv, function (err) {\n      // https://genius.com/Lin-manuel-miranda-your-obedient-servant-lyrics\n      if (\n        !err &&\n        npm.config.get('ham-it-up') &&\n        !npm.config.get('json') &&\n        !npm.config.get('parseable') &&\n        npm.command !== 'completion'\n      ) {\n        console.error(\n          `\\n ${\n            npm.config.get('unicode') ? 'ðŸŽµ ' : ''\n          } I Have the Honour to Be Your Obedient Servant,${\n            npm.config.get('unicode') ? 'ðŸŽµ ' : ''\n          } ~ npm ${\n            npm.config.get('unicode') ? 'ðŸ“œðŸ–‹ ' : ''\n          }\\n`\n        )\n      }\n      errorHandler.apply(this, arguments)\n    })\n  })\n})()\n"]},"metadata":{},"sourceType":"script"}