{"ast":null,"code":"const mysql = require('mysql');\n\nconst pool = require('../../../sql/connection');\n\nconst {\n  handleSQLError\n} = require('../../../sql/error'); //GET\n\n\nconst pantryDetails = (req, res) => {\n  let sql = 'SELECT owner, pantryName, autoAdd, mergeStatus FROM pantriesSettings WHERE active=1 AND pantrySettingId=?';\n  sql = mysql.format(sql, [req.params.pantryId]);\n  pool.query(sql, (err, row) => {\n    if (err) handleSQLError(res, err);\n    return res.json(row);\n  });\n}; //may have to refactor this as an access point, a secondary token? Lets see how it works first \n\n\nconst pantryAccess = (req, res) => {\n  let sql = 'SELECT a.pantry, pS.owner, a.username AS pals, a.pantryRole, a.palReq, pS.autoAdd, pS.mergeStatus FROM pantriesSettings AS pS JOIN access AS a ON a.pantry=pS.pantrySettingId WHERE a.active=1 AND pS.active=1 AND a.username<>pS.owner AND a.pantry= ? ORDER BY a.username';\n  sql = mysql.format(sql, [req.params.pantryId]);\n  pool.query(sql, (err, row) => {\n    if (err) handleSQLError(res, err);\n    return res.json(row);\n  });\n};\n\nconst pantryCount = (req, res) => {\n  let sql = 'SELECT COUNT(entryId) AS itemCount FROM pantries WHERE stock=1 AND pantry=?';\n  sql = mysql.format(sql, [req.params.pantryId]);\n  pool.query(sql, (err, row) => {\n    if (err) handleSQLError(res, err);\n    return res.json(row);\n  });\n};\n\nconst pantryItems = (req, res) => {\n  let sql = 'SELECT entryId, quantity, measId, item, spoonId FROM pantries WHERE stock=1 AND pantry= ? ORDER BY item';\n  sql = mysql.format(sql, [req.params.pantryId]);\n  pool.query(sql, (err, row) => {\n    if (err) return handleSQLError(res, err);\n    return res.json(row);\n  });\n}; //POST\n\n\nconst addToPantry = (req, res) => {\n  const {\n    quantity,\n    measId,\n    item,\n    spoonId\n  } = req.body;\n  const {\n    pantryId\n  } = req.params;\n  let sql = 'INSERT INTO pantries (pantry, quantity, measId, item, spoonId) VALUES ( ?, ? , ?, ?, ?);';\n  sql = mysql.format(sql, [pantryId, quantity, measId, item, spoonId]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.status(204).json();\n  });\n}; //PUT\n\n\nmodule.exports = {\n  pantryDetails,\n  pantryAccess,\n  pantryCount,\n  pantryItems,\n  addToPantry\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/controller/appFunc/pantries/byList.js"],"names":["mysql","require","pool","handleSQLError","pantryDetails","req","res","sql","format","params","pantryId","query","err","row","json","pantryAccess","pantryCount","pantryItems","addToPantry","quantity","measId","item","spoonId","body","results","status","module","exports"],"mappings":"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","sourcesContent":["const mysql = require('mysql')\nconst pool = require('../../../sql/connection')\nconst { handleSQLError } = require('../../../sql/error')\n\n//GET\nconst pantryDetails = (req, res) => {\n\n  let sql = 'SELECT owner, pantryName, autoAdd, mergeStatus FROM pantriesSettings WHERE active=1 AND pantrySettingId=?'\n  \n  sql=mysql.format(sql, [req.params.pantryId])\n  \n  pool.query(sql, (err, row) => {\n    if (err) handleSQLError(res, err)\n  \n    return res.json(row)\n  })\n  \n  }\n\n  //may have to refactor this as an access point, a secondary token? Lets see how it works first \nconst pantryAccess = (req, res) => {\n\nlet sql = 'SELECT a.pantry, pS.owner, a.username AS pals, a.pantryRole, a.palReq, pS.autoAdd, pS.mergeStatus FROM pantriesSettings AS pS JOIN access AS a ON a.pantry=pS.pantrySettingId WHERE a.active=1 AND pS.active=1 AND a.username<>pS.owner AND a.pantry= ? ORDER BY a.username'\n\nsql=mysql.format(sql, [req.params.pantryId])\n\npool.query(sql, (err, row) => {\n  if (err) handleSQLError(res, err)\n\n  return res.json(row)\n})\n\n}\n\nconst pantryCount = (req, res) => {\n\n  let sql = 'SELECT COUNT(entryId) AS itemCount FROM pantries WHERE stock=1 AND pantry=?'\n\n  sql = mysql.format(sql, [req.params.pantryId])\n\n  pool.query(sql, (err, row) => {\n    if(err) handleSQLError(res, err) \n\n    return res.json(row)\n  })\n\n}\n\nconst pantryItems = (req, res) => {\n\nlet sql = 'SELECT entryId, quantity, measId, item, spoonId FROM pantries WHERE stock=1 AND pantry= ? ORDER BY item' \n\nsql=mysql.format(sql,[req.params.pantryId])\n\npool.query(sql, (err, row) => {\nif(err) return handleSQLError(res, err)\nreturn res.json(row); \n})  \n\n}\n\n//POST\nconst addToPantry = (req, res) => {\n\nconst { quantity, measId, item, spoonId} = req.body\nconst {pantryId} = req.params\n\nlet sql ='INSERT INTO pantries (pantry, quantity, measId, item, spoonId) VALUES ( ?, ? , ?, ?, ?);'\n\nsql=mysql.format(sql,[ pantryId, quantity, measId, item, spoonId ])\n\npool.query(sql, (err, results) => {\nif (err) return handleSQLError(res, err)\nreturn res.status(204).json();\n})\n}\n\n\n//PUT\n\nmodule.exports = {\n  pantryDetails,\n  pantryAccess,\n  pantryCount,\n  pantryItems,\n  addToPantry\n}"]},"metadata":{},"sourceType":"script"}