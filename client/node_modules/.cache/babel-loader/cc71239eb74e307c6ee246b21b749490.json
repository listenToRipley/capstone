{"ast":null,"code":"const mysql = require('mysql');\n\nconst pool = require('../../../sql/connection');\n\nconst {\n  handleSQLError\n} = require('../../../sql/error');\n\nconst bcrypt = require('bcrypt'); //PUT\n\n\nconst updatePassword = async (req, res) => {\n  const salt = bcrypt.genSaltSync(10);\n  const {\n    password\n  } = req.body;\n  const {\n    email\n  } = req.params;\n  bcrypt.hash(password, salt, (err, hash) => {\n    let sql = 'UPDATE appInfo SET password=? WHERE email=?';\n    sql = mysql.format(sql, [hash, email]);\n    pool.query(sql, (err, results) => {\n      if (err) return handleSQLError(res, err);\n\n      if (results.affectedRows === 0) {\n        return res.send(`Sorry, something went wrong, we don't seem to have that email on record`);\n      } else {\n        return res.send('Your password has now been reset');\n      }\n    });\n    console.log('here?');\n  });\n};\n\nconst updateFromLogPassword = async (req, res) => {\n  const salt = bcrypt.genSaltSync(10);\n  const {\n    password\n  } = req.body;\n  bcrypt.hash(password, salt, (err, hash) => {\n    let sql = 'UPDATE appInfo SET password=? WHERE username=?';\n    sql = mysql.format(sql, [hash, req.user]);\n    pool.query(sql, (err, results) => {\n      if (err) return handleSQLError(res, err);\n\n      if (results.affectedRows === 0) {\n        return res.send(`Sorry, something went wrong, we don't seem to have that email on record`);\n      } else {\n        return res.send('Your password has now been reset');\n      }\n    });\n    console.log('here?');\n  });\n};\n\nmodule.exports = {\n  updatePassword,\n  updateFromLogPassword\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/controller/appFunc/password/password.js"],"names":["mysql","require","pool","handleSQLError","bcrypt","updatePassword","req","res","salt","genSaltSync","password","body","email","params","hash","err","sql","format","query","results","affectedRows","send","console","log","updateFromLogPassword","user","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,yBAAD,CAApB;;AACA,MAAM;AAAEE,EAAAA;AAAF,IAAqBF,OAAO,CAAC,oBAAD,CAAlC;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB,C,CAGA;;;AACA,MAAMI,cAAc,GAAG,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAEzC,QAAMC,IAAI,GAAGJ,MAAM,CAACK,WAAP,CAAmB,EAAnB,CAAb;AAEA,QAAM;AAACC,IAAAA;AAAD,MAAaJ,GAAG,CAACK,IAAvB;AACA,QAAM;AAACC,IAAAA;AAAD,MAAUN,GAAG,CAACO,MAApB;AAEAT,EAAAA,MAAM,CAACU,IAAP,CAAYJ,QAAZ,EAAsBF,IAAtB,EAA4B,CAACO,GAAD,EAAMD,IAAN,KAAe;AAE3C,QAAIE,GAAG,GAAC,6CAAR;AAEAA,IAAAA,GAAG,GAAChB,KAAK,CAACiB,MAAN,CAAaD,GAAb,EAAiB,CAACF,IAAD,EAAOF,KAAP,CAAjB,CAAJ;AAEAV,IAAAA,IAAI,CAACgB,KAAL,CAAWF,GAAX,EAAgB,CAACD,GAAD,EAAMI,OAAN,KAAkB;AAChC,UAAIJ,GAAJ,EAAS,OAAOZ,cAAc,CAACI,GAAD,EAAMQ,GAAN,CAArB;;AAET,UAAGI,OAAO,CAACC,YAAR,KAAyB,CAA5B,EAA+B;AAC7B,eAAOb,GAAG,CAACc,IAAJ,CAAU,yEAAV,CAAP;AACD,OAFD,MAEO;AACL,eAAOd,GAAG,CAACc,IAAJ,CAAS,kCAAT,CAAP;AACD;AAEF,KATD;AAUEC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,GAjBD;AAkBD,CAzBD;;AA2BA,MAAMC,qBAAqB,GAAG,OAAOlB,GAAP,EAAYC,GAAZ,KAAoB;AAEhD,QAAMC,IAAI,GAAGJ,MAAM,CAACK,WAAP,CAAmB,EAAnB,CAAb;AAEA,QAAM;AAACC,IAAAA;AAAD,MAAaJ,GAAG,CAACK,IAAvB;AAEAP,EAAAA,MAAM,CAACU,IAAP,CAAYJ,QAAZ,EAAsBF,IAAtB,EAA4B,CAACO,GAAD,EAAMD,IAAN,KAAe;AAE3C,QAAIE,GAAG,GAAC,gDAAR;AAEAA,IAAAA,GAAG,GAAChB,KAAK,CAACiB,MAAN,CAAaD,GAAb,EAAiB,CAACF,IAAD,EAAOR,GAAG,CAACmB,IAAX,CAAjB,CAAJ;AAEAvB,IAAAA,IAAI,CAACgB,KAAL,CAAWF,GAAX,EAAgB,CAACD,GAAD,EAAMI,OAAN,KAAkB;AAChC,UAAIJ,GAAJ,EAAS,OAAOZ,cAAc,CAACI,GAAD,EAAMQ,GAAN,CAArB;;AAET,UAAGI,OAAO,CAACC,YAAR,KAAyB,CAA5B,EAA+B;AAC7B,eAAOb,GAAG,CAACc,IAAJ,CAAU,yEAAV,CAAP;AACD,OAFD,MAEO;AACL,eAAOd,GAAG,CAACc,IAAJ,CAAS,kCAAT,CAAP;AACD;AAEF,KATD;AAUEC,IAAAA,OAAO,CAACC,GAAR,CAAY,OAAZ;AACD,GAjBD;AAkBD,CAxBD;;AA2BAG,MAAM,CAACC,OAAP,GAAiB;AACftB,EAAAA,cADe;AAEfmB,EAAAA;AAFe,CAAjB","sourcesContent":["const mysql = require('mysql')\nconst pool = require('../../../sql/connection')\nconst { handleSQLError } = require('../../../sql/error')\nconst bcrypt = require('bcrypt')\n\n\n//PUT\nconst updatePassword = async (req, res) => {\n\n  const salt = bcrypt.genSaltSync(10)\n\n  const {password} = req.body\n  const {email} = req.params\n\n  bcrypt.hash(password, salt, (err, hash) => {\n  \n  let sql='UPDATE appInfo SET password=? WHERE email=?'\n\n  sql=mysql.format(sql,[hash, email])\n\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err)\n\n    if(results.affectedRows === 0) {\n      return res.send(`Sorry, something went wrong, we don't seem to have that email on record`)\n    } else {\n      return res.send('Your password has now been reset')\n    }\n    \n  })\n    console.log('here?')\n  })\n}\n\nconst updateFromLogPassword = async (req, res) => {\n\n  const salt = bcrypt.genSaltSync(10)\n\n  const {password} = req.body\n\n  bcrypt.hash(password, salt, (err, hash) => {\n  \n  let sql='UPDATE appInfo SET password=? WHERE username=?'\n\n  sql=mysql.format(sql,[hash, req.user])\n\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err)\n\n    if(results.affectedRows === 0) {\n      return res.send(`Sorry, something went wrong, we don't seem to have that email on record`)\n    } else {\n      return res.send('Your password has now been reset')\n    }\n    \n  })\n    console.log('here?')\n  })\n}\n\n\nmodule.exports = {\n  updatePassword,\n  updateFromLogPassword\n\n}"]},"metadata":{},"sourceType":"script"}