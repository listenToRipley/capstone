{"ast":null,"code":"'use strict';\n\nconst url = require('url');\n\nfunction packageName(href) {\n  try {\n    let basePath = url.parse(href).pathname.substr(1);\n\n    if (!basePath.match(/^-/)) {\n      basePath = basePath.split('/');\n      var index = basePath.indexOf('_rewrite');\n\n      if (index === -1) {\n        index = basePath.length - 1;\n      } else {\n        index++;\n      }\n\n      return decodeURIComponent(basePath[index]);\n    }\n  } catch (_) {// this is ok\n  }\n}\n\nclass HttpErrorBase extends Error {\n  constructor(method, res, body, spec) {\n    super();\n    this.headers = res.headers.raw();\n    this.statusCode = res.status;\n    this.code = `E${res.status}`;\n    this.method = method;\n    this.uri = res.url;\n    this.body = body;\n    this.pkgid = spec ? spec.toString() : packageName(res.url);\n  }\n\n}\n\nmodule.exports.HttpErrorBase = HttpErrorBase;\n\nclass HttpErrorGeneral extends HttpErrorBase {\n  constructor(method, res, body, spec) {\n    super(method, res, body, spec);\n    this.message = `${res.status} ${res.statusText} - ${this.method.toUpperCase()} ${this.spec || this.uri}${body && body.error ? ' - ' + body.error : ''}`;\n    Error.captureStackTrace(this, HttpErrorGeneral);\n  }\n\n}\n\nmodule.exports.HttpErrorGeneral = HttpErrorGeneral;\n\nclass HttpErrorAuthOTP extends HttpErrorBase {\n  constructor(method, res, body, spec) {\n    super(method, res, body, spec);\n    this.message = 'OTP required for authentication';\n    this.code = 'EOTP';\n    Error.captureStackTrace(this, HttpErrorAuthOTP);\n  }\n\n}\n\nmodule.exports.HttpErrorAuthOTP = HttpErrorAuthOTP;\n\nclass HttpErrorAuthIPAddress extends HttpErrorBase {\n  constructor(method, res, body, spec) {\n    super(method, res, body, spec);\n    this.message = 'Login is not allowed from your IP address';\n    this.code = 'EAUTHIP';\n    Error.captureStackTrace(this, HttpErrorAuthIPAddress);\n  }\n\n}\n\nmodule.exports.HttpErrorAuthIPAddress = HttpErrorAuthIPAddress;\n\nclass HttpErrorAuthUnknown extends HttpErrorBase {\n  constructor(method, res, body, spec) {\n    super(method, res, body, spec);\n    this.message = 'Unable to authenticate, need: ' + res.headers.get('www-authenticate');\n    Error.captureStackTrace(this, HttpErrorAuthUnknown);\n  }\n\n}\n\nmodule.exports.HttpErrorAuthUnknown = HttpErrorAuthUnknown;","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/client/node_modules/npm/node_modules/npm-registry-fetch/errors.js"],"names":["url","require","packageName","href","basePath","parse","pathname","substr","match","split","index","indexOf","length","decodeURIComponent","_","HttpErrorBase","Error","constructor","method","res","body","spec","headers","raw","statusCode","status","code","uri","pkgid","toString","module","exports","HttpErrorGeneral","message","statusText","toUpperCase","error","captureStackTrace","HttpErrorAuthOTP","HttpErrorAuthIPAddress","HttpErrorAuthUnknown","get"],"mappings":"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","sourcesContent":["'use strict'\n\nconst url = require('url')\n\nfunction packageName (href) {\n  try {\n    let basePath = url.parse(href).pathname.substr(1)\n    if (!basePath.match(/^-/)) {\n      basePath = basePath.split('/')\n      var index = basePath.indexOf('_rewrite')\n      if (index === -1) {\n        index = basePath.length - 1\n      } else {\n        index++\n      }\n      return decodeURIComponent(basePath[index])\n    }\n  } catch (_) {\n    // this is ok\n  }\n}\n\nclass HttpErrorBase extends Error {\n  constructor (method, res, body, spec) {\n    super()\n    this.headers = res.headers.raw()\n    this.statusCode = res.status\n    this.code = `E${res.status}`\n    this.method = method\n    this.uri = res.url\n    this.body = body\n    this.pkgid = spec ? spec.toString() : packageName(res.url)\n  }\n}\nmodule.exports.HttpErrorBase = HttpErrorBase\n\nclass HttpErrorGeneral extends HttpErrorBase {\n  constructor (method, res, body, spec) {\n    super(method, res, body, spec)\n    this.message = `${res.status} ${res.statusText} - ${\n      this.method.toUpperCase()\n    } ${\n      this.spec || this.uri\n    }${\n      (body && body.error) ? ' - ' + body.error : ''\n    }`\n    Error.captureStackTrace(this, HttpErrorGeneral)\n  }\n}\nmodule.exports.HttpErrorGeneral = HttpErrorGeneral\n\nclass HttpErrorAuthOTP extends HttpErrorBase {\n  constructor (method, res, body, spec) {\n    super(method, res, body, spec)\n    this.message = 'OTP required for authentication'\n    this.code = 'EOTP'\n    Error.captureStackTrace(this, HttpErrorAuthOTP)\n  }\n}\nmodule.exports.HttpErrorAuthOTP = HttpErrorAuthOTP\n\nclass HttpErrorAuthIPAddress extends HttpErrorBase {\n  constructor (method, res, body, spec) {\n    super(method, res, body, spec)\n    this.message = 'Login is not allowed from your IP address'\n    this.code = 'EAUTHIP'\n    Error.captureStackTrace(this, HttpErrorAuthIPAddress)\n  }\n}\nmodule.exports.HttpErrorAuthIPAddress = HttpErrorAuthIPAddress\n\nclass HttpErrorAuthUnknown extends HttpErrorBase {\n  constructor (method, res, body, spec) {\n    super(method, res, body, spec)\n    this.message = 'Unable to authenticate, need: ' + res.headers.get('www-authenticate')\n    Error.captureStackTrace(this, HttpErrorAuthUnknown)\n  }\n}\nmodule.exports.HttpErrorAuthUnknown = HttpErrorAuthUnknown\n"]},"metadata":{},"sourceType":"script"}