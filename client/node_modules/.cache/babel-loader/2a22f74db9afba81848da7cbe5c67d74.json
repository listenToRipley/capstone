{"ast":null,"code":"const mysql = require('mysql');\n\nconst pool = require('../../../sql/connection');\n\nconst {\n  handleSQLError\n} = require('../../../sql/error'); //PUT\n//this path should only be available for the viewPendingReq, so the pending mean the current using has the pal role on the table.  \n\n\nconst acceptPalReq = (req, res, next) => {\n  const {\n    reqId\n  } = req.params; //this will be triggered by the pal role accepting, so all references to the pal will be the current user -> we should already know that the reqId is, so we should be able to pull information that way\n\n  let sql = 'UPDATE palListsRequests SET approved=1, active=0 WHERE palRequestId= ? ';\n  sql = mysql.format(sql, [reqId]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst updateRequesterAccess = (req, res, next) => {\n  const {\n    reqId\n  } = req.params;\n  let sql = 'INSERT INTO access (username, pantry, pantryRole, shopList, shopListRole ,palReq) VALUES ( ?, (SELECT DISTINCT pS.pantrySettingId FROM pantriesSettings AS pS JOIN palListsRequests AS pLR ON pS.owner=pLR.requesterUser WHERE pLR.requesterUser=(SELECT requesterUser FROM palListsRequests WHERE palRequestId= ? ) ), 5, (SELECT DISTINCT sLS.shopListSetId FROM shopListsSettings AS sLS JOIN palListsRequests AS pLR ON sLS.owner=pLR.requesterUser WHERE pLR.requesterUser=(SELECT requesterUser FROM palListsRequests WHERE palRequestId= ? )),5 , ? )';\n  sql = mysql.format(sql, [req.user, reqId, reqId, reqId]);\n  pool.query(sql, (err, res) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst addToRequesterPalList = (req, res, next) => {\n  const {\n    reqId\n  } = req.params;\n  let sql = 'INSERT INTO palLists (palList, username, reqId) VALUES ((SELECT palListSettingsId FROM palListsSettings WHERE owner=(SELECT requesterUser from palListsRequests WHERE palRequestId= ? )), ? , ? )';\n  sql = mysql.format(sql, [reqId, req.user, reqId]);\n  pool.query(sql, (err, res) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst addPalAccess = (req, res, next) => {\n  const {\n    reqId\n  } = req.params;\n  let sql = 'INSERT INTO access (username, pantry, pantryRole ,shopList, shopListRole, palReq) VALUES ( (SELECT requesterUser FROM palListsRequests WHERE palRequestId= ? ), (SELECT pantrySettingId FROM pantriesSettings WHERE owner= ? ), 5, (SELECT shopListSetId FROM shopListsSettings WHERE owner= ? ), 5, ?)';\n  sql = mysql.format(sql, [reqId, req.user, req.user, reqId]);\n  pool.query(sql, (err, res) => {\n    if (err) return handleSQLError(res, err);\n    next();\n  });\n};\n\nconst addToPalsPalList = (req, res, next) => {\n  const {\n    reqId\n  } = req.params;\n  let sql = 'INSERT INTO palLists (palList, username, reqId) VALUES ((SELECT palListSettingsId FROM palListsSettings WHERE owner= ? ), (SELECT requesterUser FROM palListsRequests WHERE palRequestId= ? ) , ? )';\n  sql = mysql.format(sql, [req.user, reqId, reqId]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.send('YEAH! YOU HAVE A NEW PAL!');\n  });\n};\n\nmodule.exports = {\n  acceptPalReq,\n  updateRequesterAccess,\n  addToRequesterPalList,\n  addPalAccess,\n  addToPalsPalList\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/controller/appFunc/palLists/acceptPalReq.js"],"names":["mysql","require","pool","handleSQLError","acceptPalReq","req","res","next","reqId","params","sql","format","query","err","results","updateRequesterAccess","user","addToRequesterPalList","addPalAccess","addToPalsPalList","send","module","exports"],"mappings":"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","sourcesContent":["const mysql = require('mysql')\nconst pool = require('../../../sql/connection')\nconst {handleSQLError} = require('../../../sql/error')\n\n//PUT\n//this path should only be available for the viewPendingReq, so the pending mean the current using has the pal role on the table.  \nconst acceptPalReq = (req, res, next) => {\n\nconst { reqId } = req.params\n\n//this will be triggered by the pal role accepting, so all references to the pal will be the current user -> we should already know that the reqId is, so we should be able to pull information that way\nlet sql='UPDATE palListsRequests SET approved=1, active=0 WHERE palRequestId= ? '\n\nsql=mysql.format(sql,[reqId])\n\npool.query(sql, (err, results) => {\n  if (err) return handleSQLError(res, err)\n  next()\n})\n \n}\n\nconst updateRequesterAccess = (req, res, next) => {\n\n  const { reqId } = req.params\n\n  let sql = 'INSERT INTO access (username, pantry, pantryRole, shopList, shopListRole ,palReq) VALUES ( ?, (SELECT DISTINCT pS.pantrySettingId FROM pantriesSettings AS pS JOIN palListsRequests AS pLR ON pS.owner=pLR.requesterUser WHERE pLR.requesterUser=(SELECT requesterUser FROM palListsRequests WHERE palRequestId= ? ) ), 5, (SELECT DISTINCT sLS.shopListSetId FROM shopListsSettings AS sLS JOIN palListsRequests AS pLR ON sLS.owner=pLR.requesterUser WHERE pLR.requesterUser=(SELECT requesterUser FROM palListsRequests WHERE palRequestId= ? )),5 , ? )'\n\n  sql=mysql.format(sql,[req.user, reqId, reqId, reqId])\n\npool.query(sql, (err, res) => {\n  if (err) return handleSQLError(res, err)\n  next()\n})\n \n}\n\nconst addToRequesterPalList = (req, res, next) => {\n  \n  const { reqId } = req.params\n\n  let sql = 'INSERT INTO palLists (palList, username, reqId) VALUES ((SELECT palListSettingsId FROM palListsSettings WHERE owner=(SELECT requesterUser from palListsRequests WHERE palRequestId= ? )), ? , ? )'\n\n  sql=mysql.format(sql,[ reqId, req.user, reqId ])\n\n  pool.query(sql, (err, res) => {\n    if (err) return handleSQLError(res, err)\n    next()\n  })\n   \n}\n\n\nconst addPalAccess = (req, res, next) => {\n\n  const { reqId } = req.params\n\n  let sql = 'INSERT INTO access (username, pantry, pantryRole ,shopList, shopListRole, palReq) VALUES ( (SELECT requesterUser FROM palListsRequests WHERE palRequestId= ? ), (SELECT pantrySettingId FROM pantriesSettings WHERE owner= ? ), 5, (SELECT shopListSetId FROM shopListsSettings WHERE owner= ? ), 5, ?)'\n\n  sql=mysql.format(sql,[reqId, req.user, req.user, reqId])\n \n  pool.query(sql, (err, res) => {\n    if (err) return handleSQLError(res, err)\n    next()\n  })\n\n}\n\nconst addToPalsPalList = (req, res, next) => {\n\n  const { reqId } = req.params\n\n  let sql = 'INSERT INTO palLists (palList, username, reqId) VALUES ((SELECT palListSettingsId FROM palListsSettings WHERE owner= ? ), (SELECT requesterUser FROM palListsRequests WHERE palRequestId= ? ) , ? )'\n\n  sql=mysql.format(sql,[req.user, reqId, reqId])\n\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err)\n    return res.send('YEAH! YOU HAVE A NEW PAL!')\n  })\n   \n}\n\n\nmodule.exports = {\n  acceptPalReq,\n  updateRequesterAccess,\n  addToRequesterPalList,\n  addPalAccess,\n  addToPalsPalList\n}"]},"metadata":{},"sourceType":"script"}