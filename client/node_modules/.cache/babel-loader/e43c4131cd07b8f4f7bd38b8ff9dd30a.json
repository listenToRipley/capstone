{"ast":null,"code":"import _regeneratorRuntime from\"/Users/moonbox/Documents/capstone/pantrypal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"/Users/moonbox/Documents/capstone/pantrypal/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import{YOUR_PANTRY_LIST}from'./types';export var findPantry=function findPantry(listId,pass,user){return/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(dispatch){var path,res,getResults;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:path=\"/postLogin/\".concat(user,\"/pantry/items/\").concat(listId);console.log('path',path,' and token',pass);_context.prev=2;_context.next=5;return fetch(path,{method:'GET',header:{Accept:\"application/json\",\"Content-Type\":\"application/json\",token:\"\".concat(pass)}});case 5:res=_context.sent;_context.next=8;return res.json();case 8:getResults=_context.sent;dispatch({type:YOUR_PANTRY_LIST,payload:{userPantry:{call:true,list:getResults}}});_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](2);return _context.abrupt(\"return\",('what is the error on pantry? ',{e:_context.t0}));case 15:case\"end\":return _context.stop();}}},_callee,null,[[2,12]]);}));return function(_x){return _ref.apply(this,arguments);};}();};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/client/src/redux/actions/userPantry.js"],"names":["YOUR_PANTRY_LIST","findPantry","listId","pass","user","dispatch","path","console","log","fetch","method","header","Accept","token","res","json","getResults","type","payload","userPantry","call","list","e"],"mappings":"+UAAA,OAAQA,gBAAR,KAA+B,SAA/B,CAEA,MAAO,IAAMC,CAAAA,UAAU,CAAG,QAAbA,CAAAA,UAAa,CAACC,MAAD,CAASC,IAAT,CAAeC,IAAf,iGAAwB,iBAAMC,QAAN,0IAC5CC,IAD4C,sBACvBF,IADuB,0BACFF,MADE,EAEhDK,OAAO,CAACC,GAAR,CAAY,MAAZ,CAAoBF,IAApB,CAA0B,YAA1B,CAAwCH,IAAxC,EAFgD,sCAK9BM,CAAAA,KAAK,CAACH,IAAD,CAAO,CAC1BI,MAAM,CAAE,KADkB,CAE1BC,MAAM,CAAE,CACNC,MAAM,CAAE,kBADF,CACsB,eAAiB,kBADvC,CAENC,KAAK,WAAKV,IAAL,CAFC,CAFkB,CAAP,CALyB,QAK1CW,GAL0C,qCAYvBA,CAAAA,GAAG,CAACC,IAAJ,EAZuB,QAY1CC,UAZ0C,eAc9CX,QAAQ,CAAC,CACPY,IAAI,CAAEjB,gBADC,CAEPkB,OAAO,CAAE,CACPC,UAAU,CAAE,CACVC,IAAI,CAAE,IADI,CAEVC,IAAI,CAAEL,UAFI,CADL,CAFF,CAAD,CAAR,CAd8C,kHAyBvC,gCAAiC,CAACM,CAAC,YAAF,CAzBM,wEAAxB,gEAAnB","sourcesContent":["import {YOUR_PANTRY_LIST} from './types'\n\nexport const findPantry = (listId, pass, user) => async dispatch => {\n  let path = `/postLogin/${user}/pantry/items/${listId}`\n  console.log('path', path, ' and token', pass)\n \n  try {\n    let res = await fetch(path, {\n      method: 'GET',\n      header: {\n        Accept: \"application/json\", \"Content-Type\" : \"application/json\",\n        token: `${pass}`\n      }\n    })\n    let getResults = await res.json()\n\n    dispatch({\n      type: YOUR_PANTRY_LIST,\n      payload: {\n        userPantry: {\n          call: true,\n          list: getResults\n        }\n      }\n    })\n  } catch (e) {\n    \n    return 'what is the error on pantry? ', {e}\n  }\n\n}"]},"metadata":{},"sourceType":"module"}