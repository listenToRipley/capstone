{"ast":null,"code":"import { LOGIN } from './types';\nimport moment from 'moment';\nexport const login = (username, password) => async dispatch => {\n  let path = `login/`;\n  let params = `${username.value}/${password.value}`;\n  let fullPath = `${path}${params}`.trim();\n\n  try {\n    let res = await fetch(fullPath, {\n      method: 'GET',\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\"\n      }\n    });\n    let token = await res.json();\n    console.log('res', token);\n    dispatch({\n      type: LOGIN,\n      payload: {\n        user: {\n          username: username.value,\n          password: password.value,\n          validation: true,\n          pass: token,\n          time: moment().format(\"dddd, MMMM Do YYYY, h:mm\")\n        }\n      }\n    }); //need to add error handling to incorrect login info, with good call received. \n  } catch (e) {\n    return 'what is the error? ', {\n      e\n    };\n  }\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/client/src/redux/actions/login.js"],"names":["LOGIN","moment","login","username","password","dispatch","path","params","value","fullPath","trim","res","fetch","method","headers","Accept","token","json","console","log","type","payload","user","validation","pass","time","format","e"],"mappings":"AAAA,SAAQA,KAAR,QAAoB,SAApB;AACA,OAAOC,MAAP,MAAmB,QAAnB;AAEA,OAAO,MAAMC,KAAK,GAAG,CAACC,QAAD,EAAWC,QAAX,KAAwB,MAAMC,QAAN,IAAkB;AAC7D,MAAIC,IAAI,GAAI,QAAZ;AACA,MAAIC,MAAM,GAAI,GAAEJ,QAAQ,CAACK,KAAM,IAAGJ,QAAQ,CAACI,KAAM,EAAjD;AACA,MAAIC,QAAQ,GAAI,GAAEH,IAAK,GAAEC,MAAO,EAAjB,CAAmBG,IAAnB,EAAf;;AAEE,MAAG;AACC,QAAIC,GAAG,GAAG,MAAMC,KAAK,CAACH,QAAD,EAAU;AAC7BI,MAAAA,MAAM,EAAE,KADqB;AAE7BC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AACqB,wBAAgB;AADrC;AAFoB,KAAV,CAArB;AAOA,QAAIC,KAAK,GAAG,MAAML,GAAG,CAACM,IAAJ,EAAlB;AACAC,IAAAA,OAAO,CAACC,GAAR,CAAY,KAAZ,EAAkBH,KAAlB;AACAX,IAAAA,QAAQ,CAAE;AACNe,MAAAA,IAAI,EAAEpB,KADA;AAENqB,MAAAA,OAAO,EAAE;AACPC,QAAAA,IAAI,EAAE;AACJnB,UAAAA,QAAQ,EAAEA,QAAQ,CAACK,KADf;AAEJJ,UAAAA,QAAQ,EAAEA,QAAQ,CAACI,KAFf;AAGJe,UAAAA,UAAU,EAAE,IAHR;AAIJC,UAAAA,IAAI,EAAER,KAJF;AAKJS,UAAAA,IAAI,EAAExB,MAAM,GAAGyB,MAAT,CAAgB,0BAAhB;AALF;AADC;AAFH,KAAF,CAAR,CAVD,CAsBC;AACH,GAvBD,CAwBA,OAAMC,CAAN,EAAQ;AACJ,WAAO,uBAAuB;AAACA,MAAAA;AAAD,KAA9B;AACH;AACJ,CAhCM","sourcesContent":["import {LOGIN} from './types'\nimport moment from 'moment'\n\nexport const login = (username, password) => async dispatch => {\n  let path = `login/`\n  let params = `${username.value}/${password.value}`\n  let fullPath = `${path}${params}`.trim()\n\n    try{\n        let res = await fetch(fullPath,{\n          method: 'GET',\n          headers: {\n            Accept: \"application/json\", \"Content-Type\": \"application/json\"\n          }\n        }\n        )\n        let token = await res.json() \n        console.log('res',token)\n        dispatch( {\n            type: LOGIN,\n            payload: {\n              user: {\n                username: username.value,\n                password: password.value,\n                validation: true,\n                pass: token,\n                time: moment().format(\"dddd, MMMM Do YYYY, h:mm\")\n              }\n            }\n        })\n        //need to add error handling to incorrect login info, with good call received. \n    }\n    catch(e){\n        return 'what is the error? ', {e}\n    }\n}\n\n"]},"metadata":{},"sourceType":"module"}