{"ast":null,"code":"const mysql = require('mysql');\n\nconst pool = require('../../../sql/connection');\n\nconst {\n  handleSQLError\n} = require('../../../sql/error'); //GET\n\n\nconst userPersonalInfo = (req, res) => {\n  let sql = 'SELECT aI.username, aI.password ,aI.email, uD.firstName, uD.lastName, uD.dobMonth, uD.dobDate, uD.dobYear, uD.signedUp, uL.userLocationId ,uDP.displayPrefId, pS.pantrySettingId, sLS.shopListSetId, pLS.palListSettingsId, a.accessId FROM appInfo AS aI JOIN usersDetails AS uD ON aI.username=uD.username JOIN access AS a ON aI.username=a.username JOIN usersLocations AS uL ON aI.username=uL.username JOIN usersDisplayPreferences AS uDP ON aI.username=uDP.username JOIN pantriesSettings AS pS ON a.pantry=pS.pantrySettingId JOIN shopListsSettings AS sLS ON a.shopList=sLS.shopListSetId JOIN palListsSettings AS pLS ON aI.username=pLS.owner WHERE aI.username= ? AND a.active=1 AND a.pantryRole=2 OR a.pantryRole=3 AND a.shopListRole=2 OR a.shopListRole=3 LIMIT 1';\n  sql = mysql.format(sql, [req.user]);\n  pool.query(sql, (err, row) => {\n    if (err) return handleSQLError(res, err);\n    return res.json(row);\n  });\n};\n\nconst userLocation = (req, res) => {\n  let sql = 'SELECT * FROM usersLocations WHERE username=?';\n  sql = mysql.format(sql, [req.user]);\n  pool.query(sql, (err, row) => {\n    if (err) return handleSQLError(res, err);\n    return res.json(row);\n  });\n};\n\nconst userBirthday = (req, res) => {\n  let sql = 'SELECT username, dobYear, dobMonth, dobDate FROM usersDetails WHERE username=?';\n  sql = mysql.format(sql, [req.user]);\n  pool.query(sql, (err, row) => {\n    if (err) return handleSQLError(res, err);\n    return res.json(row);\n  });\n}; //PUT\n\n\nconst updateBirthday = (req, res) => {\n  const {\n    year,\n    date,\n    month\n  } = req.body;\n  let sql = 'UPDATE usersDetails SET dobYear=COALESCE(?, dobYear), dobDate=COALESCE(?, dobDate), dobMonth=COALESCE(?, dobMonth) WHERE username=?';\n  sql = mysql.format(sql, [year, date, month, req.user]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.status(204).json();\n  });\n};\n\nconst updateEmail = (req, res) => {\n  //should have validation the email doesn't currently exist in the system to prevent conflicts\n  const {\n    email\n  } = req.body;\n  let sql = 'UPDATE appInfo SET email=? WHERE username=?';\n  sql = mysql.format(sql, [email, req.user]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.status(204).json();\n  });\n};\n\nconst updateLocation = (req, res) => {\n  const {\n    address,\n    city,\n    state,\n    zip,\n    country\n  } = req.body;\n  let sql = 'UPDATE usersLocations SET address=COALESCE(?, address), city=COALESCE(?, city), state=COALESCE(?, state), zipcode=COALESCE(?, zipcode), country=COALESCE(?,country) WHERE username=?';\n  sql = mysql.format(sql, [address, city, state, zip, country, req.user]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.status(204).json();\n  });\n};\n\nconst updatePhoneNum = (req, res) => {\n  const {\n    phone\n  } = req.body;\n  let sql = 'UPDATE usersDetails SET phone=? WHERE username=?';\n  sql = mysql.format(sql, [phone, req.user]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.status(204).json();\n  });\n};\n\nmodule.exports = {\n  userPersonalInfo,\n  userLocation,\n  userBirthday,\n  updateBirthday,\n  updateEmail,\n  updateLocation,\n  updatePhoneNum\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/controller/users/information/info.js"],"names":["mysql","require","pool","handleSQLError","userPersonalInfo","req","res","sql","format","user","query","err","row","json","userLocation","userBirthday","updateBirthday","year","date","month","body","results","status","updateEmail","email","updateLocation","address","city","state","zip","country","updatePhoneNum","phone","module","exports"],"mappings":"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","sourcesContent":["const mysql = require('mysql')\nconst pool = require('../../../sql/connection')\nconst { handleSQLError } = require('../../../sql/error')\n\n//GET\nconst userPersonalInfo = (req, res) => {\n\n  let sql = 'SELECT aI.username, aI.password ,aI.email, uD.firstName, uD.lastName, uD.dobMonth, uD.dobDate, uD.dobYear, uD.signedUp, uL.userLocationId ,uDP.displayPrefId, pS.pantrySettingId, sLS.shopListSetId, pLS.palListSettingsId, a.accessId FROM appInfo AS aI JOIN usersDetails AS uD ON aI.username=uD.username JOIN access AS a ON aI.username=a.username JOIN usersLocations AS uL ON aI.username=uL.username JOIN usersDisplayPreferences AS uDP ON aI.username=uDP.username JOIN pantriesSettings AS pS ON a.pantry=pS.pantrySettingId JOIN shopListsSettings AS sLS ON a.shopList=sLS.shopListSetId JOIN palListsSettings AS pLS ON aI.username=pLS.owner WHERE aI.username= ? AND a.active=1 AND a.pantryRole=2 OR a.pantryRole=3 AND a.shopListRole=2 OR a.shopListRole=3 LIMIT 1'\n \n  sql=mysql.format(sql, [req.user])\n\n  pool.query(sql, (err, row) => {\n    if(err) return handleSQLError(res, err)\n    return res.json(row); \n  })\n}\n\nconst userLocation = (req, res) => {\n\n  let sql = 'SELECT * FROM usersLocations WHERE username=?'\n\n  sql=mysql.format(sql,[req.user])\n\n  pool.query(sql, (err, row) => {\n    if(err) return handleSQLError(res, err)\n    return res.json(row); \n  })  \n\n}\n\nconst userBirthday = (req, res) => {\n\n  let sql = 'SELECT username, dobYear, dobMonth, dobDate FROM usersDetails WHERE username=?'\n\n  sql=mysql.format(sql,[req.user])\n\n  pool.query(sql, (err, row) => {\n    if(err) return handleSQLError(res, err)\n    return res.json(row); \n  })  \n\n}\n\n\n//PUT\nconst updateBirthday = (req, res) => {\n\n  const {year, date, month} = req.body\n\n  let sql='UPDATE usersDetails SET dobYear=COALESCE(?, dobYear), dobDate=COALESCE(?, dobDate), dobMonth=COALESCE(?, dobMonth) WHERE username=?'\n\n  sql=mysql.format(sql,[year, date, month, req.user])\n\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err)\n    return res.status(204).json();\n  })\n\n}\nconst updateEmail = (req, res) => {\n  //should have validation the email doesn't currently exist in the system to prevent conflicts\n\n  const {email} = req.body\n\n  let sql='UPDATE appInfo SET email=? WHERE username=?'\n\n  sql=mysql.format(sql,[email, req.user])\n\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err)\n    return res.status(204).json();\n  })\n\n}\n\nconst updateLocation = (req, res) => {\n\n  const {address, city, state, zip, country} = req.body\n\n  let sql='UPDATE usersLocations SET address=COALESCE(?, address), city=COALESCE(?, city), state=COALESCE(?, state), zipcode=COALESCE(?, zipcode), country=COALESCE(?,country) WHERE username=?'\n\n  sql=mysql.format(sql,[address, city, state, zip, country, req.user])\n\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err)\n    return res.status(204).json();\n  })\n\n}\n\nconst updatePhoneNum = (req, res) => {\n\n  const {phone} = req.body\n\n  let sql='UPDATE usersDetails SET phone=? WHERE username=?'\n\n  sql=mysql.format(sql,[phone , req.user])\n\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err)\n    return res.status(204).json();\n  })\n\n}\n\n\nmodule.exports = {\n  userPersonalInfo,\n  userLocation,\n  userBirthday,\n  updateBirthday, \n  updateEmail,\n  updateLocation,\n  updatePhoneNum\n}"]},"metadata":{},"sourceType":"script"}