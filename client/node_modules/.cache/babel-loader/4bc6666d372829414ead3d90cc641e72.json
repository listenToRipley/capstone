{"ast":null,"code":"const mysql = require('mysql');\n\nconst pool = require('../../sql/connection');\n\nconst {\n  handleSQLError\n} = require('../../sql/error'); //GET\n\n\nconst allUsers = (req, res) => {\n  let sql = 'SELECT aI.username, uD.firstName, aI.email, aI.active, uD.signedUp FROM appInfo AS aI JOIN usersDetails AS uD ON aI.username=uD.username JOIN usersDisplayPreferences AS uDP ON aI.username=uDP.username WHERE aI.active=1 AND uDP.private=0';\n  sql = mysql.format(sql, []);\n  pool.query(sql, (err, rows) => {\n    if (err) return handleSQLError(res, err);\n    return res.json(rows);\n  });\n};\n\nconst searchUsers = (req, res) => {\n  let {\n    find\n  } = req.body;\n  let sql = 'SELECT aI.username, uD.firstName, aI.email, aI.active, uD.signedUp FROM appInfo AS aI JOIN usersDetails AS uD ON aI.username=uD.username JOIN usersDisplayPreferences AS uDP ON aI.username=uDP.username WHERE aI.active=1 AND uDP.private=0 AND aI.username LIKE ? OR aI.email LIKE ?';\n  sql = mysql.format(sql, [find, find]);\n  pool.query(sql, (err, rows) => {\n    if (err) return handleSQLError(res, err);\n    return res.json(rows);\n  });\n};\n\nconst allAllergies = (req, res) => {\n  pool.query('SELECT * FROM allergies', (err, rows) => {\n    if (err) return handleSQLError(res, err);\n    return res.json(rows);\n  });\n};\n\nconst allDiets = (req, res) => {\n  pool.query('SELECT * FROM diets', (err, rows) => {\n    if (err) return handleSQLError(res, err);\n    return res.json(rows);\n  });\n}; //don't have get measurements... oh bother\n//POST\n\n\nconst addMeasurement = (req, res) => {\n  const {\n    short,\n    size\n  } = req.body;\n  let sql = 'INSERT INTO measurements (short, size) VALUES (UPPER(?),?)';\n  sql = mysql.format(sql, [short, size]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.json({\n      newMeasId: results.insertId\n    });\n  });\n};\n\nconst addAllergy = (req, res) => {\n  let sql = 'INSERT INTO allergies (allergy) VALUES (?)';\n  sql = mysql.format(sql, [req.body.allergy]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.json({\n      newAllergyId: results.insertId\n    });\n  });\n};\n\nconst addDiet = (req, res) => {\n  let sql = 'INSERT INTO diets (diet) VALUES (?)';\n  sql = mysql.format(sql, [req.body.diet]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.json({\n      newDietId: results.insertId\n    });\n  });\n};\n\nmodule.exports = {\n  allUsers,\n  searchUsers,\n  allAllergies,\n  allDiets,\n  addMeasurement,\n  addAllergy,\n  addDiet\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/controller/appFunc/util.js"],"names":["mysql","require","pool","handleSQLError","allUsers","req","res","sql","format","query","err","rows","json","searchUsers","find","body","allAllergies","allDiets","addMeasurement","short","size","results","newMeasId","insertId","addAllergy","allergy","newAllergyId","addDiet","diet","newDietId","module","exports"],"mappings":"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","sourcesContent":["const mysql = require('mysql')\nconst pool = require('../../sql/connection')\nconst { handleSQLError } = require('../../sql/error')\n\n//GET\nconst allUsers = (req, res) => {\n  \n  let sql= 'SELECT aI.username, uD.firstName, aI.email, aI.active, uD.signedUp FROM appInfo AS aI JOIN usersDetails AS uD ON aI.username=uD.username JOIN usersDisplayPreferences AS uDP ON aI.username=uDP.username WHERE aI.active=1 AND uDP.private=0'\n\n  sql= mysql.format(sql, [])\n\n  pool.query(sql, (err, rows) => {\n    if(err) return handleSQLError(res, err)\n    return res.json(rows); \n  })\n}\n\nconst searchUsers = (req, res) => {\n  \n  let {find} = req.body\n\n  let sql= 'SELECT aI.username, uD.firstName, aI.email, aI.active, uD.signedUp FROM appInfo AS aI JOIN usersDetails AS uD ON aI.username=uD.username JOIN usersDisplayPreferences AS uDP ON aI.username=uDP.username WHERE aI.active=1 AND uDP.private=0 AND aI.username LIKE ? OR aI.email LIKE ?'\n\n  sql= mysql.format(sql, [find, find])\n\n  pool.query(sql, (err, rows) => {\n\n    if(err) return handleSQLError(res, err)\n    return res.json(rows); \n  })\n}\n\nconst allAllergies = (req, res) => {\n  \n    pool.query('SELECT * FROM allergies', (err, rows) => {\n      if (err) return handleSQLError(res, err)\n      return res.json(rows);\n    })\n  }\n  \nconst allDiets = (req, res) => {\n  \n    pool.query('SELECT * FROM diets', (err, rows) => {\n      if (err) return handleSQLError(res, err)\n      return res.json(rows);\n    })\n  }\n\n//don't have get measurements... oh bother\n\n//POST\nconst addMeasurement = (req, res) => {\n\n  const {short, size} = req.body\n\n  let sql='INSERT INTO measurements (short, size) VALUES (UPPER(?),?)'\n\n  sql=mysql.format(sql,[short, size])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    return res.json({newMeasId: results.insertId});\n  })\n}\n\nconst addAllergy = (req, res) => {\n\n  let sql='INSERT INTO allergies (allergy) VALUES (?)'\n\n  sql= mysql.format(sql, [req.body.allergy])\n\n  pool.query(sql, (err, results) => {\n    \n    if(err) return handleSQLError(res, err)\n    return res.json( { newAllergyId: results.insertId} );\n  })\n}\n\nconst addDiet = (req, res) => {\n\n  let sql='INSERT INTO diets (diet) VALUES (?)'\n  sql=mysql.format(sql,[req.body.diet])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    return res.json( { newDietId: results.insertId} );\n  })\n}\n\nmodule.exports = {\n  allUsers,\n  searchUsers,\n  allAllergies, \n  allDiets,\n  addMeasurement,\n  addAllergy,\n  addDiet\n }"]},"metadata":{},"sourceType":"script"}