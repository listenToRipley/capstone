{"ast":null,"code":"const mysql = require('mysql');\n\nconst pool = require('../../../sql/connection');\n\nconst {\n  handleSQLError\n} = require('../../../sql/error'); //GET \n\n\nconst viewSentReq = (req, res) => {\n  sql = 'SELECT palRequestId, pal FROM palListsRequests WHERE active=1 AND requesterUser=?';\n  sql = mysql.format(sql, [req.user]);\n  pool.query(sql, (err, row) => {\n    if (err) handleSQLError(res, err);\n    return res.json(row);\n  });\n}; //this will be associated with the ability to accept! \n\n\nconst viewPendingReq = (req, res) => {\n  //this are request sent by another user and can be approved.\n  sql = 'SELECT palRequestId, requesterUser FROM palListsRequests WHERE active=1 AND pal=?';\n  sql = mysql.format(sql, [req.user]);\n  pool.query(sql, (err, row) => {\n    if (err) handleSQLError(res, err);\n    return res.json(row);\n  });\n}; //POST\n\n\nconst sendPalReq = (req, res) => {\n  const {\n    askingUser\n  } = req.body; //write a query for approving or rejects a request \n\n  sql = 'INSERT INTO palListsRequests (requesterUser, pal) VALUES (?, ?)';\n  sql = mysql.format(sql, [req.user, askingUser]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.json({\n      palRequestId: results.insertId\n    });\n  });\n}; //PUT\n\n\nconst declinePalReq = (req, res) => {\n  const {\n    reqId\n  } = req.body;\n  let sql = 'UPDATE palListsRequests SET approved=0, active=0 WHERE palRequestId=?';\n  sql = mysql.format(sql, [reqId]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.status(204).json();\n  });\n};\n\nmodule.exports = {\n  viewPendingReq,\n  viewSentReq,\n  sendPalReq,\n  declinePalReq\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/controller/appFunc/palLists/requests.js"],"names":["mysql","require","pool","handleSQLError","viewSentReq","req","res","sql","format","user","query","err","row","json","viewPendingReq","sendPalReq","askingUser","body","results","palRequestId","insertId","declinePalReq","reqId","status","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,yBAAD,CAApB;;AACA,MAAM;AAACE,EAAAA;AAAD,IAAmBF,OAAO,CAAC,oBAAD,CAAhC,C,CAEA;;;AACA,MAAMG,WAAW,GAAG,CAACC,GAAD,EAAMC,GAAN,KAAc;AAEhCC,EAAAA,GAAG,GAAC,mFAAJ;AAEAA,EAAAA,GAAG,GAACP,KAAK,CAACQ,MAAN,CAAaD,GAAb,EAAkB,CAACF,GAAG,CAACI,IAAL,CAAlB,CAAJ;AAEAP,EAAAA,IAAI,CAACQ,KAAL,CAAWH,GAAX,EAAgB,CAACI,GAAD,EAAMC,GAAN,KAAc;AAC5B,QAAGD,GAAH,EAAQR,cAAc,CAACG,GAAD,EAAMK,GAAN,CAAd;AACR,WAAOL,GAAG,CAACO,IAAJ,CAASD,GAAT,CAAP;AACD,GAHD;AAID,CAVD,C,CAYA;;;AACA,MAAME,cAAc,GAAG,CAACT,GAAD,EAAMC,GAAN,KAAc;AACnC;AACAC,EAAAA,GAAG,GAAC,mFAAJ;AAEAA,EAAAA,GAAG,GAACP,KAAK,CAACQ,MAAN,CAAaD,GAAb,EAAkB,CAACF,GAAG,CAACI,IAAL,CAAlB,CAAJ;AAEAP,EAAAA,IAAI,CAACQ,KAAL,CAAWH,GAAX,EAAgB,CAACI,GAAD,EAAMC,GAAN,KAAc;AAC5B,QAAGD,GAAH,EAAQR,cAAc,CAACG,GAAD,EAAMK,GAAN,CAAd;AACR,WAAOL,GAAG,CAACO,IAAJ,CAASD,GAAT,CAAP;AACD,GAHD;AAKD,CAXD,C,CAaA;;;AACA,MAAMG,UAAU,GAAG,CAACV,GAAD,EAAMC,GAAN,KAAc;AAE/B,QAAM;AAACU,IAAAA;AAAD,MAAgBX,GAAG,CAACY,IAA1B,CAF+B,CAGjC;;AACAV,EAAAA,GAAG,GAAC,iEAAJ;AAEAA,EAAAA,GAAG,GAACP,KAAK,CAACQ,MAAN,CAAaD,GAAb,EAAiB,CAACF,GAAG,CAACI,IAAL,EAAWO,UAAX,CAAjB,CAAJ;AAEAd,EAAAA,IAAI,CAACQ,KAAL,CAAWH,GAAX,EAAgB,CAACI,GAAD,EAAMO,OAAN,KAAkB;AAChC,QAAGP,GAAH,EAAQ,OAAOR,cAAc,CAACG,GAAD,EAAMK,GAAN,CAArB;AACR,WAAOL,GAAG,CAACO,IAAJ,CAAU;AAAEM,MAAAA,YAAY,EAAED,OAAO,CAACE;AAAxB,KAAV,CAAP;AACD,GAHD;AAKC,CAbD,C,CAeA;;;AAEA,MAAMC,aAAa,GAAG,CAAChB,GAAD,EAAMC,GAAN,KAAc;AAEpC,QAAM;AAACgB,IAAAA;AAAD,MAAUjB,GAAG,CAACY,IAApB;AAEA,MAAIV,GAAG,GAAC,uEAAR;AAEAA,EAAAA,GAAG,GAAEP,KAAK,CAACQ,MAAN,CAAaD,GAAb,EAAkB,CAACe,KAAD,CAAlB,CAAL;AAEApB,EAAAA,IAAI,CAACQ,KAAL,CAAWH,GAAX,EAAgB,CAACI,GAAD,EAAMO,OAAN,KAAkB;AAChC,QAAGP,GAAH,EAAQ,OAAOR,cAAc,CAACG,GAAD,EAAMK,GAAN,CAArB;AACR,WAAOL,GAAG,CAACiB,MAAJ,CAAW,GAAX,EAAgBV,IAAhB,EAAP;AACD,GAHD;AAKC,CAbD;;AAeAW,MAAM,CAACC,OAAP,GAAiB;AACfX,EAAAA,cADe;AAEfV,EAAAA,WAFe;AAGfW,EAAAA,UAHe;AAIfM,EAAAA;AAJe,CAAjB","sourcesContent":["const mysql = require('mysql')\nconst pool = require('../../../sql/connection')\nconst {handleSQLError} = require('../../../sql/error')\n\n//GET \nconst viewSentReq = (req, res) => {\n\n  sql='SELECT palRequestId, pal FROM palListsRequests WHERE active=1 AND requesterUser=?'\n\n  sql=mysql.format(sql, [req.user])\n\n  pool.query(sql, (err, row) => {\n    if(err) handleSQLError(res, err)\n    return res.json(row)\n  })\n}\n\n//this will be associated with the ability to accept! \nconst viewPendingReq = (req, res) => {\n  //this are request sent by another user and can be approved.\n  sql='SELECT palRequestId, requesterUser FROM palListsRequests WHERE active=1 AND pal=?'\n\n  sql=mysql.format(sql, [req.user])\n\n  pool.query(sql, (err, row) => {\n    if(err) handleSQLError(res, err)\n    return res.json(row)\n  })\n  \n}\n\n//POST\nconst sendPalReq = (req, res) => {\n\n  const {askingUser } = req.body\n//write a query for approving or rejects a request \nsql='INSERT INTO palListsRequests (requesterUser, pal) VALUES (?, ?)'\n\nsql=mysql.format(sql,[req.user, askingUser ])\n\npool.query(sql, (err, results) => {\n  if(err) return handleSQLError(res, err)\n  return res.json( { palRequestId: results.insertId} )\n})  \n\n}\n\n//PUT\n\nconst declinePalReq = (req, res) => { \n\nconst {reqId} = req.body\n\nlet sql='UPDATE palListsRequests SET approved=0, active=0 WHERE palRequestId=?'\n\nsql= mysql.format(sql, [reqId])\n\npool.query(sql, (err, results) => {\n  if(err) return handleSQLError(res, err)\n  return res.status(204).json(); \n})\n\n}\n\nmodule.exports = {\n  viewPendingReq,\n  viewSentReq,\n  sendPalReq,\n  declinePalReq\n}"]},"metadata":{},"sourceType":"script"}