{"ast":null,"code":"'use strict';\n/**\n * request.js\n *\n * Request class contains server only options\n */\n\nconst url = require('url');\n\nconst Headers = require('./headers.js');\n\nconst Body = require('./body.js');\n\nconst clone = Body.clone;\nconst extractContentType = Body.extractContentType;\nconst getTotalBytes = Body.getTotalBytes;\nconst PARSED_URL = Symbol('url');\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\n\nclass Request {\n  constructor(input, init) {\n    if (!init) init = {};\n    let parsedURL; // normalize input\n\n    if (!(input instanceof Request)) {\n      if (input && input.href) {\n        // in order to support Node.js' Url objects; though WHATWG's URL objects\n        // will fall into this branch also (since their `toString()` will return\n        // `href` property anyway)\n        parsedURL = url.parse(input.href);\n      } else {\n        // coerce input to a string before attempting to parse\n        parsedURL = url.parse(`${input}`);\n      }\n\n      input = {};\n    } else {\n      parsedURL = url.parse(input.url);\n    }\n\n    let method = init.method || input.method || 'GET';\n\n    if ((init.body != null || input instanceof Request && input.body !== null) && (method === 'GET' || method === 'HEAD')) {\n      throw new TypeError('Request with GET/HEAD method cannot have body');\n    }\n\n    let inputBody = init.body != null ? init.body : input instanceof Request && input.body !== null ? clone(input) : null;\n    Body.call(this, inputBody, {\n      timeout: init.timeout || input.timeout || 0,\n      size: init.size || input.size || 0\n    }); // fetch spec options\n\n    this.method = method.toUpperCase();\n    this.redirect = init.redirect || input.redirect || 'follow';\n    this.headers = new Headers(init.headers || input.headers || {});\n\n    if (init.body != null) {\n      const contentType = extractContentType(this);\n\n      if (contentType !== null && !this.headers.has('Content-Type')) {\n        this.headers.append('Content-Type', contentType);\n      }\n    } // server only options\n\n\n    this.follow = init.follow !== undefined ? init.follow : input.follow !== undefined ? input.follow : 20;\n    this.compress = init.compress !== undefined ? init.compress : input.compress !== undefined ? input.compress : true;\n    this.counter = init.counter || input.counter || 0;\n    this.agent = init.agent || input.agent;\n    this[PARSED_URL] = parsedURL;\n    Object.defineProperty(this, Symbol.toStringTag, {\n      value: 'Request',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    });\n  }\n\n  get url() {\n    return url.format(this[PARSED_URL]);\n  }\n  /**\n   * Clone this request\n   *\n   * @return  Request\n   */\n\n\n  clone() {\n    return new Request(this);\n  }\n\n}\n\nBody.mixIn(Request.prototype);\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n  value: 'RequestPrototype',\n  writable: false,\n  enumerable: false,\n  configurable: true\n});\nexports = module.exports = Request;\n\nexports.getNodeRequestOptions = function getNodeRequestOptions(request) {\n  const parsedURL = request[PARSED_URL];\n  const headers = new Headers(request.headers); // fetch step 3\n\n  if (!headers.has('Accept')) {\n    headers.set('Accept', '*/*');\n  } // Basic fetch\n\n\n  if (!parsedURL.protocol || !parsedURL.hostname) {\n    throw new TypeError('Only absolute URLs are supported');\n  }\n\n  if (!/^https?:$/.test(parsedURL.protocol)) {\n    throw new TypeError('Only HTTP(S) protocols are supported');\n  } // HTTP-network-or-cache fetch steps 5-9\n\n\n  let contentLengthValue = null;\n\n  if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n    contentLengthValue = '0';\n  }\n\n  if (request.body != null) {\n    const totalBytes = getTotalBytes(request);\n\n    if (typeof totalBytes === 'number') {\n      contentLengthValue = String(totalBytes);\n    }\n  }\n\n  if (contentLengthValue) {\n    headers.set('Content-Length', contentLengthValue);\n  } // HTTP-network-or-cache fetch step 12\n\n\n  if (!headers.has('User-Agent')) {\n    headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)');\n  } // HTTP-network-or-cache fetch step 16\n\n\n  if (request.compress) {\n    headers.set('Accept-Encoding', 'gzip,deflate');\n  }\n\n  if (!headers.has('Connection') && !request.agent) {\n    headers.set('Connection', 'close');\n  } // HTTP-network fetch step 4\n  // chunked encoding is handled by Node.js\n\n\n  return Object.assign({}, parsedURL, {\n    method: request.method,\n    headers: headers.raw(),\n    agent: request.agent\n  });\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/npm/node_modules/node-fetch-npm/src/request.js"],"names":["url","require","Headers","Body","clone","extractContentType","getTotalBytes","PARSED_URL","Symbol","Request","constructor","input","init","parsedURL","href","parse","method","body","TypeError","inputBody","call","timeout","size","toUpperCase","redirect","headers","contentType","has","append","follow","undefined","compress","counter","agent","Object","defineProperty","toStringTag","value","writable","enumerable","configurable","format","mixIn","prototype","exports","module","getNodeRequestOptions","request","set","protocol","hostname","test","contentLengthValue","totalBytes","String","assign","raw"],"mappings":"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","sourcesContent":["'use strict'\n\n/**\n * request.js\n *\n * Request class contains server only options\n */\n\nconst url = require('url')\nconst Headers = require('./headers.js')\nconst Body = require('./body.js')\nconst clone = Body.clone\nconst extractContentType = Body.extractContentType\nconst getTotalBytes = Body.getTotalBytes\n\nconst PARSED_URL = Symbol('url')\n\n/**\n * Request class\n *\n * @param   Mixed   input  Url or Request instance\n * @param   Object  init   Custom options\n * @return  Void\n */\nclass Request {\n  constructor (input, init) {\n    if (!init) init = {}\n    let parsedURL\n\n    // normalize input\n    if (!(input instanceof Request)) {\n      if (input && input.href) {\n        // in order to support Node.js' Url objects; though WHATWG's URL objects\n        // will fall into this branch also (since their `toString()` will return\n        // `href` property anyway)\n        parsedURL = url.parse(input.href)\n      } else {\n        // coerce input to a string before attempting to parse\n        parsedURL = url.parse(`${input}`)\n      }\n      input = {}\n    } else {\n      parsedURL = url.parse(input.url)\n    }\n\n    let method = init.method || input.method || 'GET'\n\n    if ((init.body != null || (input instanceof Request && input.body !== null)) &&\n      (method === 'GET' || method === 'HEAD')) {\n      throw new TypeError('Request with GET/HEAD method cannot have body')\n    }\n\n    let inputBody = init.body != null\n      ? init.body\n      : input instanceof Request && input.body !== null\n        ? clone(input)\n        : null\n\n    Body.call(this, inputBody, {\n      timeout: init.timeout || input.timeout || 0,\n      size: init.size || input.size || 0\n    })\n\n    // fetch spec options\n    this.method = method.toUpperCase()\n    this.redirect = init.redirect || input.redirect || 'follow'\n    this.headers = new Headers(init.headers || input.headers || {})\n\n    if (init.body != null) {\n      const contentType = extractContentType(this)\n      if (contentType !== null && !this.headers.has('Content-Type')) {\n        this.headers.append('Content-Type', contentType)\n      }\n    }\n\n    // server only options\n    this.follow = init.follow !== undefined\n      ? init.follow : input.follow !== undefined\n      ? input.follow : 20\n    this.compress = init.compress !== undefined\n      ? init.compress : input.compress !== undefined\n      ? input.compress : true\n    this.counter = init.counter || input.counter || 0\n    this.agent = init.agent || input.agent\n\n    this[PARSED_URL] = parsedURL\n    Object.defineProperty(this, Symbol.toStringTag, {\n      value: 'Request',\n      writable: false,\n      enumerable: false,\n      configurable: true\n    })\n  }\n\n  get url () {\n    return url.format(this[PARSED_URL])\n  }\n\n  /**\n   * Clone this request\n   *\n   * @return  Request\n   */\n  clone () {\n    return new Request(this)\n  }\n}\n\nBody.mixIn(Request.prototype)\n\nObject.defineProperty(Request.prototype, Symbol.toStringTag, {\n  value: 'RequestPrototype',\n  writable: false,\n  enumerable: false,\n  configurable: true\n})\n\nexports = module.exports = Request\n\nexports.getNodeRequestOptions = function getNodeRequestOptions (request) {\n  const parsedURL = request[PARSED_URL]\n  const headers = new Headers(request.headers)\n\n  // fetch step 3\n  if (!headers.has('Accept')) {\n    headers.set('Accept', '*/*')\n  }\n\n  // Basic fetch\n  if (!parsedURL.protocol || !parsedURL.hostname) {\n    throw new TypeError('Only absolute URLs are supported')\n  }\n\n  if (!/^https?:$/.test(parsedURL.protocol)) {\n    throw new TypeError('Only HTTP(S) protocols are supported')\n  }\n\n  // HTTP-network-or-cache fetch steps 5-9\n  let contentLengthValue = null\n  if (request.body == null && /^(POST|PUT)$/i.test(request.method)) {\n    contentLengthValue = '0'\n  }\n  if (request.body != null) {\n    const totalBytes = getTotalBytes(request)\n    if (typeof totalBytes === 'number') {\n      contentLengthValue = String(totalBytes)\n    }\n  }\n  if (contentLengthValue) {\n    headers.set('Content-Length', contentLengthValue)\n  }\n\n  // HTTP-network-or-cache fetch step 12\n  if (!headers.has('User-Agent')) {\n    headers.set('User-Agent', 'node-fetch/1.0 (+https://github.com/bitinn/node-fetch)')\n  }\n\n  // HTTP-network-or-cache fetch step 16\n  if (request.compress) {\n    headers.set('Accept-Encoding', 'gzip,deflate')\n  }\n  if (!headers.has('Connection') && !request.agent) {\n    headers.set('Connection', 'close')\n  }\n\n  // HTTP-network fetch step 4\n  // chunked encoding is handled by Node.js\n\n  return Object.assign({}, parsedURL, {\n    method: request.method,\n    headers: headers.raw(),\n    agent: request.agent\n  })\n}\n"]},"metadata":{},"sourceType":"script"}