{"ast":null,"code":"const mysql = require('mysql');\n\nconst pool = require('../sql/connection');\n\nconst {\n  handleSQLError\n} = require('../sql/error');\n\nconst bcrypt = require('bcrypt');\n\nconst moment = require('moment');\n\nconst jwt = require('jsonwebtoken');\n\nconst auth = (req, res, next) => {\n  const token = req.header('token'); //save this a cookie in the future\n\n  try {\n    const decodedToken = jwt.verify(token, 'pals');\n    req.user = decodedToken.username;\n    next();\n  } catch {\n    res.send('Unauthorized ');\n  }\n}; //this is future state item, disregard for now \n\n\nconst mou = (req, res, next) => {\n  const user = require.header('username');\n\n  const password = require.header('password');\n\n  sql = ' SELECT COUNT(aI.username) FROM appInfo AS aI JOIN access AS a ON aI.username=a.username WHERE a.shopListRole AND a.pantryRole=1 AND aI.username= ? AND password= ?';\n  sql = mysql.format(sql, [user, password]);\n  pool.query(sql, (err, row) => {\n    if (err) handleSQLError(res, err);\n    let total = row[0]['COUNT(aI.username)'];\n\n    if (total === 1) {\n      next();\n    } else {\n      res.send('Unauthorized ');\n    }\n  });\n};\n\nmodule.exports = {\n  auth,\n  mou\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/middleware/authentication.js"],"names":["mysql","require","pool","handleSQLError","bcrypt","moment","jwt","auth","req","res","next","token","header","decodedToken","verify","user","username","send","mou","password","sql","format","query","err","row","total","module","exports"],"mappings":"AAAA,MAAMA,KAAK,GAAGC,OAAO,CAAC,OAAD,CAArB;;AACA,MAAMC,IAAI,GAAGD,OAAO,CAAC,mBAAD,CAApB;;AACA,MAAM;AAACE,EAAAA;AAAD,IAAmBF,OAAO,CAAC,cAAD,CAAhC;;AACA,MAAMG,MAAM,GAAGH,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMI,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAAtB;;AACA,MAAMK,GAAG,GAAGL,OAAO,CAAC,cAAD,CAAnB;;AAEA,MAAMM,IAAI,GAAG,CAACC,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC/B,QAAMC,KAAK,GAAGH,GAAG,CAACI,MAAJ,CAAW,OAAX,CAAd,CAD+B,CACG;;AAElC,MAAI;AACF,UAAMC,YAAY,GAAGP,GAAG,CAACQ,MAAJ,CAAWH,KAAX,EAAkB,MAAlB,CAArB;AACAH,IAAAA,GAAG,CAACO,IAAJ,GAAWF,YAAY,CAACG,QAAxB;AACAN,IAAAA,IAAI;AACL,GAJD,CAIE,MAAM;AACND,IAAAA,GAAG,CAACQ,IAAJ,CAAS,eAAT;AACD;AACF,CAVD,C,CAYA;;;AACA,MAAMC,GAAG,GAAG,CAACV,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC9B,QAAMK,IAAI,GAAGd,OAAO,CAACW,MAAR,CAAe,UAAf,CAAb;;AACA,QAAMO,QAAQ,GAAGlB,OAAO,CAACW,MAAR,CAAe,UAAf,CAAjB;;AAEAQ,EAAAA,GAAG,GAAC,qKAAJ;AAEAA,EAAAA,GAAG,GAAGpB,KAAK,CAACqB,MAAN,CAAaD,GAAb,EAAkB,CAACL,IAAD,EAAOI,QAAP,CAAlB,CAAN;AAEAjB,EAAAA,IAAI,CAACoB,KAAL,CAAWF,GAAX,EAAgB,CAACG,GAAD,EAAMC,GAAN,KAAc;AAC5B,QAAGD,GAAH,EAAQpB,cAAc,CAACM,GAAD,EAAMc,GAAN,CAAd;AACR,QAAIE,KAAK,GAAGD,GAAG,CAAC,CAAD,CAAH,CAAO,oBAAP,CAAZ;;AACA,QAAGC,KAAK,KAAG,CAAX,EAAc;AACZf,MAAAA,IAAI;AACL,KAFD,MAEO;AACLD,MAAAA,GAAG,CAACQ,IAAJ,CAAS,eAAT;AACD;AAEF,GATD;AAUD,CAlBD;;AAoBAS,MAAM,CAACC,OAAP,GAAiB;AACfpB,EAAAA,IADe;AAEfW,EAAAA;AAFe,CAAjB","sourcesContent":["const mysql = require('mysql')\nconst pool = require('../sql/connection')\nconst {handleSQLError} = require('../sql/error')\nconst bcrypt = require('bcrypt')\nconst moment = require('moment')\nconst jwt = require('jsonwebtoken')\n\nconst auth = (req, res, next) => {\n  const token = req.header('token') //save this a cookie in the future\n  \n  try {\n    const decodedToken = jwt.verify(token, 'pals')\n    req.user = decodedToken.username\n    next()\n  } catch {\n    res.send('Unauthorized ')\n  }\n}\n\n//this is future state item, disregard for now \nconst mou = (req, res, next) => {\n  const user = require.header('username')\n  const password = require.header('password')\n\n  sql=' SELECT COUNT(aI.username) FROM appInfo AS aI JOIN access AS a ON aI.username=a.username WHERE a.shopListRole AND a.pantryRole=1 AND aI.username= ? AND password= ?'\n  \n  sql = mysql.format(sql, [user, password])\n\n  pool.query(sql, (err, row) => {\n    if(err) handleSQLError(res, err)\n    let total = row[0]['COUNT(aI.username)']\n    if(total===1) {\n      next()\n    } else {\n      res.send('Unauthorized ')\n    }\n\n  })\n}\n\nmodule.exports = {\n  auth,\n  mou\n}"]},"metadata":{},"sourceType":"script"}