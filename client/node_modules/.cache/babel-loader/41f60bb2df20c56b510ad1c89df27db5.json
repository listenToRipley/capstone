{"ast":null,"code":"const mysql = require('mysql');\n\nconst pool = require('../../../sql/connection');\n\nconst {\n  handleSQLError\n} = require('../../../sql/error'); //GET\n//POST\n\n\nconst autoAddToPantry = (req, res) => {\n  const {\n    itemId\n  } = req.params;\n  let sql = 'INSERT INTO pantries (pantry, quantity, measId, item, spoonId) VALUES ((SELECT pantry FROM access WHERE shopListRole=2 AND shopList=(SELECT shopList FROM shoppingLists WHERE entryId=?)), (SELECT quantity FROM shoppingLists WHERE entryId=?),(SELECT measId FROM shoppingLists WHERE entryId= ? ),(SELECT item FROM shoppingLists WHERE entryId= ?),(SELECT spoonId FROM shoppingLists WHERE entryId=?))';\n  sql = mysql.format(sql, [itemId, itemId, itemId, itemId, itemId]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.json({\n      newItemId: results.insertId\n    });\n  });\n}; //PUT\n\n\nconst removeFrom = (req, res) => {\n  let sql = 'UPDATE shoppingLists SET activeItem=0 where entryId=?';\n  sql = mysql.format(sql, [req.params.itemId]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.status(204).json();\n  });\n};\n\nconst updateItem = (req, res) => {\n  const {\n    quantity,\n    measure,\n    item,\n    spoonId\n  } = req.body;\n  const {\n    itemId\n  } = req.params;\n  let sql = 'UPDATE shoppingLists SET quantity=COALESCE( ? , quantity), measId=(COALESCE( ? , measId)), item=(COALESCE( ? , item)), spoonId=(COALESCE( ? , spoonId)) WHERE entryId=? ';\n  sql = mysql.format(sql, [quantity, measure, item, spoonId, itemId]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.status(204).json();\n  });\n};\n\nconst markOff = (req, res) => {\n  const {\n    itemId\n  } = req.params;\n  let sql = 'UPDATE shoppingLists SET activeItem=0 WHERE entryId=?';\n  sql = mysql.format(sql, [itemId]);\n  pool.query(sql, (err, results) => {\n    if (err) handleSQLError(err, results);\n    return res.status(204).json();\n  });\n};\n\nmodule.exports = {\n  autoAddToPantry,\n  removeFrom,\n  updateItem,\n  markOff\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/controller/appFunc/shoppingLists/byItem.js"],"names":["mysql","require","pool","handleSQLError","autoAddToPantry","req","res","itemId","params","sql","format","query","err","results","json","newItemId","insertId","removeFrom","status","updateItem","quantity","measure","item","spoonId","body","markOff","module","exports"],"mappings":"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","sourcesContent":["const mysql = require('mysql')\nconst pool = require('../../../sql/connection')\nconst { handleSQLError } = require('../../../sql/error')\n\n//GET\n\n//POST\nconst autoAddToPantry = (req, res) => {\n\n  const {itemId} = req.params\n\n  let sql = 'INSERT INTO pantries (pantry, quantity, measId, item, spoonId) VALUES ((SELECT pantry FROM access WHERE shopListRole=2 AND shopList=(SELECT shopList FROM shoppingLists WHERE entryId=?)), (SELECT quantity FROM shoppingLists WHERE entryId=?),(SELECT measId FROM shoppingLists WHERE entryId= ? ),(SELECT item FROM shoppingLists WHERE entryId= ?),(SELECT spoonId FROM shoppingLists WHERE entryId=?))'\n\n  sql = mysql.format(sql, [itemId, itemId, itemId, itemId, itemId])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    return res.json( { newItemId: results.insertId} )\n  })\n}\n\n//PUT\nconst removeFrom = (req, res) => {\n\nlet sql='UPDATE shoppingLists SET activeItem=0 where entryId=?'\n\nsql=mysql.format(sql,[req.params.itemId])\n\npool.query(sql, (err, results) => {\n  if (err) return handleSQLError(res, err)\n  return res.status(204).json();\n})\n}\n\nconst updateItem = (req, res) => {\n\n  const {quantity, measure, item, spoonId} = req.body\n  const {itemId} = req.params\n\nlet sql='UPDATE shoppingLists SET quantity=COALESCE( ? , quantity), measId=(COALESCE( ? , measId)), item=(COALESCE( ? , item)), spoonId=(COALESCE( ? , spoonId)) WHERE entryId=? '\n\n\nsql=mysql.format(sql, [quantity, measure, item, spoonId, itemId])\n\npool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    return res.status(204).json();\n})\n\n}\n\nconst markOff = (req, res) => {\n\n  const {itemId} = req.params\n\n  let sql = 'UPDATE shoppingLists SET activeItem=0 WHERE entryId=?'\n\n  sql = mysql.format(sql, [itemId])\n\n  pool.query(sql, (err, results) => {\n    if (err) handleSQLError(err, results)\n\n    return res.status(204).json()\n  })\n}\n\n\nmodule.exports = {\n  autoAddToPantry,\n  removeFrom,\n  updateItem,\n  markOff\n}"]},"metadata":{},"sourceType":"script"}