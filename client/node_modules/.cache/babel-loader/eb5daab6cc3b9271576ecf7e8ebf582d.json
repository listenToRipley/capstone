{"ast":null,"code":"'use strict';\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */\n\n/**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */\n\nmodule.exports = FetchError;\n\nfunction FetchError(message, type, systemError) {\n  Error.call(this, message);\n  this.message = message;\n  this.type = type; // when err.type is `system`, err.code contains system error code\n\n  if (systemError) {\n    this.code = this.errno = systemError.code;\n  } // hide custom error implementation details from end-users\n\n\n  Error.captureStackTrace(this, this.constructor);\n}\n\nFetchError.prototype = Object.create(Error.prototype);\nFetchError.prototype.constructor = FetchError;\nFetchError.prototype.name = 'FetchError';","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/npm/node_modules/node-fetch-npm/src/fetch-error.js"],"names":["module","exports","FetchError","message","type","systemError","Error","call","code","errno","captureStackTrace","constructor","prototype","Object","create","name"],"mappings":"AAAA;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AACAA,MAAM,CAACC,OAAP,GAAiBC,UAAjB;;AACA,SAASA,UAAT,CAAqBC,OAArB,EAA8BC,IAA9B,EAAoCC,WAApC,EAAiD;AAC/CC,EAAAA,KAAK,CAACC,IAAN,CAAW,IAAX,EAAiBJ,OAAjB;AAEA,OAAKA,OAAL,GAAeA,OAAf;AACA,OAAKC,IAAL,GAAYA,IAAZ,CAJ+C,CAM/C;;AACA,MAAIC,WAAJ,EAAiB;AACf,SAAKG,IAAL,GAAY,KAAKC,KAAL,GAAaJ,WAAW,CAACG,IAArC;AACD,GAT8C,CAW/C;;;AACAF,EAAAA,KAAK,CAACI,iBAAN,CAAwB,IAAxB,EAA8B,KAAKC,WAAnC;AACD;;AAEDT,UAAU,CAACU,SAAX,GAAuBC,MAAM,CAACC,MAAP,CAAcR,KAAK,CAACM,SAApB,CAAvB;AACAV,UAAU,CAACU,SAAX,CAAqBD,WAArB,GAAmCT,UAAnC;AACAA,UAAU,CAACU,SAAX,CAAqBG,IAArB,GAA4B,YAA5B","sourcesContent":["'use strict'\n\n/**\n * fetch-error.js\n *\n * FetchError interface for operational errors\n */\n\n/**\n * Create FetchError instance\n *\n * @param   String      message      Error message for human\n * @param   String      type         Error type for machine\n * @param   String      systemError  For Node.js system error\n * @return  FetchError\n */\nmodule.exports = FetchError\nfunction FetchError (message, type, systemError) {\n  Error.call(this, message)\n\n  this.message = message\n  this.type = type\n\n  // when err.type is `system`, err.code contains system error code\n  if (systemError) {\n    this.code = this.errno = systemError.code\n  }\n\n  // hide custom error implementation details from end-users\n  Error.captureStackTrace(this, this.constructor)\n}\n\nFetchError.prototype = Object.create(Error.prototype)\nFetchError.prototype.constructor = FetchError\nFetchError.prototype.name = 'FetchError'\n"]},"metadata":{},"sourceType":"script"}