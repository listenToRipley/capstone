{"ast":null,"code":"module.exports = loadCAFile;\n\nvar fs = require('fs');\n\nfunction loadCAFile(cafilePath, cb) {\n  if (!cafilePath) return process.nextTick(cb);\n  fs.readFile(cafilePath, 'utf8', afterCARead.bind(this));\n\n  function afterCARead(er, cadata) {\n    if (er) {\n      // previous cafile no longer exists, so just continue on gracefully\n      if (er.code === 'ENOENT') return cb();\n      return cb(er);\n    }\n\n    var delim = '-----END CERTIFICATE-----';\n    var output;\n    output = cadata.split(delim).filter(function (xs) {\n      return !!xs.trim();\n    }).map(function (xs) {\n      return xs.trimLeft() + delim;\n    });\n    this.set('ca', output);\n    cb(null);\n  }\n}","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/client/node_modules/npm/lib/config/load-cafile.js"],"names":["module","exports","loadCAFile","fs","require","cafilePath","cb","process","nextTick","readFile","afterCARead","bind","er","cadata","code","delim","output","split","filter","xs","trim","map","trimLeft","set"],"mappings":"AAAAA,MAAM,CAACC,OAAP,GAAiBC,UAAjB;;AAEA,IAAIC,EAAE,GAAGC,OAAO,CAAC,IAAD,CAAhB;;AAEA,SAASF,UAAT,CAAqBG,UAArB,EAAiCC,EAAjC,EAAqC;AACnC,MAAI,CAACD,UAAL,EAAiB,OAAOE,OAAO,CAACC,QAAR,CAAiBF,EAAjB,CAAP;AAEjBH,EAAAA,EAAE,CAACM,QAAH,CAAYJ,UAAZ,EAAwB,MAAxB,EAAgCK,WAAW,CAACC,IAAZ,CAAiB,IAAjB,CAAhC;;AAEA,WAASD,WAAT,CAAsBE,EAAtB,EAA0BC,MAA1B,EAAkC;AAChC,QAAID,EAAJ,EAAQ;AACN;AACA,UAAIA,EAAE,CAACE,IAAH,KAAY,QAAhB,EAA0B,OAAOR,EAAE,EAAT;AAC1B,aAAOA,EAAE,CAACM,EAAD,CAAT;AACD;;AAED,QAAIG,KAAK,GAAG,2BAAZ;AACA,QAAIC,MAAJ;AAEAA,IAAAA,MAAM,GAAGH,MAAM,CACZI,KADM,CACAF,KADA,EAENG,MAFM,CAEC,UAAUC,EAAV,EAAc;AACpB,aAAO,CAAC,CAACA,EAAE,CAACC,IAAH,EAAT;AACD,KAJM,EAKNC,GALM,CAKF,UAAUF,EAAV,EAAc;AACjB,aAAOA,EAAE,CAACG,QAAH,KAAgBP,KAAvB;AACD,KAPM,CAAT;AASA,SAAKQ,GAAL,CAAS,IAAT,EAAeP,MAAf;AACAV,IAAAA,EAAE,CAAC,IAAD,CAAF;AACD;AACF","sourcesContent":["module.exports = loadCAFile\n\nvar fs = require('fs')\n\nfunction loadCAFile (cafilePath, cb) {\n  if (!cafilePath) return process.nextTick(cb)\n\n  fs.readFile(cafilePath, 'utf8', afterCARead.bind(this))\n\n  function afterCARead (er, cadata) {\n    if (er) {\n      // previous cafile no longer exists, so just continue on gracefully\n      if (er.code === 'ENOENT') return cb()\n      return cb(er)\n    }\n\n    var delim = '-----END CERTIFICATE-----'\n    var output\n\n    output = cadata\n      .split(delim)\n      .filter(function (xs) {\n        return !!xs.trim()\n      })\n      .map(function (xs) {\n        return xs.trimLeft() + delim\n      })\n\n    this.set('ca', output)\n    cb(null)\n  }\n}\n"]},"metadata":{},"sourceType":"script"}