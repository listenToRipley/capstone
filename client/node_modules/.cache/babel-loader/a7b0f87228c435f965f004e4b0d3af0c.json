{"ast":null,"code":"const mysql = require('mysql');\n\nconst pool = require('../../../sql/connection');\n\nconst {\n  handleSQLError\n} = require('../../../sql/error'); //GET\n\n\nconst reqCount = (req, res) => {\n  let sql = 'SELECT COUNT(reqItId) AS requestCount FROM itemRequest WHERE active=1 AND shopList=? ';\n  sql = mysql.format(sql, [req.params.listId]);\n  pool.query(sql, (err, row) => {\n    if (err) return handleSQLError(res, err);\n    let total = row[0]['requestCount'];\n\n    if (total === 0) {\n      return res.send('No requests');\n    } else {\n      return res.json(row);\n    }\n  });\n}; //THIS IS ONLY AVAILABLE AS A OWNER OR CO-OWNER  \n\n\nconst viewShopRequests = (req, res) => {\n  let sql = 'SELECT * FROM itemRequest WHERE active=1 AND shopList=? ';\n  sql = mysql.format(sql, [req.params.listId]);\n  console.log('sql', sql);\n  pool.query(sql, (err, row) => {\n    if (err) return handleSQLError(res, err);\n    let total = row[0]['*'];\n\n    if (total === 0) {\n      return res.json({\n        count: 0\n      });\n    } else {\n      return res.json(row);\n    }\n  });\n};\n\nconst viewSentRequests = (req, res) => {\n  let sql = 'SELECT * FROM itemRequest WHERE active=1 AND requester=?';\n  sql = mysql.format(sql, [req.params.listId, req.user]);\n  console.log('sql', sql);\n  pool.query(sql, (err, row) => {\n    if (err) return handleSQLError(res, err);\n    let total = row[0]['*'];\n\n    if (total === 0) {\n      return res.send(`You haven't sent any request`);\n    } else {\n      return res.json(row);\n    }\n  });\n}; //POST \n//CAN ONLY DO AS A REQUESTER\n\n\nconst addShopRequest = (req, res) => {\n  const {\n    quantity,\n    measId,\n    item,\n    spoonId\n  } = req.body;\n  const {\n    listId\n  } = req.params;\n  let sql = 'INSERT INTO itemRequest (requester, quantity, measId, item, spoonId, shopList, access) VALUES (? , ?, ?, ? , ?, ?, (SELECT accessId FROM access WHERE username=? AND shopListRole=5 AND shopList=?))';\n  sql = mysql.format(sql, [req.user, quantity, measId, item, spoonId, listId, req.user, listId]);\n  pool.query(sql, (err, results) => {\n    if (err) return handleSQLError(res, err);\n    return res.json({\n      newReqId: results.insertId\n    });\n  });\n}; //use this for canceling req\n\n\nconst declineShopRequest = (req, res) => {\n  console.log('sorry, we are not going to get that');\n  let sql = 'UPDATE itemRequest SET active=0, approved=0 WHERE reqItId= ? ';\n  sql = mysql.format(sql, [req.params.reqId]);\n  pool.query(sql, (err, row) => {\n    if (err) return handleSQLError(res, err);\n    return res.send('item was declined');\n  });\n};\n\nmodule.exports = {\n  reqCount,\n  viewShopRequests,\n  viewSentRequests,\n  addShopRequest,\n  declineShopRequest\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/controller/appFunc/shoppingLists/requests.js"],"names":["mysql","require","pool","handleSQLError","reqCount","req","res","sql","format","params","listId","query","err","row","total","send","json","viewShopRequests","console","log","count","viewSentRequests","user","addShopRequest","quantity","measId","item","spoonId","body","results","newReqId","insertId","declineShopRequest","reqId","module","exports"],"mappings":"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","sourcesContent":["const mysql = require('mysql')\nconst pool = require('../../../sql/connection')\nconst { handleSQLError } = require('../../../sql/error')\n\n//GET\nconst reqCount = (req, res) => {\n\n  let sql='SELECT COUNT(reqItId) AS requestCount FROM itemRequest WHERE active=1 AND shopList=? '\n\n  sql = mysql.format(sql, [req.params.listId])\n\n  pool.query (sql, (err, row ) => {\n    if(err) return handleSQLError(res, err) \n    let total = row[0]['requestCount']\n\n    if(total===0) {\n      return res.send('No requests')\n    } else {\n      return res.json(row)\n    }\n  })\n}\n\n//THIS IS ONLY AVAILABLE AS A OWNER OR CO-OWNER  \nconst viewShopRequests = (req, res) => {\n\n  let sql='SELECT * FROM itemRequest WHERE active=1 AND shopList=? '\n\n  sql = mysql.format(sql, [req.params.listId])\n  console.log('sql', sql)\n  pool.query(sql, (err, row) => {\n    if(err) return handleSQLError(res, err) \n    let total = row[0]['*']\n\n    if(total===0) {\n      return res.json({count: 0})\n    } else {\n      return res.json(row)\n    }\n  })\n}\n\nconst viewSentRequests = (req, res) => {\n\n  let sql='SELECT * FROM itemRequest WHERE active=1 AND requester=?'\n\n  sql = mysql.format(sql, [req.params.listId, req.user])\n  console.log('sql', sql)\n  pool.query(sql, (err, row) => {\n    if(err) return handleSQLError(res, err) \n    let total = row[0]['*']\n\n    if(total===0) {\n      return res.send(`You haven't sent any request`)\n    } else {\n      return res.json(row)\n    }\n  })\n}\n\n//POST \n\n//CAN ONLY DO AS A REQUESTER\nconst addShopRequest = (req, res) => {\n\n  const { quantity, measId, item, spoonId} = req.body\n  const { listId} = req.params\n\n  let sql='INSERT INTO itemRequest (requester, quantity, measId, item, spoonId, shopList, access) VALUES (? , ?, ?, ? , ?, ?, (SELECT accessId FROM access WHERE username=? AND shopListRole=5 AND shopList=?))'\n\n  sql=mysql.format(sql, [req.user,quantity, measId, item, spoonId, listId, req.user, listId])\n\n  pool.query(sql, (err, results) => {\n    if(err) return handleSQLError(res, err)\n    return res.json( { newReqId: results.insertId} );\n  })\n\n}\n\n//use this for canceling req\nconst declineShopRequest = (req, res) => {\n  console.log('sorry, we are not going to get that')\n\n  let sql = 'UPDATE itemRequest SET active=0, approved=0 WHERE reqItId= ? '\n  \n  sql=mysql.format(sql, [req.params.reqId])\n\n  pool.query(sql, (err, row) => {\n    if(err) return handleSQLError(res, err)\n    return res.send('item was declined')\n  })\n}\n\n\nmodule.exports = { \n  reqCount,\n  viewShopRequests,\n  viewSentRequests,\n  addShopRequest,\n  declineShopRequest\n}"]},"metadata":{},"sourceType":"script"}