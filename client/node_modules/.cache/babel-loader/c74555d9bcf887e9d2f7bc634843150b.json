{"ast":null,"code":"'use strict';\n/**\n * A set of utilities borrowed from Node.js' _http_common.js\n */\n\n/**\n * Verifies that the given val is a valid HTTP token\n * per the rules defined in RFC 7230\n * See https://tools.ietf.org/html/rfc7230#section-3.2.6\n *\n * Allowed characters in an HTTP token:\n * ^_`a-z  94-122\n * A-Z     65-90\n * -       45\n * 0-9     48-57\n * !       33\n * #$%&'   35-39\n * *+      42-43\n * .       46\n * |       124\n * ~       126\n *\n * This implementation of checkIsHttpToken() loops over the string instead of\n * using a regular expression since the former is up to 180% faster with v8 4.9\n * depending on the string length (the shorter the string, the larger the\n * performance difference)\n *\n * Additionally, checkIsHttpToken() is currently designed to be inlinable by v8,\n * so take care when making changes to the implementation so that the source\n * code size does not exceed v8's default max_inlined_source_size setting.\n **/\n\n/* istanbul ignore next */\n\nfunction isValidTokenChar(ch) {\n  if (ch >= 94 && ch <= 122) {\n    return true;\n  }\n\n  if (ch >= 65 && ch <= 90) {\n    return true;\n  }\n\n  if (ch === 45) {\n    return true;\n  }\n\n  if (ch >= 48 && ch <= 57) {\n    return true;\n  }\n\n  if (ch === 34 || ch === 40 || ch === 41 || ch === 44) {\n    return false;\n  }\n\n  if (ch >= 33 && ch <= 46) {\n    return true;\n  }\n\n  if (ch === 124 || ch === 126) {\n    return true;\n  }\n\n  return false;\n}\n/* istanbul ignore next */\n\n\nfunction checkIsHttpToken(val) {\n  if (typeof val !== 'string' || val.length === 0) {\n    return false;\n  }\n\n  if (!isValidTokenChar(val.charCodeAt(0))) {\n    return false;\n  }\n\n  const len = val.length;\n\n  if (len > 1) {\n    if (!isValidTokenChar(val.charCodeAt(1))) {\n      return false;\n    }\n\n    if (len > 2) {\n      if (!isValidTokenChar(val.charCodeAt(2))) {\n        return false;\n      }\n\n      if (len > 3) {\n        if (!isValidTokenChar(val.charCodeAt(3))) {\n          return false;\n        }\n\n        for (var i = 4; i < len; i++) {\n          if (!isValidTokenChar(val.charCodeAt(i))) {\n            return false;\n          }\n        }\n      }\n    }\n  }\n\n  return true;\n}\n\nexports.checkIsHttpToken = checkIsHttpToken;\n/**\n * True if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n *\n * checkInvalidHeaderChar() is currently designed to be inlinable by v8,\n * so take care when making changes to the implementation so that the source\n * code size does not exceed v8's default max_inlined_source_size setting.\n **/\n\n/* istanbul ignore next */\n\nfunction checkInvalidHeaderChar(val) {\n  val += '';\n\n  if (val.length < 1) {\n    return false;\n  }\n\n  var c = val.charCodeAt(0);\n\n  if (c <= 31 && c !== 9 || c > 255 || c === 127) {\n    return true;\n  }\n\n  if (val.length < 2) {\n    return false;\n  }\n\n  c = val.charCodeAt(1);\n\n  if (c <= 31 && c !== 9 || c > 255 || c === 127) {\n    return true;\n  }\n\n  if (val.length < 3) {\n    return false;\n  }\n\n  c = val.charCodeAt(2);\n\n  if (c <= 31 && c !== 9 || c > 255 || c === 127) {\n    return true;\n  }\n\n  for (var i = 3; i < val.length; ++i) {\n    c = val.charCodeAt(i);\n\n    if (c <= 31 && c !== 9 || c > 255 || c === 127) {\n      return true;\n    }\n  }\n\n  return false;\n}\n\nexports.checkInvalidHeaderChar = checkInvalidHeaderChar;","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/npm/node_modules/node-fetch-npm/src/common.js"],"names":["isValidTokenChar","ch","checkIsHttpToken","val","length","charCodeAt","len","i","exports","checkInvalidHeaderChar","c"],"mappings":"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","sourcesContent":["'use strict'\n/**\n * A set of utilities borrowed from Node.js' _http_common.js\n */\n\n/**\n * Verifies that the given val is a valid HTTP token\n * per the rules defined in RFC 7230\n * See https://tools.ietf.org/html/rfc7230#section-3.2.6\n *\n * Allowed characters in an HTTP token:\n * ^_`a-z  94-122\n * A-Z     65-90\n * -       45\n * 0-9     48-57\n * !       33\n * #$%&'   35-39\n * *+      42-43\n * .       46\n * |       124\n * ~       126\n *\n * This implementation of checkIsHttpToken() loops over the string instead of\n * using a regular expression since the former is up to 180% faster with v8 4.9\n * depending on the string length (the shorter the string, the larger the\n * performance difference)\n *\n * Additionally, checkIsHttpToken() is currently designed to be inlinable by v8,\n * so take care when making changes to the implementation so that the source\n * code size does not exceed v8's default max_inlined_source_size setting.\n **/\n/* istanbul ignore next */\nfunction isValidTokenChar (ch) {\n  if (ch >= 94 && ch <= 122) { return true }\n  if (ch >= 65 && ch <= 90) { return true }\n  if (ch === 45) { return true }\n  if (ch >= 48 && ch <= 57) { return true }\n  if (ch === 34 || ch === 40 || ch === 41 || ch === 44) { return false }\n  if (ch >= 33 && ch <= 46) { return true }\n  if (ch === 124 || ch === 126) { return true }\n  return false\n}\n/* istanbul ignore next */\nfunction checkIsHttpToken (val) {\n  if (typeof val !== 'string' || val.length === 0) { return false }\n  if (!isValidTokenChar(val.charCodeAt(0))) { return false }\n  const len = val.length\n  if (len > 1) {\n    if (!isValidTokenChar(val.charCodeAt(1))) { return false }\n    if (len > 2) {\n      if (!isValidTokenChar(val.charCodeAt(2))) { return false }\n      if (len > 3) {\n        if (!isValidTokenChar(val.charCodeAt(3))) { return false }\n        for (var i = 4; i < len; i++) {\n          if (!isValidTokenChar(val.charCodeAt(i))) { return false }\n        }\n      }\n    }\n  }\n  return true\n}\nexports.checkIsHttpToken = checkIsHttpToken\n\n/**\n * True if val contains an invalid field-vchar\n *  field-value    = *( field-content / obs-fold )\n *  field-content  = field-vchar [ 1*( SP / HTAB ) field-vchar ]\n *  field-vchar    = VCHAR / obs-text\n *\n * checkInvalidHeaderChar() is currently designed to be inlinable by v8,\n * so take care when making changes to the implementation so that the source\n * code size does not exceed v8's default max_inlined_source_size setting.\n **/\n/* istanbul ignore next */\nfunction checkInvalidHeaderChar (val) {\n  val += ''\n  if (val.length < 1) { return false }\n  var c = val.charCodeAt(0)\n  if ((c <= 31 && c !== 9) || c > 255 || c === 127) { return true }\n  if (val.length < 2) { return false }\n  c = val.charCodeAt(1)\n  if ((c <= 31 && c !== 9) || c > 255 || c === 127) { return true }\n  if (val.length < 3) { return false }\n  c = val.charCodeAt(2)\n  if ((c <= 31 && c !== 9) || c > 255 || c === 127) { return true }\n  for (var i = 3; i < val.length; ++i) {\n    c = val.charCodeAt(i)\n    if ((c <= 31 && c !== 9) || c > 255 || c === 127) { return true }\n  }\n  return false\n}\nexports.checkInvalidHeaderChar = checkInvalidHeaderChar\n"]},"metadata":{},"sourceType":"script"}