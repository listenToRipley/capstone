{"ast":null,"code":"import { CREATE_NEW_USER } from './types';\nimport moment from 'moment';\n\nconst modBirthday = day => {\n  console.log(day);\n  let dob = day.split('-');\n  return dob;\n};\n\nexport const createNewUser = (userId, firstName, lastName, email, password, bDay) => async dispatch => {\n  console.log('values', userId, firstName, lastName, email, password, bDay);\n  modBirthday(bDay);\n\n  try {\n    let res = await fetch('/preLogin/createUser', {\n      method: 'POST',\n      headers: {\n        Accept: \"application/json\",\n        \"Content-Type\": \"application/json\",\n        \"username\": `${userId.value}`,\n        \"password\": `${password.value}`,\n        \"email\": `${email.value}`,\n        \"firstName\": `${firstName.value}`,\n        \"lastName\": `${lastName.value}`,\n        \"dobMonth\": dobMonth,\n        \"dobDate\": dobDate,\n        \"dobYear\": dobYear\n      }\n    });\n    let getResult = await res.json();\n    let result = { ...getResult\n    };\n    dispatch({\n      type: CREATE_NEW_USER,\n      payload: {\n        newUser: {\n          created: true,\n          returned: result\n        }\n      }\n    });\n  } catch (e) {\n    return 'what the error the user details? ', {\n      e\n    };\n  }\n};","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/client/src/redux/actions/createNewUser.js"],"names":["CREATE_NEW_USER","moment","modBirthday","day","console","log","dob","split","createNewUser","userId","firstName","lastName","email","password","bDay","dispatch","res","fetch","method","headers","Accept","value","dobMonth","dobDate","dobYear","getResult","json","result","type","payload","newUser","created","returned","e"],"mappings":"AAAA,SAAQA,eAAR,QAA8B,SAA9B;AACA,OAAOC,MAAP,MAAmB,QAAnB;;AAIA,MAAMC,WAAW,GAAIC,GAAD,IAAS;AAC3BC,EAAAA,OAAO,CAACC,GAAR,CAAYF,GAAZ;AACE,MAAIG,GAAG,GAAGH,GAAG,CAACI,KAAJ,CAAU,GAAV,CAAV;AACA,SAAOD,GAAP;AACH,CAJD;;AAMA,OAAO,MAAME,aAAa,GAAG,CAACC,MAAD,EAASC,SAAT,EAAoBC,QAApB,EAA8BC,KAA9B,EAAqCC,QAArC,EAA+CC,IAA/C,KAAwD,MAAMC,QAAN,IAAkB;AACtGX,EAAAA,OAAO,CAACC,GAAR,CAAY,QAAZ,EAAsBI,MAAtB,EAA8BC,SAA9B,EAAyCC,QAAzC,EAAmDC,KAAnD,EAA0DC,QAA1D,EAAoEC,IAApE;AACCZ,EAAAA,WAAW,CAACY,IAAD,CAAX;;AAEA,MAAG;AACC,QAAIE,GAAG,GAAG,MAAMC,KAAK,CAAC,sBAAD,EAAyB;AAC5CC,MAAAA,MAAM,EAAE,MADoC;AAE5CC,MAAAA,OAAO,EAAE;AACPC,QAAAA,MAAM,EAAE,kBADD;AACqB,wBAAgB,kBADrC;AAEP,oBAAa,GAAEX,MAAM,CAACY,KAAM,EAFrB;AAGP,oBAAa,GAAER,QAAQ,CAACQ,KAAM,EAHvB;AAIP,iBAAU,GAAET,KAAK,CAACS,KAAM,EAJjB;AAKP,qBAAc,GAAEX,SAAS,CAACW,KAAM,EALzB;AAMP,oBAAa,GAAEV,QAAQ,CAACU,KAAM,EANvB;AAOP,oBAAYC,QAPL;AAQP,mBAAWC,OARJ;AASP,mBAAWC;AATJ;AAFmC,KAAzB,CAArB;AAeA,QAAIC,SAAS,GAAG,MAAMT,GAAG,CAACU,IAAJ,EAAtB;AACA,QAAIC,MAAM,GAAG,EAAC,GAAGF;AAAJ,KAAb;AACAV,IAAAA,QAAQ,CAAC;AACPa,MAAAA,IAAI,EAAE5B,eADC;AAEL6B,MAAAA,OAAO,EAAE;AACPC,QAAAA,OAAO,EAAE;AACPC,UAAAA,OAAO,EAAE,IADF;AAEPC,UAAAA,QAAQ,EAAEL;AAFH;AADF;AAFJ,KAAD,CAAR;AASD,GA3BH,CA2BI,OAAOM,CAAP,EAAU;AACV,WAAO,qCAAqC;AAACA,MAAAA;AAAD,KAA5C;AACH;AAEF,CAnCM","sourcesContent":["import {CREATE_NEW_USER} from './types'\nimport moment from 'moment'\n\n\n\nconst modBirthday = (day) => {\n  console.log(day)\n    let dob = day.split('-')\n    return dob\n}\n\nexport const createNewUser = (userId, firstName, lastName, email, password, bDay) => async dispatch => {\n console.log('values', userId, firstName, lastName, email, password, bDay)\n  modBirthday(bDay)\n\n  try{\n      let res = await fetch('/preLogin/createUser', {\n        method: 'POST',\n        headers: {\n          Accept: \"application/json\", \"Content-Type\": \"application/json\",\n          \"username\": `${userId.value}`,\n          \"password\": `${password.value}`,\n          \"email\": `${email.value}`,\n          \"firstName\": `${firstName.value}`,\n          \"lastName\": `${lastName.value}`,\n          \"dobMonth\": dobMonth,\n          \"dobDate\": dobDate,\n          \"dobYear\": dobYear\n        }\n      }\n      )\n      let getResult = await res.json()\n      let result = {...getResult}\n      dispatch({\n        type: CREATE_NEW_USER,\n          payload: {\n            newUser: {\n              created: true,\n              returned: result\n            }\n          }\n      })\n    } catch (e) {\n      return 'what the error the user details? ', {e}\n  }\n\n}"]},"metadata":{},"sourceType":"module"}