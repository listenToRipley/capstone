{"ast":null,"code":"var assert = require('assert');\n\nvar dirname = require('path').dirname;\n\nvar resolve = require('path').resolve;\n\nvar isInside = require('path-is-inside');\n\nvar rimraf = require('rimraf');\n\nvar lstat = require('graceful-fs').lstat;\n\nvar readdir = require('graceful-fs').readdir;\n\nvar rmdir = require('graceful-fs').rmdir;\n\nvar unlink = require('graceful-fs').unlink;\n\nmodule.exports = vacuum;\n\nfunction vacuum(leaf, options, cb) {\n  assert(typeof leaf === 'string', 'must pass in path to remove');\n  assert(typeof cb === 'function', 'must pass in callback');\n  if (!options) options = {};\n  assert(typeof options === 'object', 'options must be an object');\n  var log = options.log ? options.log : function () {};\n  leaf = leaf && resolve(leaf);\n  var base = options.base && resolve(options.base);\n\n  if (base && !isInside(leaf, base)) {\n    return cb(new Error(leaf + ' is not a child of ' + base));\n  }\n\n  lstat(leaf, function (error, stat) {\n    if (error) {\n      if (error.code === 'ENOENT') return cb(null);\n      log(error.stack);\n      return cb(error);\n    }\n\n    if (!(stat && (stat.isDirectory() || stat.isSymbolicLink() || stat.isFile()))) {\n      log(leaf, 'is not a directory, file, or link');\n      return cb(new Error(leaf + ' is not a directory, file, or link'));\n    }\n\n    if (options.purge) {\n      log('purging', leaf);\n      rimraf(leaf, function (error) {\n        if (error) return cb(error);\n        next(dirname(leaf));\n      });\n    } else if (!stat.isDirectory()) {\n      log('removing', leaf);\n      unlink(leaf, function (error) {\n        if (error) return cb(error);\n        next(dirname(leaf));\n      });\n    } else {\n      next(leaf);\n    }\n  });\n\n  function next(branch) {\n    branch = branch && resolve(branch); // either we've reached the base or we've reached the root\n\n    if (base && branch === base || branch === dirname(branch)) {\n      log('finished vacuuming up to', branch);\n      return cb(null);\n    }\n\n    readdir(branch, function (error, files) {\n      if (error) {\n        if (error.code === 'ENOENT') return cb(null);\n        log('unable to check directory', branch, 'due to', error.message);\n        return cb(error);\n      }\n\n      if (files.length > 0) {\n        log('quitting because other entries in', branch);\n        return cb(null);\n      }\n\n      if (branch === process.env.HOME) {\n        log('quitting because cannot remove home directory', branch);\n        return cb(null);\n      }\n\n      log('removing', branch);\n      lstat(branch, function (error, stat) {\n        if (error) {\n          if (error.code === 'ENOENT') return cb(null);\n          log('unable to lstat', branch, 'due to', error.message);\n          return cb(error);\n        }\n\n        var remove = stat.isDirectory() ? rmdir : unlink;\n        remove(branch, function (error) {\n          if (error) {\n            if (error.code === 'ENOENT') {\n              log('quitting because lost the race to remove', branch);\n              return cb(null);\n            }\n\n            if (error.code === 'ENOTEMPTY' || error.code === 'EEXIST') {\n              log('quitting because new (racy) entries in', branch);\n              return cb(null);\n            }\n\n            log('unable to remove', branch, 'due to', error.message);\n            return cb(error);\n          }\n\n          next(dirname(branch));\n        });\n      });\n    });\n  }\n}","map":{"version":3,"sources":["/Users/moonbox/Documents/capstone/pantrypal/node_modules/npm/node_modules/fs-vacuum/vacuum.js"],"names":["assert","require","dirname","resolve","isInside","rimraf","lstat","readdir","rmdir","unlink","module","exports","vacuum","leaf","options","cb","log","base","Error","error","stat","code","stack","isDirectory","isSymbolicLink","isFile","purge","next","branch","files","message","length","process","env","HOME","remove"],"mappings":"AAAA,IAAIA,MAAM,GAAGC,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIC,OAAO,GAAGD,OAAO,CAAC,MAAD,CAAP,CAAgBC,OAA9B;;AACA,IAAIC,OAAO,GAAGF,OAAO,CAAC,MAAD,CAAP,CAAgBE,OAA9B;;AACA,IAAIC,QAAQ,GAAGH,OAAO,CAAC,gBAAD,CAAtB;;AAEA,IAAII,MAAM,GAAGJ,OAAO,CAAC,QAAD,CAApB;;AACA,IAAIK,KAAK,GAAGL,OAAO,CAAC,aAAD,CAAP,CAAuBK,KAAnC;;AACA,IAAIC,OAAO,GAAGN,OAAO,CAAC,aAAD,CAAP,CAAuBM,OAArC;;AACA,IAAIC,KAAK,GAAGP,OAAO,CAAC,aAAD,CAAP,CAAuBO,KAAnC;;AACA,IAAIC,MAAM,GAAGR,OAAO,CAAC,aAAD,CAAP,CAAuBQ,MAApC;;AAEAC,MAAM,CAACC,OAAP,GAAiBC,MAAjB;;AAEA,SAASA,MAAT,CAAiBC,IAAjB,EAAuBC,OAAvB,EAAgCC,EAAhC,EAAoC;AAClCf,EAAAA,MAAM,CAAC,OAAOa,IAAP,KAAgB,QAAjB,EAA2B,6BAA3B,CAAN;AACAb,EAAAA,MAAM,CAAC,OAAOe,EAAP,KAAc,UAAf,EAA2B,uBAA3B,CAAN;AAEA,MAAI,CAACD,OAAL,EAAcA,OAAO,GAAG,EAAV;AACdd,EAAAA,MAAM,CAAC,OAAOc,OAAP,KAAmB,QAApB,EAA8B,2BAA9B,CAAN;AAEA,MAAIE,GAAG,GAAGF,OAAO,CAACE,GAAR,GAAcF,OAAO,CAACE,GAAtB,GAA4B,YAAY,CAAE,CAApD;AAEAH,EAAAA,IAAI,GAAGA,IAAI,IAAIV,OAAO,CAACU,IAAD,CAAtB;AACA,MAAII,IAAI,GAAGH,OAAO,CAACG,IAAR,IAAgBd,OAAO,CAACW,OAAO,CAACG,IAAT,CAAlC;;AACA,MAAIA,IAAI,IAAI,CAACb,QAAQ,CAACS,IAAD,EAAOI,IAAP,CAArB,EAAmC;AACjC,WAAOF,EAAE,CAAC,IAAIG,KAAJ,CAAUL,IAAI,GAAG,qBAAP,GAA+BI,IAAzC,CAAD,CAAT;AACD;;AAEDX,EAAAA,KAAK,CAACO,IAAD,EAAO,UAAUM,KAAV,EAAiBC,IAAjB,EAAuB;AACjC,QAAID,KAAJ,EAAW;AACT,UAAIA,KAAK,CAACE,IAAN,KAAe,QAAnB,EAA6B,OAAON,EAAE,CAAC,IAAD,CAAT;AAE7BC,MAAAA,GAAG,CAACG,KAAK,CAACG,KAAP,CAAH;AACA,aAAOP,EAAE,CAACI,KAAD,CAAT;AACD;;AAED,QAAI,EAAEC,IAAI,KAAKA,IAAI,CAACG,WAAL,MAAsBH,IAAI,CAACI,cAAL,EAAtB,IAA+CJ,IAAI,CAACK,MAAL,EAApD,CAAN,CAAJ,EAA+E;AAC7ET,MAAAA,GAAG,CAACH,IAAD,EAAO,mCAAP,CAAH;AACA,aAAOE,EAAE,CAAC,IAAIG,KAAJ,CAAUL,IAAI,GAAG,oCAAjB,CAAD,CAAT;AACD;;AAED,QAAIC,OAAO,CAACY,KAAZ,EAAmB;AACjBV,MAAAA,GAAG,CAAC,SAAD,EAAYH,IAAZ,CAAH;AACAR,MAAAA,MAAM,CAACQ,IAAD,EAAO,UAAUM,KAAV,EAAiB;AAC5B,YAAIA,KAAJ,EAAW,OAAOJ,EAAE,CAACI,KAAD,CAAT;AAEXQ,QAAAA,IAAI,CAACzB,OAAO,CAACW,IAAD,CAAR,CAAJ;AACD,OAJK,CAAN;AAKD,KAPD,MAOO,IAAI,CAACO,IAAI,CAACG,WAAL,EAAL,EAAyB;AAC9BP,MAAAA,GAAG,CAAC,UAAD,EAAaH,IAAb,CAAH;AACAJ,MAAAA,MAAM,CAACI,IAAD,EAAO,UAAUM,KAAV,EAAiB;AAC5B,YAAIA,KAAJ,EAAW,OAAOJ,EAAE,CAACI,KAAD,CAAT;AAEXQ,QAAAA,IAAI,CAACzB,OAAO,CAACW,IAAD,CAAR,CAAJ;AACD,OAJK,CAAN;AAKD,KAPM,MAOA;AACLc,MAAAA,IAAI,CAACd,IAAD,CAAJ;AACD;AACF,GA9BI,CAAL;;AAgCA,WAASc,IAAT,CAAeC,MAAf,EAAuB;AACrBA,IAAAA,MAAM,GAAGA,MAAM,IAAIzB,OAAO,CAACyB,MAAD,CAA1B,CADqB,CAErB;;AACA,QAAKX,IAAI,IAAIW,MAAM,KAAKX,IAApB,IAA6BW,MAAM,KAAK1B,OAAO,CAAC0B,MAAD,CAAnD,EAA6D;AAC3DZ,MAAAA,GAAG,CAAC,0BAAD,EAA6BY,MAA7B,CAAH;AACA,aAAOb,EAAE,CAAC,IAAD,CAAT;AACD;;AAEDR,IAAAA,OAAO,CAACqB,MAAD,EAAS,UAAUT,KAAV,EAAiBU,KAAjB,EAAwB;AACtC,UAAIV,KAAJ,EAAW;AACT,YAAIA,KAAK,CAACE,IAAN,KAAe,QAAnB,EAA6B,OAAON,EAAE,CAAC,IAAD,CAAT;AAE7BC,QAAAA,GAAG,CAAC,2BAAD,EAA8BY,MAA9B,EAAsC,QAAtC,EAAgDT,KAAK,CAACW,OAAtD,CAAH;AACA,eAAOf,EAAE,CAACI,KAAD,CAAT;AACD;;AAED,UAAIU,KAAK,CAACE,MAAN,GAAe,CAAnB,EAAsB;AACpBf,QAAAA,GAAG,CAAC,mCAAD,EAAsCY,MAAtC,CAAH;AACA,eAAOb,EAAE,CAAC,IAAD,CAAT;AACD;;AAED,UAAIa,MAAM,KAAKI,OAAO,CAACC,GAAR,CAAYC,IAA3B,EAAiC;AAC/BlB,QAAAA,GAAG,CAAC,+CAAD,EAAkDY,MAAlD,CAAH;AACA,eAAOb,EAAE,CAAC,IAAD,CAAT;AACD;;AAEDC,MAAAA,GAAG,CAAC,UAAD,EAAaY,MAAb,CAAH;AACAtB,MAAAA,KAAK,CAACsB,MAAD,EAAS,UAAUT,KAAV,EAAiBC,IAAjB,EAAuB;AACnC,YAAID,KAAJ,EAAW;AACT,cAAIA,KAAK,CAACE,IAAN,KAAe,QAAnB,EAA6B,OAAON,EAAE,CAAC,IAAD,CAAT;AAE7BC,UAAAA,GAAG,CAAC,iBAAD,EAAoBY,MAApB,EAA4B,QAA5B,EAAsCT,KAAK,CAACW,OAA5C,CAAH;AACA,iBAAOf,EAAE,CAACI,KAAD,CAAT;AACD;;AAED,YAAIgB,MAAM,GAAGf,IAAI,CAACG,WAAL,KAAqBf,KAArB,GAA6BC,MAA1C;AACA0B,QAAAA,MAAM,CAACP,MAAD,EAAS,UAAUT,KAAV,EAAiB;AAC9B,cAAIA,KAAJ,EAAW;AACT,gBAAIA,KAAK,CAACE,IAAN,KAAe,QAAnB,EAA6B;AAC3BL,cAAAA,GAAG,CAAC,0CAAD,EAA6CY,MAA7C,CAAH;AACA,qBAAOb,EAAE,CAAC,IAAD,CAAT;AACD;;AACD,gBAAII,KAAK,CAACE,IAAN,KAAe,WAAf,IAA8BF,KAAK,CAACE,IAAN,KAAe,QAAjD,EAA2D;AACzDL,cAAAA,GAAG,CAAC,wCAAD,EAA2CY,MAA3C,CAAH;AACA,qBAAOb,EAAE,CAAC,IAAD,CAAT;AACD;;AAEDC,YAAAA,GAAG,CAAC,kBAAD,EAAqBY,MAArB,EAA6B,QAA7B,EAAuCT,KAAK,CAACW,OAA7C,CAAH;AACA,mBAAOf,EAAE,CAACI,KAAD,CAAT;AACD;;AAEDQ,UAAAA,IAAI,CAACzB,OAAO,CAAC0B,MAAD,CAAR,CAAJ;AACD,SAhBK,CAAN;AAiBD,OA1BI,CAAL;AA2BD,KA9CM,CAAP;AA+CD;AACF","sourcesContent":["var assert = require('assert')\nvar dirname = require('path').dirname\nvar resolve = require('path').resolve\nvar isInside = require('path-is-inside')\n\nvar rimraf = require('rimraf')\nvar lstat = require('graceful-fs').lstat\nvar readdir = require('graceful-fs').readdir\nvar rmdir = require('graceful-fs').rmdir\nvar unlink = require('graceful-fs').unlink\n\nmodule.exports = vacuum\n\nfunction vacuum (leaf, options, cb) {\n  assert(typeof leaf === 'string', 'must pass in path to remove')\n  assert(typeof cb === 'function', 'must pass in callback')\n\n  if (!options) options = {}\n  assert(typeof options === 'object', 'options must be an object')\n\n  var log = options.log ? options.log : function () {}\n\n  leaf = leaf && resolve(leaf)\n  var base = options.base && resolve(options.base)\n  if (base && !isInside(leaf, base)) {\n    return cb(new Error(leaf + ' is not a child of ' + base))\n  }\n\n  lstat(leaf, function (error, stat) {\n    if (error) {\n      if (error.code === 'ENOENT') return cb(null)\n\n      log(error.stack)\n      return cb(error)\n    }\n\n    if (!(stat && (stat.isDirectory() || stat.isSymbolicLink() || stat.isFile()))) {\n      log(leaf, 'is not a directory, file, or link')\n      return cb(new Error(leaf + ' is not a directory, file, or link'))\n    }\n\n    if (options.purge) {\n      log('purging', leaf)\n      rimraf(leaf, function (error) {\n        if (error) return cb(error)\n\n        next(dirname(leaf))\n      })\n    } else if (!stat.isDirectory()) {\n      log('removing', leaf)\n      unlink(leaf, function (error) {\n        if (error) return cb(error)\n\n        next(dirname(leaf))\n      })\n    } else {\n      next(leaf)\n    }\n  })\n\n  function next (branch) {\n    branch = branch && resolve(branch)\n    // either we've reached the base or we've reached the root\n    if ((base && branch === base) || branch === dirname(branch)) {\n      log('finished vacuuming up to', branch)\n      return cb(null)\n    }\n\n    readdir(branch, function (error, files) {\n      if (error) {\n        if (error.code === 'ENOENT') return cb(null)\n\n        log('unable to check directory', branch, 'due to', error.message)\n        return cb(error)\n      }\n\n      if (files.length > 0) {\n        log('quitting because other entries in', branch)\n        return cb(null)\n      }\n\n      if (branch === process.env.HOME) {\n        log('quitting because cannot remove home directory', branch)\n        return cb(null)\n      }\n\n      log('removing', branch)\n      lstat(branch, function (error, stat) {\n        if (error) {\n          if (error.code === 'ENOENT') return cb(null)\n\n          log('unable to lstat', branch, 'due to', error.message)\n          return cb(error)\n        }\n\n        var remove = stat.isDirectory() ? rmdir : unlink\n        remove(branch, function (error) {\n          if (error) {\n            if (error.code === 'ENOENT') {\n              log('quitting because lost the race to remove', branch)\n              return cb(null)\n            }\n            if (error.code === 'ENOTEMPTY' || error.code === 'EEXIST') {\n              log('quitting because new (racy) entries in', branch)\n              return cb(null)\n            }\n\n            log('unable to remove', branch, 'due to', error.message)\n            return cb(error)\n          }\n\n          next(dirname(branch))\n        })\n      })\n    })\n  }\n}\n"]},"metadata":{},"sourceType":"script"}